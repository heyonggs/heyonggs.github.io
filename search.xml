<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos查看系统 CPU 个数、核心数、线程数</title>
    <url>/p/36110.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Centos查看系统-CPU-个数、核心数、线程数">1. Centos查看系统 CPU 个数、核心数、线程数</h1><p>CPU的核数表示CPU可以同时执行的任务数量，在支持超线程情况下，同时执行的任务数翻倍。CPU的线程数表示CPU可以同时执行的任务数量。两者的联系分两种：CPU支持超线程技术，那么线程数＝核心数＊2；不支持超线程，线程数＝核心数。</p>
<p>线程数和超线程技术是两个概念，线程数是实际存在的，而超线程是CPU的技术标准。</p>
<h2 id="优缺点">1.1. 优缺点</h2><h3 id="优点">1.1.1. 优点</h3><p>1、可以同时进行多任务处理工作，软件可以享有由超线程技术带来的性能提升；</p>
<p>2、用户同时运行两个以上软件的时候，可以充分发挥超线程技术的效率优势。</p>
<h3 id="缺点">1.1.2. 缺点</h3><p>1、运行单线程软件时，超线程技术会降低系统性能；</p>
<p>2、因为很多工作站软件为Windows2000操作系统进行过优化，所以使用Windows2000的工作站无法完全利用超线程技术的优势；</p>
<p>3、当两个线程同时需要某个资源时，其中一个线程必须让出资源暂时挂起，直到这些资源空闲以后才能继续。因此，超线程的性能并不等于两个CPU的性能。</p>
<h2 id="查看-CPU-物理个数">1.2. 查看 CPU 物理个数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l</span><br><span class="line">或者</span><br><span class="line">grep &#x27;physical id&#x27; /proc/cpuinfo | sort -u | wc -l</span><br></pre></td></tr></table></figure>

<h2 id="查看-CPU-核心数量">1.3. 查看 CPU 核心数量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep &quot;core id&quot; | sort | uniq | wc -l</span><br><span class="line">或者</span><br><span class="line">grep &#x27;core id&#x27; /proc/cpuinfo | sort -u | wc -l</span><br></pre></td></tr></table></figure>

<h2 id="查看-CPU-线程数">1.4. 查看 CPU 线程数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep &quot;processor&quot; | sort | uniq | wc -l</span><br><span class="line">或者</span><br><span class="line">grep &#x27;processor&#x27; /proc/cpuinfo | sort -u | wc -l</span><br></pre></td></tr></table></figure>

<h2 id="查看-CPU-型号">1.5. 查看 CPU 型号</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep name | sort | uniq</span><br><span class="line">或者</span><br><span class="line">dmidecode -s processor-version</span><br></pre></td></tr></table></figure>

<h2 id="查看-CPU-的详细信息：">1.6. 查看 CPU 的详细信息：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>System,cpu</category>
      </categories>
      <tags>
        <tag>System,cpu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令与技巧</title>
    <url>/p/61914.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="ncdu">1. ncdu</h1><p>一个可以替代du命令的工具，ncdu命令是对传统du命令功能上的增强，不需要像du那样输入大量的命令，就可以计算文件及目录大小并可以按照大小或文件名进行排序。它是基于ncurses库开发的，因此还支持很多丰富的交互式命令。</p>
<h2 id="安装">1.1. 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS</span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install ncdu</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">apt-get install ncdu</span><br></pre></td></tr></table></figure>

<h2 id="使用方法">1.2. 使用方法</h2><blockquote>
<p>执行ncdu命令，回车，即可列出当前目录下的文件及目录的大小，默认按照大小进行排序，并且使用斜杠和回车键进行目录切换十分方便。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Linux /]# ncdu</span><br><span class="line"></span><br><span class="line">ncdu 1.16 ~ Use the arrow keys to navigate, press ? for help                                                                                                                                                      </span><br><span class="line">--- / ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">  316.3 GiB [##############################] /data                                                                                                                                                                </span><br><span class="line">   24.8 GiB [##                            ] /ssdimg</span><br><span class="line">    5.1 GiB [                              ] /samba</span><br><span class="line">    4.5 GiB [                              ] /usr</span><br><span class="line">    1.4 GiB [                              ] /var</span><br><span class="line">  149.3 MiB [                              ] /boot</span><br><span class="line">   45.7 MiB [                              ] /etc</span><br><span class="line">.  35.1 MiB [                              ] /run</span><br><span class="line">    5.4 MiB [                              ] /home</span><br><span class="line">    2.4 MiB [                              ] /root</span><br><span class="line">    1.8 MiB [                              ] /tmp</span><br><span class="line">  260.0 KiB [                              ]  .readahead</span><br><span class="line">.   0.0   B [                              ] /proc</span><br><span class="line">    0.0   B [                              ] /sys</span><br><span class="line">    0.0   B [                              ] /dev</span><br><span class="line">    0.0   B [                              ] /opt</span><br><span class="line">@   0.0   B [                              ]  lib64</span><br><span class="line">@   0.0   B [                              ]  sbin</span><br><span class="line">@   0.0   B [                              ]  lib</span><br><span class="line">@   0.0   B [                              ]  bin</span><br><span class="line">e   0.0   B [                              ] /srv</span><br><span class="line">e   0.0   B [                              ] /mnt</span><br><span class="line">e   0.0   B [                              ] /media</span><br><span class="line">    0.0   B [                              ]  .autorelabel</span><br></pre></td></tr></table></figure>

<h2 id="常用快捷键">1.3. 常用快捷键</h2><ul>
<li>up，k - 用于向上移动光标</li>
<li>down，j - 用于向下移动光标</li>
<li>右键，输入，l&gt; - 打开所选目录</li>
<li>left，&lt;，h - 这将打开父目录</li>
<li>n - 按名称排序（再次按降序排列）</li>
<li>s - 按文件大小排序（再次按降序排列）</li>
<li>d - 删除所选文件或目录</li>
<li>g - 显示百分比和/或图表</li>
<li>t - 排序时在文件之前切换dirs</li>
<li>c - 切换子项目计数的显示</li>
<li>b - 当前目录中的Spawn shell</li>
<li>i - 显示有关所选项目的信息</li>
<li>r - 刷新/重新计算当前目录</li>
<li>q - 退出ncdu</li>
</ul>
<h1 id="nmap">2. nmap</h1><p>Nmap用于在远程机器上探测网络，执行安全扫描，网络审计和搜寻开放端口。它会扫描远程在线主机，该主机的操作系统，包过滤器和开放的端口。</p>
<h2 id="安装-1">2.1. 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS</span><br><span class="line">yum install -y nmap</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">apt-get install nmap</span><br></pre></td></tr></table></figure>

<h2 id="扫描类型">2.2. 扫描类型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-sT    TCP connect() 扫描，这是最基本的 TCP 扫描方式。这种扫描很容易被检测到，在目标主机的日志中会记录大批的连接请求以及错误信息。</span><br><span class="line">-sS    TCP 同步扫描 (TCP SYN)，因为不必全部打开一个 TCP 连接，所以这项技术通常称为半开扫描 (half-open)。这项技术最大的好处是，很少有系统能够把这记入系统日志。不过，你需要 root 权限来定制 SYN 数据包。</span><br><span class="line">-sF,-sX,-sN    秘密 FIN 数据包扫描、圣诞树 (Xmas Tree)、空 (Null) 扫描模式。这些扫描方式的理论依据是：关闭的端口需要对你的探测包回应 RST 包，而打开的端口必需忽略有问题的包（参考 RFC 793 第 64 页）。</span><br><span class="line">-sP    ping 扫描，用 ping 方式检查网络上哪些主机正在运行。当主机阻塞 ICMP echo 请求包是 ping 扫描是无效的。nmap 在任何情况下都会进行 ping 扫描，只有目标主机处于运行状态，才会进行后续的扫描。</span><br><span class="line">-sU    UDP 的数据包进行扫描，如果你想知道在某台主机上提供哪些 UDP（用户数据报协议，RFC768) 服务，可以使用此选项。</span><br><span class="line">-sA    ACK 扫描，这项高级的扫描方法通常可以用来穿过防火墙。</span><br><span class="line">-sW    滑动窗口扫描，非常类似于 ACK 的扫描。</span><br><span class="line">-sR    RPC 扫描，和其它不同的端口扫描方法结合使用。</span><br><span class="line">-b    FTP 反弹攻击 (bounce attack)，连接到防火墙后面的一台 FTP 服务器做代理，接着进行端口扫描。</span><br></pre></td></tr></table></figure>

<h2 id="扫描参数">2.3. 扫描参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-P0    在扫描之前，不 ping 主机。</span><br><span class="line">-PT    扫描之前，使用 TCP ping 确定哪些主机正在运行。</span><br><span class="line">-PS    对于 root 用户，这个选项让 nmap 使用 SYN 包而不是 ACK 包来对目标主机进行扫描。</span><br><span class="line">-PI    设置这个选项，让 nmap 使用真正的 ping(ICMP echo 请求）来扫描目标主机是否正在运行。</span><br><span class="line">-PB    这是默认的 ping 扫描选项。它使用 ACK(-PT) 和 ICMP(-PI) 两种扫描类型并行扫描。如果防火墙能够过滤其中一种包，使用这种方法，你就能够穿过防火墙。</span><br><span class="line">-O    这个选项激活对 TCP/IP 指纹特征 (fingerprinting) 的扫描，获得远程主机的标志，也就是操作系统类型。</span><br><span class="line">-I    打开 nmap 的反向标志扫描功能。</span><br><span class="line">-f    使用碎片 IP 数据包发送 SYN、FIN、XMAS、NULL。包增加包过滤、入侵检测系统的难度，使其无法知道你的企图。</span><br><span class="line">-v    冗余模式。强烈推荐使用这个选项，它会给出扫描过程中的详细信息。</span><br><span class="line">-S &lt;IP&gt;    在一些情况下，nmap 可能无法确定你的源地址 (nmap 会告诉你）。在这种情况使用这个选项给出你的 IP 地址。</span><br><span class="line">-g port    设置扫描的源端口。一些天真的防火墙和包过滤器的规则集允许源端口为 DNS(53) 或者 FTP-DATA(20) 的包通过和实现连接。显然，如果攻击者把源端口修改为 20 或者 53，就可以摧毁防火墙的防护。</span><br><span class="line">-oN    把扫描结果重定向到一个可读的文件 logfilename 中。</span><br><span class="line">-oS    扫描结果输出到标准输出。</span><br><span class="line">--host_timeout    设置扫描一台主机的时间，以毫秒为单位。默认的情况下，没有超时限制。</span><br><span class="line">--max_rtt_timeout    设置对每次探测的等待时间，以毫秒为单位。如果超过这个时间限制就重传或者超时。默认值是大约 9000 毫秒。</span><br><span class="line">--min_rtt_timeout    设置 nmap 对每次探测至少等待你指定的时间，以毫秒为单位。</span><br><span class="line">-M count    置进行 TCP connect() 扫描时，最多使用多少个套接字进行并行的扫描。</span><br></pre></td></tr></table></figure>

<h2 id="example">2.4. example</h2><ul>
<li>获取远程主机系统类型和开放端口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A IP</span><br><span class="line">或者 </span><br><span class="line">nmap -sS -P0 -sV -O IP</span><br></pre></td></tr></table></figure>

<ul>
<li>探测内网在线主机（使用IP地址）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.0.0/24</span><br></pre></td></tr></table></figure>

<ul>
<li>扫描多台主机</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.0.101 192.168.0.102 192.168.0.103 </span><br></pre></td></tr></table></figure>

<ul>
<li>使用IP地址的最后一个字节扫描多台服务器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.0.101,102,103 </span><br></pre></td></tr></table></figure>

<ul>
<li>扫描一个IP地址范围</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.0.101-110</span><br></pre></td></tr></table></figure>

<ul>
<li><p>排除一些主机后再扫描</p>
<blockquote>
<p>在执行全网扫描或用通配符扫描时你可以使用“-<strong>exclude</strong>”选项来排除某些你不想要扫描的主机。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.0.* --exclude 192.168.0.100</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描操作系统信息和路由跟踪</p>
<blockquote>
<p>使用Nmap，你可以检测远程主机上运行的操作系统和版本。为了启用操作系统和版本检测，脚本扫描和路由跟踪功能，我们可以使用NMAP的“**-A**“选项。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A 192.168.0.101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启用Nmap的操作系统探测功能</p>
<blockquote>
<p>使用选项“**-O<strong>”和“</strong>-osscan-guess**”也帮助探测操作系统信息。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -O www.example.com</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描主机侦测防火墙</p>
<p>下面的命令将扫描远程主机以探测该主机是否使用了包过滤器或防火墙。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sA 192.168.0.101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描主机检测是否有防火墙保护</p>
<blockquote>
<p>扫描主机检测其是否受到数据包过滤软件或防火墙的保护。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PN 192.168.0.101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行快速扫描</p>
<blockquote>
<p>你可以使用“**-F**”选项执行一次快速扫描，仅扫描列在nmap-services文件中的端口而避开所有其它的端口。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -F 192.168.0.101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>顺序扫描端口</p>
<blockquote>
<p>使用“-r”选项表示不会随机的选择端口扫描。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -r 192.168.0.101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>打印主机接口和路由</p>
<blockquote>
<p>你可以使用nmap的“<strong>–iflist</strong>”选项检测主机接口和路由信息。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --iflist</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描特定的端口</p>
<blockquote>
<p>使用Nmap扫描远程机器的端口有各种选项，你可以使用“-<strong>P</strong>”选项指定你想要扫描的端口，默认情况下nmap只扫描<strong>TCP</strong>端口。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80 www.example.com</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描多个端口</p>
<blockquote>
<p>你还可以使用选项“-<strong>P</strong>”来扫描多个端口。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80,443 192.168.0.101</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描指定范围内的端口</p>
<blockquote>
<p>您可以使用表达式来扫描某个范围内的端口。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80-160 192.168.0.101</span><br></pre></td></tr></table></figure>



<h1 id="Linux命令使用技巧">3. Linux命令使用技巧</h1><h2 id="在一个命令中运行多个命令">3.1. 在一个命令中运行多个命令</h2><p>假设您必须一个接一个地运行几个命令。您是否在等待第一个命令完成运行，然后执行下一个命令？</p>
<p>那么，您可以使用“;”分隔符。这样，您可以在一行中运行许多命令。无需等待先前的命令完成后再执行其他任务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command_1; command_2; command_3</span><br></pre></td></tr></table></figure>

<h2 id="仅在上一个命令成功的情况下，才能在一个命令中运行多个命令">3.2. 仅在上一个命令成功的情况下，才能在一个命令中运行多个命令</h2><p>在上一个命令中，您了解了如何在一个命令中运行多个命令以节省时间。但很多时候你必须确保命令不会失败才能执行下一条命令，那怎么半？</p>
<p>比如您要构建代码，然后在构建成功的情况下才接着运行make。</p>
<p>在这种情况下，可以使用&amp;&amp;分隔符。&amp;&amp;确保下一条命令仅在上一条命令成功执行时运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command_1 &amp;&amp; command_2</span><br></pre></td></tr></table></figure>

<p>此命令的一个很好的例子是当您使用 sudo apt update &amp;&amp; sudo apt upgrade 升级系统时。</p>
<h2 id="轻松搜索您使用过的命令">3.3. 轻松搜索您使用过的命令</h2><p>想象一下一种情况，您在几分钟/几小时前使用了很长的命令，而您不得不再次使用它。问题是您不再记得确切的命令了。</p>
<p>反向搜索是您的救星。您可以使用搜索词在历史记录中搜索命令。</p>
<p>只需使用ctrl + r键即可启动反向搜索并键入命令的某些部分。它将查询历史记录，并向您显示与搜索词匹配的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + r 搜索词</span><br></pre></td></tr></table></figure>

<p>默认情况下，它将仅显示一个结果。要查看更多与您的搜索字词匹配的结果，您将不得不反复使用ctrl + r。要退出反向搜索，只需使用Ctrl + C。</p>
<p>在命令历史记录中进行反向搜索</p>
<p>请注意，在某些Bash Shell中，还可以在搜索词中使用Page Up和Down键，它将自动完成命令。</p>
<h2 id="解除Linux终端意外冻结的-Ctrl-S">3.4. 解除Linux终端意外冻结的 Ctrl + S</h2><p>在很多类Unix 的系统上，Ctrl-S 都有特殊的含义：它会“冻结”终端（它曾经被用来暂停快速滚动）。因为“保存”一般也是用这个快捷键，所以经常会有人不假思索地按下这个快捷键，结果大多数人都会被搞糊涂（我也经常犯这个错误）。解冻终端是用Ctrl-Q，所以如果你忽然发觉终端看起来被冻结了，试一下Ctrl-Q，看能不能释放它。</p>
<h2 id="移至行首或行尾">3.5. 移至行首或行尾</h2><p>假设您正在键入一个长命令，并且在途中您意识到必须在开始时进行一些更改。您将使用几次向左键击移动到行的开头。并且类似地进行到该行的末尾。</p>
<p>当然，您可以在此处使用Home和End键，但是也可以使用Ctrl + A转到行的开头，并使用Ctrl + E转到结尾。</p>
<p>移至该行的开头或结尾</p>
<p>我发现它比使用Home和End键更方便，尤其是在笔记本电脑上。</p>
<h2 id="读取压缩日志而不解压缩">3.6. 读取压缩日志而不解压缩</h2><p>服务器日志通常被gzip压缩以节省磁盘空间。这给分析日志的开发人员或系统管理员带来了一个问题。您可能必须将其scp到本地，然后提取它来访问文件，因为有时您没有提取日志的写权限。</p>
<p>值得庆幸的是，在这种情况下，z命令可以帮助您。z命令提供了用于处理日志文件（例如less，cat，grep等）的常规命令的替代方法。</p>
<p>这样您就可以使用zless，zcat，zgrep等命令查看压缩包的内容，甚至不必显式提取压缩文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[linuxidc@localhost ~/www.linuxidc.com]$zcat linuxidc_log.zip | more</span><br></pre></td></tr></table></figure>

<p>不解压缩读取压缩文件</p>
<h2 id="使用-less读取文件">3.7. 使用 less读取文件</h2><p>要查看文件的内容，cat不是最佳选择，特别是如果文件很大。cat命令将在屏幕上显示整个文件。</p>
<p>您可以使用Vi，Vim或其他基于终端的文本编辑器，但是如果您只想读取文件，则 less 命令是更好的选择。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less -N linuxidc.txt//按下v键来编辑文件//退出编辑器后，你可以继续用less浏览了</span><br></pre></td></tr></table></figure>

<p>您可以在更少的范围内搜索字词，按页移动，高亮与行号等。</p>
<h2 id="使用-重新使用上一个命令中的最后一项">3.8. 使用 !$ 重新使用上一个命令中的最后一项</h2><p>在许多情况下，使用上一个命令的参数很方便。</p>
<p>假设您必须创建一个目录，然后进入新创建的目录。那么，您可以使用<code>!$</code>选项。</p>
<p>使用 !$</p>
<p>更好的方法您可以使用使用alt + . 。在最后一个命令的选项之间来回移动的次数。</p>
<h2 id="用-重用当前命令中的上一个命令。">3.9. 用!!重用当前命令中的上一个命令。</h2><p>您可以使用!!调用前面的整个命令。当您必须运行一个命令并意识到它需要root特权时，这一点特别有用。</p>
<p>一个快速 sudo !! 省去了很多击键。</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/linux/202112091115517.png"></p>
<p>用!!重用当前命令中的上一个命令。</p>
<h2 id="使用别名来修正错别字">3.10. 使用别名来修正错别字</h2><p>您可能已经知道Linux中的别名命令是什么。你能做的是，用它们来修正打字错误。</p>
<p>例如，您可能经常将grep输入为gerp。如果您以这种方式在您的bashrc中放置一个别名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias gerp=grep</span><br></pre></td></tr></table></figure>

<p>这样，您无需再次输入命令。</p>
]]></content>
      <categories>
        <category>Linux,命令</category>
      </categories>
      <tags>
        <tag>Linux,命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户登陆服务器微信告警</title>
    <url>/p/undefined.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Linux用户登陆服务器微信告警">1. Linux用户登陆服务器微信告警</h1><h2 id="告警脚本">1.1. 告警脚本</h2><p>cat /data/aimm/script/wechat.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"></span><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用方法 sh ./send_message.sh <span class="string">&quot;发送内容&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如       sh ./send_message.sh <span class="string">&quot;测试环境，正在更新&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存要发送人员的账号,在通讯录可获取，多个人员之间使用空格分隔，以下为展示数据</span></span><br><span class="line">user=&quot;HeYong&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">企业微信ID:企业微信管理界面-’我的企业‘页面中获取</span></span><br><span class="line">corpid=&quot;ww0ba8cfd......&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">应用秘钥:在‘自建应用’-‘创建应用’-‘应用管理’中获取</span></span><br><span class="line">corpsecret=&quot;xK-......&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">企业应用ID:在<span class="string">&#x27;自建应用&#x27;</span>-<span class="string">&#x27;创建应用&#x27;</span>-<span class="string">&#x27;应用管理&#x27;</span>中获取</span></span><br><span class="line">agentld=1000003</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------以上变量需要自行修改-----------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存信息内容变量</span></span><br><span class="line">msg=&#x27;请检查服务器登录用户:\n主机名: &#x27;`hostname`&#x27;\n主机IP: &#x27;`ifconfig eth0|awk -F &#x27;[ :]+&#x27; &#x27;NR==2 &#123;print $3&#125;&#x27;`&#x27;\n登录用户: &#x27;`whoami`&#x27;\n登录IP: &#x27;`who am i |awk -F &#x27;[()]&#x27; &#x27;&#123;print $2&#125;&#x27;`&#x27;\n登录时间: &#x27;`date &#x27;+%Y-%m-%d-%H:%M:%S&#x27;`&#x27;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">curl -s 静默模式，就是不显示错误和进度</span></span><br><span class="line">A=`curl -s https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=$corpid\&amp;corpsecret=$corpsecret`</span><br><span class="line"><span class="meta">#</span><span class="bash">解析json格式 并获取access_token值</span></span><br><span class="line">token=`echo $A | jq -c &#x27;.access_token&#x27;`</span><br><span class="line"><span class="meta">#</span><span class="bash">去除变量值两边的双引号</span></span><br><span class="line">token=$&#123;token#*\&quot;&#125;</span><br><span class="line">token=$&#123;token%*\&quot;&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">请求地址</span></span><br><span class="line">URL=&quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=$token&quot;</span><br><span class="line"></span><br><span class="line">for I in $user;do</span><br><span class="line"><span class="meta">	#</span><span class="bash">发送的JSON内容</span></span><br><span class="line">	JSON=&quot;&#123;\&quot;touser\&quot;: \&quot;$I\&quot;,\&quot;msgtype\&quot;: \&quot;text\&quot;,\&quot;agentid\&quot;: \&quot;$agentld\&quot;,\&quot;text\&quot;: &#123;\&quot;content\&quot;: \&quot;$msg\&quot;&#125;,\&quot;safe\&quot;:0 &#125;&quot;</span><br><span class="line"><span class="meta">	#</span><span class="bash">以POST的方式请求</span></span><br><span class="line">	curl -d &quot;$JSON&quot; &quot;$URL&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>脚本中还涉及jq命令，这里我们安装一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# yum install -y jq</span><br></pre></td></tr></table></figure>

<p>在完善脚本之后，我们需要将脚本放置在<code>/etc/profile</code>这样用户在登陆的时候就会发送(前提是服务器可以访问外网，就是可以ping通百度)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"> </span><br><span class="line">/bin/bash  /data/aimm/script/wechat.sh</span><br></pre></td></tr></table></figure>

<p>登陆测试结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/linux202109260951985.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘满了解决方案</title>
    <url>/p/14331.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>查看磁盘情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zebp5657k0fz0pvgcgnz ~]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        909M     0  909M   0% /dev</span><br><span class="line">tmpfs           919M     0  919M   0% /dev/shm</span><br><span class="line">tmpfs           919M  8.6M  911M   1% /run</span><br><span class="line">tmpfs           919M     0  919M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        40G  8.4G   29G  23% /</span><br><span class="line">overlay          40G  8.4G   29G  23% /var/lib/docker/overlay2/e374b04682a79626e00aca70c896b2a9b5a46ae9730c3311dd774b1bc56bdb9d/merged</span><br><span class="line">overlay          40G  8.4G   29G  23% /var/lib/docker/overlay2/c59338b367886fefb1ff03641e25ad7a3800421f39652d43e08a51b51ac95009/merged</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>df: 用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p>
<p>-h：以K，M，G为单位，提高信息的可读性。</p>
<p>Size：总内存数</p>
<p>Used：使用内存数</p>
<p>Avail：剩余内存数</p>
<p>Mounted on：挂载点</p>
<p>查看文件夹下面的磁盘使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入根目录</span></span><br><span class="line">[root@iz2zebp5657k0fz0pvgcgnz ~]# cd /</span><br><span class="line">[root@iz2zebp5657k0fz0pvgcgnz /]# du --max-depth=1 -h</span><br><span class="line">44K	./home</span><br><span class="line">8.6M	./run</span><br><span class="line">24M	./tmp</span><br><span class="line">16K	./opt</span><br><span class="line">......</span><br><span class="line">0	./dev</span><br><span class="line">0	./sys</span><br><span class="line">101M	./root</span><br><span class="line">4.0K	./media</span><br><span class="line">48M	./etc</span><br><span class="line">4.9G	./var</span><br><span class="line">120M	./data</span><br><span class="line">11G	.</span><br></pre></td></tr></table></figure>

<p>du：会显示指定的目录或文件所占用的磁盘空间。</p>
<p>–max-depth-1：–max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</p>
<p>-h：以K，M，G为单位，提高信息的可读性。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决电脑无法访问个别网站</title>
    <url>/p/27338.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="解决电脑无法访问个别网站">1. 解决电脑无法访问个别网站</h1><p>在上网的过程中，发现了一个奇怪的问题，电脑可以访问网络，但却有很多国内的网站都访问不了，换了不同的浏览器测试也是同样的结果，而在同一电脑中安装的虚拟机，用浏览器测试却可以正常访问本地主机无法访问的网站、局域网内的其它电脑也可以正常访问那些网站。</p>
<p>在后面经过做了很多的排除，例如防火墙配置、DNS解析、IP协议等操作，就连mac地址都修改测试了，发现网络配置都是没问题的，后面查看可浏览器的配置（Internet属性），并重置了一下，网站就可以正常访问了，集体操作如下：</p>
<p>打开控制面板，选择 ”网络和Internet“</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/%E7%B3%BB%E7%BB%9F/202110220948365.png"></p>
<p>管理浏览器加载项</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/%E7%B3%BB%E7%BB%9F/202110220949598.png"></p>
<p>可以尝试将已启用的项目禁用在访问网站试试看</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/%E7%B3%BB%E7%BB%9F/202110220951469.png"></p>
<p>如果还不能访问尝试 “还原高级设置”</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/%E7%B3%BB%E7%BB%9F/202110220954918.png"></p>
<p>出现这种情况的原因：</p>
<p>1.有可能安装某些软件或插件安全过滤网站；</p>
<p>2.Internet的配置文件信息遭到篡改，重置一下即可。</p>
]]></content>
      <categories>
        <category>故障</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux面试题</title>
    <url>/p/5935.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="以文件的方式创建并挂载2G的swap分区">1. 以文件的方式创建并挂载2G的swap分区</h1><p>使用 dd 命令生成一个 2GB 大小的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@linux:~# dd if=/dev/zero of=/swapfile bs=4M count=500</span><br><span class="line">500+0 records in</span><br><span class="line">500+0 records out</span><br><span class="line">2097152000 bytes (2.1 GB, 2.0 GiB) copied, 13.26 s, 158 MB/s</span><br></pre></td></tr></table></figure>

<p>这里生成的是2.1GB,多出来0.1GB，原因是文件大小单位不同，一个是 <code>MB</code> 另一个是 <code>MiB</code></p>
<p>具体对应大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">megabyte(MB) = 1000000</span><br><span class="line">mebibyte(MiB) = 1024x1024 = 1048576</span><br></pre></td></tr></table></figure>

<p>MB是1024的倍数，而MiB是1000的倍数，同理KB和KiB：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kilobyte(KB) = 1000</span><br><span class="line">kibibyte(KiB) = 1024</span><br></pre></td></tr></table></figure>

<p>接下来使用 <code>mkswap</code> 命令将刚刚创建好的 <code>/swapfile</code> 文件格式化为交换分区所需要的格式，并修改一下文件权限为 600 ，即只能由 root 用户读，不然默认的 755 会被其他用户看到，而里面的内容是内存里的信息，所以安全起见还是修改一下权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@linux:~# mkswap /swapfile</span><br><span class="line">Setting up swapspace version 1, size = 2 GiB (2097147904 bytes)</span><br><span class="line">no label, UUID=253bbab8-a489-4f21-8007-f161b9c795f1</span><br><span class="line">root@linux:~# chmod 600 /swapfile</span><br><span class="line">root@linux:~# swapon !$</span><br><span class="line">swapon /swapfile</span><br><span class="line">root@linux:~# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          1.9Gi       454Mi        80Mi       2.0Mi       1.4Gi       1.3Gi</span><br><span class="line">Swap:         2.0Gi          0B       2.0Gi</span><br></pre></td></tr></table></figure>

<p>修改/etc/fstab使其启动时自动mount：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/swapfile  swap  swap    defaults 0 0</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux,面试题</category>
      </categories>
      <tags>
        <tag>Linux,面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>升级Windows11</title>
    <url>/p/34458.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="升级Windows11">1. 升级Windows11</h1><p>下载win11检测工具</p>
<p>先使用 Win11 检测工具（PC Health Check）看是否支持 Win11 系统</p>
<blockquote>
<p>下载地址：<a href="https://aka.ms/GetPCHealthCheckApp">https://aka.ms/GetPCHealthCheckApp</a></p>
</blockquote>
<p>也可以进入官网使用下载按钮下载</p>
<blockquote>
<p>链接：<a href="https://www.microsoft.com/zh-cn/windows/windows-11">https://www.microsoft.com/zh-cn/windows/windows-11</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/windows/202110111401352.png" alt="windows"></p>
<p>升级Windows11</p>
<p>通过微软提供的升级页面选择符合自己的方式进行升级。</p>
<blockquote>
<p><a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a></p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/windows/202110111405130.png" width="100%">

















]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀文章及网站收藏</title>
    <url>/p/42568.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="优秀文章及网站收藏">1. 优秀文章及网站收藏</h1><h2 id="榜单网站">1.1. 榜单网站</h2><h3 id="Oracle全球技术专家头衔列表">1.1.1. Oracle全球技术专家头衔列表</h3><p>Find Oracle ACEs, Groundbreaker Ambassadors and Java Champions in our Groundbreakers directory.</p>
<blockquote>
<p><a href="https://apexapps.oracle.com/pls/apex/f?p=119297:3">https://apexapps.oracle.com/pls/apex/f?p=119297:3</a>::::::</p>
</blockquote>
<p>编程网站排行榜</p>
<blockquote>
<p><a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a></p>
</blockquote>
<p>SQL Relay</p>
<blockquote>
<p><a href="http://sqlrelay.sourceforge.net/">http://sqlrelay.sourceforge.net/</a></p>
</blockquote>
<p>3D js库</p>
<p>市面上几乎所有3D js库, 不仅有开源协议、文件大小、迭代版本号等信息, 还分别使用每一种库写了4个demo</p>
<blockquote>
<p><a href="https://qiita.com/cx20/items/0fa19c96aa6470d98807">https://qiita.com/cx20/items/0fa19c96aa6470d98807</a></p>
</blockquote>
<h2 id="产品与设计">1.2. 产品与设计</h2><h3 id="即时原型">1.2.1. 即时原型</h3><p>产品原型设计与团队实时协作平台</p>
<blockquote>
<p><a href="https://www.xiaopiu.com/">https://www.xiaopiu.com/</a></p>
</blockquote>
<h3 id="即时设计">1.2.2. 即时设计</h3><p>专业级在线UI设计工具</p>
<blockquote>
<p><a href="https://js.design/">https://js.design</a></p>
</blockquote>
<h3 id="arco-design">1.2.3. arco.design</h3><p>字节跳动GIP UED团队与架构前端团队联合推出的企业级设计系统</p>
<blockquote>
<p><a href="https://arco.design/">https://arco.design/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>常用工具汇总</title>
    <url>/p/24997.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="常用工具汇总">1. 常用工具汇总</h1><h2 id="Adobe">1.1. Adobe</h2><h3 id="Adobe-Acrobat-Pro-DC2021破解直装版">1.1.1. Adobe Acrobat Pro DC2021破解直装版</h3><p>   Adobe Acrobat Pro DC是Adobe公司的一款PDF编辑和阅读软件。它将全球最佳的PDF解决方案提升到新的高度，配有直观触控式界面，通过开发强大的新功能，使用户能在任何地方完成工作。新工具中心可更简单迅速的访问最常使用的工具。Acrobat DC可利用Photoshop强大的图像编辑功能，将任何纸质文件转换为可编辑的电子文件，用于传输、签字。Acrobat DC 是完全重塑的全球最佳 PDF 解决方案的桌面版。它包括一个移动应用程序，因此您可以在任何设备上填写、签署以及共享 PDF。</p>
<blockquote>
<p>[大小]：868MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[安装包下载地址]：<a href="https://pan.baidu.com/s/1Eqwu72Y-VPJKY806UonVjg">https://pan.baidu.com/s/1Eqwu72Y-VPJKY806UonVjg</a> </p>
<p>[提取码]：r72k</p>
<p>[解压密码]：dzrjk8</p>
</blockquote>
<h2 id="数据库">1.2. 数据库</h2><h3 id="Redis-Desktop-Manager-2021-2中文破解版">1.2.1. Redis Desktop Manager 2021-2中文破解版</h3><p>Redis Desktop Manager是一款专业性极强的数据库管理软件。Redis Desktop Manager最新版可以帮助用户对Windows，Linux，MacOS进行快速开源与查看、操控数据库的数据，大大节省了用户的时间，提高了工作效率。</p>
<p>下载后直接安装，安装完成之后打开即可免费使用，</p>
<blockquote>
<p>[大小]：32.49MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[安装包下载地址]：<a href="https://pan.baidu.com/s/1qSvSed_Qplb5Xj76ly28cA">https://pan.baidu.com/s/1qSvSed_Qplb5Xj76ly28cA</a> </p>
<p>[提取码]：1234</p>
</blockquote>
<h2 id="截图">1.3. 截图</h2><h3 id="FastStone-Capture">1.3.1. FastStone Capture</h3><p>FastStone Capture是一款经典好用的<a href="http://www.onlinedown.net/sort/78/">屏幕截图软件</a>，FastStone Capture可以捕获BMP、GIF、JPEG等众多格式的图片，软件还具有<a href="https://www.onlinedown.net/soft/3442.htm">屏幕录像</a>的功能，方便用户录制精彩的瞬间，软件还可以截取滚动页面，方便用户截图。</p>
<blockquote>
<p>[大小]：4.5MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[安装包下载地址]：<a href="https://www.faststonesoft.net/DN/FSCaptureSetup95.exe">https://www.faststonesoft.net/DN/FSCaptureSetup95.exe</a></p>
</blockquote>
<p>注册码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FastStone Capture(FSCapture) 注册码</span><br><span class="line">2018年07月18日 15:19:08 殇莫忆 阅读数：12509</span><br><span class="line">企业版序列号： </span><br><span class="line">name：bluman </span><br><span class="line">serial/序列号/注册码：VPISCJULXUFGDDXYAUYF </span><br><span class="line"> </span><br><span class="line">FastStone Capture 注册码 序列号： </span><br><span class="line">name/用户名：TEAM JiOO </span><br><span class="line">key/注册码：CPCWXRVCZW30HMKE8KQQUXW </span><br><span class="line"> </span><br><span class="line">USER NAME:TEAM_BRAiGHTLiNG_2007 </span><br><span class="line">CODE:XPNMF-ISDYF-LCSED-BPATU </span><br></pre></td></tr></table></figure>



<h2 id="Synergy-键盘、鼠标共享软件">1.4. Synergy-键盘、鼠标共享软件</h2><p>Synergy允许你轻松地在你办公桌上多台计算机之间共享你的鼠标和键盘。你只要将鼠标（指针）从一台计算机的屏幕边缘移出到另 一个屏幕就行了。甚至可以共享你的剪贴板。你所需要的仅仅是一个网络连接。Synergy是跨平台的（可以运行于Windows，Mac OS X和Linux）。</p>
<h3 id="Synergy软件特色">1.4.1. Synergy软件特色</h3><p>   1、synergy中文版使用一套鼠标键盘来控制多台电脑</p>
<p>   2、Synergy支持多平台(Windows, Mac和Linux)</p>
<p>   3、共享剪切板(支持文字和图片)</p>
<p>   4、Synergy只需要局域网连接， 无需任何更多的硬件</p>
<p>   5、加密功能能更好的保护您的主要信息(比如密码)</p>
<p>   6、拖拽文件来实现文件在多个电脑之间的传输(现只支持Windows和Mac)</p>
<p>   7、开源，免费;学习开发多平台应用软件</p>
<p>   8、Synergy提高工作效率， 尤其是在工作需要同时操作多台电脑的情况下</p>
<p>   9、Synergy可利用老式笔记本电脑，处理一些轻操作量的工作(比如聊QQ)</p>
<p>   10、<a href="https://www.onlinedown.net/soft/256421.htm">游戏</a>多开(比如<a href="https://www.onlinedown.net/soft/580699.htm">魔兽</a>世界);Synergy节省桌面空间。</p>
<h3 id="下载地址">1.4.2. 下载地址</h3><ul>
<li>MAC 1.10.0版本</li>
</ul>
<blockquote>
<p>[大小]：12MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[安装包下载地址]：<a href="https://pan.baidu.com/s/1wTKloma7Vr6arb-6HROf2g">https://pan.baidu.com/s/1wTKloma7Vr6arb-6HROf2g</a></p>
<p>[提取码]：ihzq</p>
</blockquote>
<ul>
<li>windows 1.10.0版本（32位及64位）</li>
</ul>
<blockquote>
<p>[大小]：25.1MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[安装包下载地址]：<a href="https://pan.baidu.com/s/1G5-oVrvft07u6ZjerJd-XQ">https://pan.baidu.com/s/1G5-oVrvft07u6ZjerJd-XQ</a></p>
<p>[提取码]：b131</p>
</blockquote>
<h2 id="安卓模拟器">1.5. 安卓模拟器</h2><h3 id="BlueStacks-蓝叠">1.5.1. BlueStacks(蓝叠)</h3><blockquote>
<p>[大小]：461MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[安装包下载地址]：<a href="https://aliosscdn.bluestacks.cn/client/BlueStacks4Setup.exe">https://aliosscdn.bluestacks.cn/client/BlueStacks4Setup.exe</a></p>
</blockquote>
<h2 id="办公软件">1.6. 办公软件</h2><h3 id="WPS-Office-2019-专业版（政府版，已激活）">1.6.1. WPS Office 2019 专业版（政府版，已激活）</h3><blockquote>
<p>[大小]：185.59MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[阿里云盘]：<a href="https://www.aliyundrive.com/s/SK71XEpFJCi">https://www.aliyundrive.com/s/SK71XEpFJCi</a></p>
<p>[百度网盘]： <a href="https://pan.baidu.com/s/1i9Gu6sh7885oI3Wq4tmD7Q">https://pan.baidu.com/s/1i9Gu6sh7885oI3Wq4tmD7Q</a> </p>
<p>[提取码]：deav</p>
</blockquote>
<h3 id="wps2016专业增强版（激活版）">1.6.2. wps2016专业增强版（激活版）</h3><blockquote>
<p>[大小]：117.1MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[阿里云盘]：<a href="https://www.aliyundrive.com/s/AhXpfsZAELL">https://www.aliyundrive.com/s/AhXpfsZAELL</a></p>
<p>[百度网盘]： 链接: <a href="https://pan.baidu.com/s/1LrCr2wG6RHwxDT_h482DjA">https://pan.baidu.com/s/1LrCr2wG6RHwxDT_h482DjA</a> </p>
<p>[提取码]：tb4d</p>
</blockquote>
<h3 id="wps2019专业版（激活版）">1.6.3. wps2019专业版（激活版）</h3><blockquote>
<p>[大小]：171.9MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[阿里云盘]：<a href="https://www.aliyundrive.com/s/AhXpfsZAELL">https://www.aliyundrive.com/s/AhXpfsZAELL</a></p>
<p>[百度网盘]：<a href="https://pan.baidu.com/s/1xz19yCxn9r13QDT_XiUi4g">https://pan.baidu.com/s/1xz19yCxn9r13QDT_XiUi4g</a></p>
<p>[提取码]：1j8f </p>
</blockquote>
<h2 id="其它">1.7. 其它</h2><h3 id="压缩包密码破解工具">1.7.1. 压缩包密码破解工具</h3><blockquote>
<p>[大小]：2.9MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[百度网盘]：<a href="https://pan.baidu.com/s/1dGaWacZ4TPBPh_Gy4qtXRw">https://pan.baidu.com/s/1dGaWacZ4TPBPh_Gy4qtXRw</a></p>
<p>[提取码]：6fyv</p>
</blockquote>
<h3 id="PDF密码解除工具">1.7.2. PDF密码解除工具</h3><blockquote>
<p>[大小]：1.2MB</p>
<p>[操作系统]：32/64位</p>
<p>[安装环境]：Win7/Win8/Win10/Win11</p>
<p>[百度网盘]：<a href="https://pan.baidu.com/s/1NUfNcL7jbIFj0IlWxUkzxQ">https://pan.baidu.com/s/1NUfNcL7jbIFj0IlWxUkzxQ</a></p>
<p>[提取码]：6smt</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>RTNETLINK answers No such file or directory</title>
    <url>/p/42234.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="RTNETLINK-answers-No-such-file-or-directory">1. RTNETLINK answers: No such file or directory</h1><p>修改默认路由时，有如下报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]#ip route change default via 192.168.1.2</span><br><span class="line"></span><br><span class="line">RTNETLINK answers: No such file or directory</span><br></pre></td></tr></table></figure>

<p>查看路由信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1  0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0</span><br><span class="line">192.168.1.0    0.0.0.0         255.255.240.0   U     0      0        0 eth0</span><br></pre></td></tr></table></figure>



<p>解决方法：</p>
<p>关闭NetworkManager并取消开机自启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br></pre></td></tr></table></figure>

<p>重启网卡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<p>接着执行修改默认路由命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route change default via 192.168.1.2</span><br></pre></td></tr></table></figure>

<p>查看路由信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.2  0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0</span><br><span class="line">192.168.1.0    0.0.0.0         255.255.240.0   U     0      0        0 eth0</span><br></pre></td></tr></table></figure>

<p>可以看到已经成功修改。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>使用frp实现内网穿透</title>
    <url>/p/7496.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>使用frp实现内网穿透</p>
<blockquote>
<p>官网：<a href="https://gofrp.org/">https://gofrp.org/</a></p>
</blockquote>
<p>frp 主要由 <strong>客户端(frpc)</strong> 和 <strong>服务端(frps)</strong> 组成，服务端通常部署在具有公网 IP 的机器上，客户端通常部署在需要穿透的内网服务所在的机器上。</p>
<p>安装</p>
<p>我这里公网使用阿里云Ubuntu系统，内网使用CentOS7.</p>
<p>安装包下载地址</p>
<blockquote>
<p><a href="https://github.com/fatedier/frp/releases/download/v0.37.1/frp_0.37.1_linux_amd64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.37.1/frp_0.37.1_linux_amd64.tar.gz</a></p>
</blockquote>
<p>配置服务端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.37.1/frp_0.37.1_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf frp_0.37.1_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.37.1_linux_amd64/ </span><br></pre></td></tr></table></figure>

<p>这里主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，前者两个文件是客户端的文件，后者两个文件是服务端的文件。</p>
<p>编辑frps.ini文件</p>
<p>vim frps.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span>           <span class="comment">#与客户端绑定的进行通信的端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">6081</span>     <span class="comment">#访问客户端web服务自定义的端口号</span></span><br></pre></td></tr></table></figure>

<p>保存然后启动服务./frps -c ./frps.ini，这是前台启动，后台启动命令为nohup ./frps -c ./frps.ini &amp;</p>
<p>配置客服端</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>FRP</tag>
      </tags>
  </entry>
  <entry>
    <title>vnstat流量统计（新版2.8）</title>
    <url>/p/39608.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="vnstat流量统计（新版2-8）">1. vnstat流量统计（新版2.8）</h1><p>vnStat 是一个基于控制台的 Linux 和 BSD 网络流量监视器，它为所选接口保留网络流量日志。它使用内核提供的网络接口统计信息作为信息源。这意味着 vnStat 实际上不会嗅探任何流量，并且无论网络流量率如何，都可以确保少量使用系统资源。</p>
<p>这个程序是开源/GPL 的，可以作为root 用户或单个用户安装。 </p>
<blockquote>
<p>官方网址：<a href="http://humdi.net/vnstat/">http://humdi.net/vnstat/</a></p>
<p>github：<a href="https://github.com/vergoh/vnstat">https://github.com/vergoh/vnstat</a></p>
<p>图像输出演示：<a href="https://humdi.net/vnstat/cgidemo/">https://humdi.net/vnstat/cgidemo/</a></p>
</blockquote>
<p>特点</p>
<ul>
<li>安装和运行快速简单</li>
<li>收集的统计信息在系统重启后仍然存在</li>
<li>可以同时监控多个接口</li>
<li>几个输出选项</li>
<li>总结，5 分钟，每小时，每天，每月，每年，最重要的日子</li>
<li>可选的 png 图像输出（使用 libgd）</li>
<li>数据保留时间完全由用户动态配置</li>
<li>月份可以配置为遵循计费周期</li>
<li>轻量级，最少的资源使用</li>
<li>无论流量如何，CPU 使用率都一样低</li>
<li>无需root权限即可使用</li>
<li>在线颜色配置编辑器</li>
</ul>
<h2 id="安装配置vnstat">1.1. 安装配置vnstat</h2><h3 id="先决条件">1.1.1. 先决条件</h3><ul>
<li>make</li>
<li>C compiler</li>
<li>user with access to kernel interface statistics<ul>
<li>usually available by default but can be restricted for example by grsecurity and similar security enhancement suites or settings</li>
</ul>
</li>
<li>sqlite3 (library and development files)</li>
<li>libgd (optional, image output)</li>
<li>check (optional, test suite)</li>
<li>pkg-config (optional, for check detection)</li>
<li>autotools (optional, for recreating configure and makefiles)</li>
</ul>
<h3 id="安装">1.1.2. 安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/vergoh/vnstat/releases/download/v2.8/vnstat-2.8.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxf vnstat-2.8.tar.gz</span><br><span class="line"></span><br><span class="line">cd vnstat-2.8</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">mkdir /var/lib/vnstat</span><br><span class="line"></span><br><span class="line">chmod -R 777 /var/lib/vnstat/</span><br></pre></td></tr></table></figure>

<p>配置system启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v examples/systemd/vnstat.service /etc/systemd/system/</span><br><span class="line">systemctl enable vnstat</span><br><span class="line">systemctl start vnstat</span><br><span class="line">systemctl restart vnstat</span><br></pre></td></tr></table></figure>

<p>注意：如果是较旧的版本使用下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v examples/systemd/simple/vnstat.service /etc/systemd/system/</span><br><span class="line">systemctl enable vnstat</span><br><span class="line">systemctl start vnstat</span><br></pre></td></tr></table></figure>

<h3 id="其它系统">1.1.3. 其它系统</h3><ul>
<li>Debian</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v examples/init.d/debian/vnstat /etc/init.d/</span><br><span class="line">update-rc.d vnstat defaults</span><br><span class="line">service vnstat start</span><br></pre></td></tr></table></figure>

<ul>
<li>Red Hat / CentOS</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v examples/init.d/redhat/vnstat /etc/init.d/</span><br><span class="line">chkconfig vnstat on</span><br><span class="line">service vnstat start</span><br></pre></td></tr></table></figure>

<ul>
<li><p>upstart</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -v examples/upstart/vnstat.conf /etc/init/</span><br><span class="line">initctl start vnstat</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在首次启动期间，守护程序 (vnstatd) 应列出并添加所有可用的监控接口。根据配置，vnstat 命令可能需要几分钟时间才能开始显示结果，因为数据库中的条目不会不断更新。</p>
<p>可以通过以下方式停止对不需要的接口的监视：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vnstat --remove -i eth0</span><br></pre></td></tr></table></figure>

<p>如果需要添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vnstat --add -i eth0</span><br></pre></td></tr></table></figure>

<h2 id="vnstat使用">1.2. vnstat使用</h2><h3 id="vnstat命令参数详解">1.2.1. vnstat命令参数详解</h3><p>这里是最新版2.8的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat --help</span><br><span class="line">vnStat 2.8 by Teemu Toivola &lt;tst at iki dot fi&gt;</span><br><span class="line"></span><br><span class="line">      -5,  --fiveminutes [limit]   show 5 minutes</span><br><span class="line">      -h,  --hours [limit]         show hours</span><br><span class="line">      -hg, --hoursgraph            show hours graph</span><br><span class="line">      -d,  --days [limit]          show days</span><br><span class="line">      -m,  --months [limit]        show months</span><br><span class="line">      -y,  --years [limit]         show years</span><br><span class="line">      -t,  --top [limit]           show top days</span><br><span class="line"></span><br><span class="line">      -b, --begin &lt;date&gt;           set list begin date</span><br><span class="line">      -e, --end &lt;date&gt;             set list end date</span><br><span class="line"></span><br><span class="line">      --oneline [mode]             show simple parsable format</span><br><span class="line">      --json [mode] [limit]        show database in json format</span><br><span class="line">      --xml [mode] [limit]         show database in xml format</span><br><span class="line"></span><br><span class="line">      -tr, --traffic [time]        calculate traffic</span><br><span class="line">      -l,  --live [mode]           show transfer rate in real time</span><br><span class="line">      -i,  --iface &lt;interface&gt;     select interface</span><br><span class="line"></span><br><span class="line">Use &quot;--longhelp&quot; or &quot;man vnstat&quot; for complete list of options.</span><br></pre></td></tr></table></figure>

<h3 id="vnstat">1.2.2. vnstat</h3><p>查看所以接口流量统计情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat</span><br><span class="line"></span><br><span class="line">                      rx      /      tx      /     total    /   estimated</span><br><span class="line"> docker0:</span><br><span class="line">       2021-11           0 B  /         0 B  /         0 B  /     --     </span><br><span class="line">         today           0 B  /         0 B  /         0 B  /     --     </span><br><span class="line"></span><br><span class="line"> eth0:</span><br><span class="line">       2021-11    185.98 KiB  /  330.13 KiB  /  516.12 KiB  /     --     </span><br><span class="line">         today    185.98 KiB  /  330.13 KiB  /  516.12 KiB  /     675 KiB</span><br></pre></td></tr></table></figure>

<blockquote>
<p>rx：rx是接收(receive)</p>
<p>tx：tx是发送（transport）</p>
<p>total：总计</p>
<p>estimated：估计</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ipv6/202111121827173.png"></p>
<h3 id="vnstat-5">1.2.3. vnstat -5</h3><p>按照每五分钟查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat -5</span><br><span class="line"></span><br><span class="line"> eth0  /  5 minute</span><br><span class="line"></span><br><span class="line">         time        rx      |     tx      |    total    |   avg. rate</span><br><span class="line">     ------------------------+-------------+-------------+---------------</span><br><span class="line">     2021-11-12</span><br><span class="line">         18:10     78.90 KiB |  137.68 KiB |  216.58 KiB |    5.91 kbit/s</span><br><span class="line">         18:15    107.09 KiB |  192.45 KiB |  299.54 KiB |    8.18 kbit/s</span><br><span class="line">         18:20    107.65 KiB |  193.50 KiB |  301.15 KiB |    8.22 kbit/s</span><br><span class="line">     ------------------------+-------------+-------------+---------------</span><br></pre></td></tr></table></figure>

<blockquote>
<p>time：时间</p>
<p>rx：rx是接收(receive)</p>
<p>tx：tx是发送（transport）</p>
<p>total：总计</p>
<p>avg. rate：平均速度</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ipv6/202111121828946.png"></p>
<h3 id="vnstat-h">1.2.4. vnstat -h</h3><p>按小时查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat -h</span><br><span class="line"></span><br><span class="line"> eth0  /  hourly</span><br><span class="line"></span><br><span class="line">         hour        rx      |     tx      |    total    |   avg. rate</span><br><span class="line">     ------------------------+-------------+-------------+---------------</span><br><span class="line">     2021-11-12</span><br><span class="line">         18:00    396.99 KiB |  712.44 KiB |    1.08 MiB |    5.05 kbit/s</span><br><span class="line">     ------------------------+-------------+-------------+---------------</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ipv6/202111121833747.png"></p>
<h3 id="vnstat-hg">1.2.5. vnstat -hg</h3><p>显示小时图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat -hg</span><br><span class="line"> eth0                                                                     18:35 </span><br><span class="line">  ^                                                                        t    </span><br><span class="line">  |                                                                        t    </span><br><span class="line">  |                                                                        t    </span><br><span class="line">  |                                                                        t    </span><br><span class="line">  |                                                                        t    </span><br><span class="line">  |                                                                       rt    </span><br><span class="line">  |                                                                       rt    </span><br><span class="line">  |                                                                       rt    </span><br><span class="line">  |                                                                       rt    </span><br><span class="line">  |                                                                       rt    </span><br><span class="line"> -+---------------------------------------------------------------------------&gt; </span><br><span class="line">  |  19 20 21 22 23 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18    </span><br><span class="line">                                                                                </span><br><span class="line"> h  rx (KiB)   tx (KiB)  ][  h  rx (KiB)   tx (KiB)  ][  h  rx (KiB)   tx (KiB) </span><br><span class="line">19        0.0        0.0 ][ 03        0.0        0.0 ][ 11        0.0        0.0</span><br><span class="line">20        0.0        0.0 ][ 04        0.0        0.0 ][ 12        0.0        0.0</span><br><span class="line">21        0.0        0.0 ][ 05        0.0        0.0 ][ 13        0.0        0.0</span><br><span class="line">22        0.0        0.0 ][ 06        0.0        0.0 ][ 14        0.0        0.0</span><br><span class="line">23        0.0        0.0 ][ 07        0.0        0.0 ][ 15        0.0        0.0</span><br><span class="line">00        0.0        0.0 ][ 08        0.0        0.0 ][ 16        0.0        0.0</span><br><span class="line">01        0.0        0.0 ][ 09        0.0        0.0 ][ 17        0.0        0.0</span><br><span class="line">02        0.0        0.0 ][ 10        0.0        0.0 ][ 18      502.7      905.6</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ipv6/202111121836265.png"></p>
<h3 id="vnstat-tr">1.2.6. vnstat -tr</h3><p>计算流量（calculate traffic）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat -tr</span><br><span class="line">92 packets sampled in 5 seconds</span><br><span class="line">Traffic average for eth0</span><br><span class="line"></span><br><span class="line">      rx         6.21 kbit/s             9 packets/s</span><br><span class="line">      tx        10.11 kbit/s             9 packets/s</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ipv6/202111121839703.png"></p>
<h3 id="vnstat-l">1.2.7. vnstat -l</h3><p>显示实时传输率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux vnstat]# vnstat -l</span><br><span class="line">Monitoring eth0...    (press CTRL-C to stop)</span><br><span class="line"></span><br><span class="line">   rx:       384 bit/s     1 p/s          tx:       912 bit/s     1 p/s^C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> eth0  /  traffic statistics</span><br><span class="line"></span><br><span class="line">                           rx         |       tx</span><br><span class="line">--------------------------------------+------------------</span><br><span class="line">  bytes                    21.60 KiB  |       43.41 KiB</span><br><span class="line">--------------------------------------+------------------</span><br><span class="line">          max            7.91 kbit/s  |    15.87 kbit/s</span><br><span class="line">      average            2.85 kbit/s  |     5.74 kbit/s</span><br><span class="line">          min              384 bit/s  |       912 bit/s</span><br><span class="line">--------------------------------------+------------------</span><br><span class="line">  packets                        282  |             281</span><br><span class="line">--------------------------------------+------------------</span><br><span class="line">          max                 11 p/s  |          11 p/s</span><br><span class="line">      average                  4 p/s  |           4 p/s</span><br><span class="line">          min                  1 p/s  |           1 p/s</span><br><span class="line">--------------------------------------+------------------</span><br><span class="line">  time                  1.03 minutes</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ipv6/202111121841229.png"></p>
<p>还有好多用法，比如按天，按月等等，大家可以自行尝试。</p>
<h2 id="报错解决">1.3. 报错解决</h2><h3 id="错误一">1.3.1. 错误一</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configure: error: could not find required sqlite3 library</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<p><strong>Ubuntu</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Ubuntu</span><br><span class="line">apt-get install sqlite3</span><br><span class="line">apt-get install libsqlite3-dev</span><br></pre></td></tr></table></figure>

<p><strong>CentOS</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS</span><br><span class="line"># 方法一</span><br><span class="line">wget http: //www.sqlite.org/sqlite-autoconf-3070500.tar.gz</span><br><span class="line">tar xvzf sqlite-autoconf-3070500.tar.gz</span><br><span class="line">cd sqlite-autoconf-3070500</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># 方法二：</span><br><span class="line">yum install -y sqlite-devel</span><br><span class="line"></span><br><span class="line"># 方法三：</span><br><span class="line">yum install -y sqlite3-ruby</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看版本信息：sqlite3 -version<br>终端进入命令：sqlite3</p>
</blockquote>
<h3 id="错误二">1.3.2. 错误二</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configure: error: no acceptable C compiler found in $PATH</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<p><strong>Ubuntu</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Ubuntu</span><br><span class="line">apt-get install gcc gcc-c++</span><br></pre></td></tr></table></figure>

<p><strong>CentOS</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">yum -y install gcc gcc-c++</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line">wget http://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/gcc-9.4.0/gcc-9.4.0.tar.gz</span><br><span class="line">tar zxf gcc-9.4.0.tar.gz</span><br><span class="line">cd gcc-9.4.0</span><br><span class="line">yum -y install bzip2</span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line">./configure --disable-multilib --enable-languages=c,c++</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>错误三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: Cannot download mpfr-3.1.4.tar.bz2 from ftp://gcc.gnu.org/pub/gcc/infrastructure/</span><br><span class="line">error: Cannot download mpc-1.0.3.tar.gz from ftp://gcc.gnu.org/pub/gcc/infrastructure/</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: Cannot download gmp-6.1.0.tar.bz2 from ftp://gcc.gnu.org/pub/gcc/infrastructure/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://gmplib.org/download/gmp/gmp-6.1.0.tar.lz</span><br><span class="line">wget https://www.mpfr.org/mpfr-current/mpfr-3.1.4.tar.bz2</span><br><span class="line">wget https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz</span><br><span class="line">wget https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>vnstat</tag>
      </tags>
  </entry>
  <entry>
    <title>获取主机公网ip的几种方法</title>
    <url>/p/24449.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="获取主机公网ip的几种方法">1. 获取主机公网ip的几种方法</h1><p>1.使用ifconfig.io</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ifconfig.io</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>2.使用ifconfig.me</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ifconfig.me</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>3.使用ifconfig.co</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ifconfig.co</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>4.使用ident.me</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ident.me</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>5.使用ip.sb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ip.sb</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>6.使用ipinfo.io</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ipinfo.io</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ip&quot;: &quot;35.198.213.87&quot;,</span><br><span class="line">  &quot;hostname&quot;: &quot;87.213.198.35.bc.googleusercontent.com&quot;,</span><br><span class="line">  &quot;city&quot;: &quot;Singapore&quot;,</span><br><span class="line">  &quot;region&quot;: &quot;Singapore&quot;,</span><br><span class="line">  &quot;country&quot;: &quot;SG&quot;,</span><br><span class="line">  &quot;loc&quot;: &quot;1.2897,103.8501&quot;,</span><br><span class="line">  &quot;org&quot;: &quot;AS15169 Google LLC&quot;,</span><br><span class="line">  &quot;postal&quot;: &quot;048508&quot;,</span><br><span class="line">  &quot;timezone&quot;: &quot;Asia/Singapore&quot;,</span><br><span class="line">  &quot;readme&quot;: &quot;https://ipinfo.io/missingauth&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果这需要取出ip可以用ipinfo.io/ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl ipinfo.io/ip</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>7.使用icanhazip.com</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl icanhazip.com</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>8.使用myio.ipip.net</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl myip.ipip.net</span><br><span class="line">当前 IP：35.198.213.87  来自于：新加坡 新加坡   cloud.google.com</span><br></pre></td></tr></table></figure>

<p>9.使用checkip.dyndns.org</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl checkip.dyndns.org</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;Current IP Check&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Current IP Address: 35.198.213.87&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>如果这里只想取出IP可以执行下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl &quot;http://checkip.dyndns.org/&quot; 2&gt;/dev/null|awk &#x27;&#123;print $6&#125;&#x27;|cut -d &#x27;&lt;&#x27; -f1</span><br><span class="line">35.198.213.87</span><br></pre></td></tr></table></figure>

<p>10.使用cip.cc </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# curl cip.cc </span><br><span class="line">IP	: 35.198.213.87</span><br><span class="line">地址	: 新加坡  新加坡</span><br><span class="line"></span><br><span class="line">数据二	: 新加坡 | Google云计算数据中心</span><br><span class="line"></span><br><span class="line">数据三	: 新加坡 | 谷歌</span><br><span class="line"></span><br><span class="line">URL	: http://www.cip.cc/35.198.213.87</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>转载&#39;OpenSSL SSL_connect Connection was reset in connection to github.com 443&#39;</title>
    <url>/p/14759.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="OpenSSL-SSL-connect-Connection-was-reset-in-connection-to-github-com-443">1. OpenSSL SSL_connect: Connection was reset in connection to github.com:443</h1><p>使用github的push和pull时报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/heyonggs/heyonggs.github.io.git/&#x27;: OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br></pre></td></tr></table></figure>

<h2 id="方案一">1.1. 方案一</h2><p>在git bash命令行中依次输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslBackend &quot;openssl&quot;</span><br><span class="line">git config --global http.sslCAInfo &quot;C:\Program Files\Git\mingw64\ssl\cert.pem&quot;</span><br></pre></td></tr></table></figure>

<p>注意上面第二个命令，路径要换成git安装的路径。</p>
<h2 id="方案二">1.2. 方案二</h2><p>如果你开启了VPN，很可能是因为代理的问题，这时候设置一下http.proxy就可以了。</p>
<p>一定要查看自己的VPN端口号，假如你的端口号是7890，在git bash命令行中输入以下命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>如果你之前git中已经设置过上述配置，则使用如下命令取消再进行配置即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>下面是几个常用的git配置查看命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy #查看git的http代理配置</span><br><span class="line">git config --global https.proxy #查看git的https代理配置</span><br><span class="line">git config --global -l #查看git的所有配置</span><br></pre></td></tr></table></figure>

<h2 id="方案三">1.3. 方案三</h2><p>还有一个情况，是你的VNP代理服务器节点有问题，有时候更换一个结点就好了。当然，也可以使用自己搭建的代理服务器。</p>
<p>博主提示，一定要科学上网，合理上网。</p>
<h2 id="方案四">1.4. 方案四</h2><p>打开一个新的git bash终端，就没问题了。这个可能是当前git的会话有关。</p>
<blockquote>
<p>原文链接：<a href="https://blog.csdn.net/qq_37555071/article/details/114260533">https://blog.csdn.net/qq_37555071/article/details/114260533</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible Tower-安装配置及破解</title>
    <url>/p/31038.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Ansible-Tower-安装配置及破解">1. Ansible Tower-安装配置及破解</h1><blockquote>
<p><a href="https://www.cnblogs.com/hujinzhong/p/12172903.html">https://www.cnblogs.com/hujinzhong/p/12172903.html</a></p>
<p><a href="https://kionf.com/2018/11/21/tower-useage/">https://kionf.com/2018/11/21/tower-useage/</a></p>
</blockquote>
<h2 id="ansible-tower简介">1.1. ansible-tower简介</h2><p>1）公司中实现运维自动化的架构中主要用到ansible，ansible脚本在部署服务器指令行中显得不太直观。Ansible-Tower（之前叫做awx）是将ansible的指令界面化，简明直观，简单易用。</p>
<p>2）Ansibke-tower其实就是一个图形化的任务调度，复杂服务部署，IT自动化的一个管理平台，属于发布配置管理系统，支持Api及界面操作，Django编写。</p>
<p>3）Ansible-tower可以通过界面从github拉取最新playbook实施服务部署，提高生产效率。当然它也提供一个RESET API和命令行的CLI以供python脚本调用</p>
<p>官方网站：<a href="https://www.ansible.com/products/tower">https://www.ansible.com/products/tower</a><br>中文指南：<a href="http://www.ansible.com.cn/docs/tower.html">http://www.ansible.com.cn/docs/tower.html</a><br>官方安装文档：<a href="http://docs.ansible.com/ansible-tower/latest/html/quickinstall/index.html">http://docs.ansible.com/ansible-tower/latest/html/quickinstall/index.html</a><br>官方源地址：<a href="http://releases.ansible.com/ansible-tower/setup-bundle/">http://releases.ansible.com/ansible-tower/setup-bundle/</a></p>
<h2 id="ansible-tower安装及配置">1.2. ansible-tower安装及配置</h2><p>下载解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# cd /opt/</span><br><span class="line">[root@mgmt2 opt]# wget https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-3.6.2-1.el7.tar.gz</span><br><span class="line">[root@mgmt2 opt]# tar xf ansible-tower-setup-bundle-3.6.2-1.el7.tar.gz</span><br><span class="line">[root@mgmt2 opt]# cd ansible-tower-setup-bundle-3.6.2-1/</span><br><span class="line">[root@mgmt2 ansible-tower-setup-bundle-3.6.2-1]# ls</span><br><span class="line">backup.yml  bundle  group_vars  install.yml  inventory  licenses  README.md  rekey.yml  restore.yml  roles  setup.sh</span><br></pre></td></tr></table></figure>

<p>修改inventory配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible-tower-setup-bundle-3.6.2-1]# vim inventory</span><br><span class="line">[tower]</span><br><span class="line">localhost ansible_connection=local</span><br><span class="line"> </span><br><span class="line">[database]</span><br><span class="line"> </span><br><span class="line">[all:vars]</span><br><span class="line">admin_password=&#x27;tower&#x27;   #tower登录密码</span><br><span class="line"> </span><br><span class="line">pg_host=&#x27;&#x27;</span><br><span class="line">pg_port=&#x27;&#x27;</span><br><span class="line"> </span><br><span class="line">pg_database=&#x27;awx&#x27;</span><br><span class="line">pg_username=&#x27;awx&#x27;</span><br><span class="line">pg_password=&#x27;tower&#x27;</span><br><span class="line">pg_sslmode=&#x27;prefer&#x27;  # set to &#x27;verify-full&#x27; for client-side enforced SSL</span><br><span class="line"> </span><br><span class="line">rabbitmq_username=tower</span><br><span class="line">rabbitmq_password=&#x27;tower&#x27;</span><br><span class="line">rabbitmq_cookie=cookiemonster</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Isolated Tower nodes automatically generate an RSA key <span class="keyword">for</span> authentication;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">disable</span> this behavior, <span class="built_in">set</span> this value to <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> isolated_key_generation=<span class="literal">true</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SSL-related variables</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If <span class="built_in">set</span>, this will install a custom CA certificate to the system trust store.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> custom_ca_cert=/path/to/ca.crt</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Certificate and key to install <span class="keyword">in</span> nginx <span class="keyword">for</span> the web UI and API</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web_server_ssl_cert=/path/to/tower.cert</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web_server_ssl_key=/path/to/tower.key</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use SSL <span class="keyword">for</span> RabbitMQ inter-node communication.  Because RabbitMQ never</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> communicates outside the cluster, a private CA and certificates will be</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> created, and <span class="keyword">do</span> not need to be supplied.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmq_use_ssl=False</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Server-side SSL settings <span class="keyword">for</span> PostgreSQL (when we are installing it).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> postgres_use_ssl=False</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> postgres_ssl_cert=/path/to/pgsql.crt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> postgres_ssl_key=/path/to/pgsql.key</span></span><br></pre></td></tr></table></figure>

<p>开始安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible-tower-setup-bundle-3.6.2-1]# ./setup.sh</span><br></pre></td></tr></table></figure>

<p>浏览器访问</p>
<blockquote>
<p><a href="https://192.168.101.200/">https://192.168.101.200</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/1.jpg" alt="ansible"></p>
<p>登陆后这里需要认证</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/2.jpg" alt="ansible"></p>
<h2 id="ansible-tower破解">1.3. ansible-tower破解</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# cd /var/lib/awx/venv/awx/lib/python3.6/site-packages/tower_license</span><br><span class="line">[root@mgmt2 tower_license]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 7764 Dec 14  2019 __init__.pyc</span><br><span class="line">drwxr-xr-x 2 root root   37 Sep  8 16:06 __pycache__</span><br></pre></td></tr></table></figure>

<p>安装pip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 tower_license]# wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">[root@mgmt2 tower_license]# python3 get-pip.py</span><br><span class="line">[root@mgmt2 tower_license]# pip -V</span><br><span class="line">pip 21.2.4 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class="line"></span><br><span class="line">[root@mgmt2 tower_license]# pip install uncompyle6</span><br></pre></td></tr></table></figure>

<p>反汇编init.pyc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 tower_license]# uncompyle6 __init__.pyc &gt;__init__.py</span><br><span class="line">[root@mgmt2 tower_license]# ll</span><br><span class="line">total 1932</span><br><span class="line">-rw-r--r-- 1 root root 1957374 Aug  6 19:15 get-pip.py</span><br><span class="line">-rw-r--r-- 1 root root   11453 Sep  9 09:45 __init__.py</span><br><span class="line">-rw-r--r-- 1 root root    7764 Dec 14  2019 __init__.pyc</span><br><span class="line">drwxr-xr-x 2 root root      37 Sep  8 16:06 __pycache__</span><br></pre></td></tr></table></figure>

<p>修改__init__.py文件</p>
<p>[root@mgmt2 tower_license]# vim <code>__init__</code>.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_check_cloudforms_subscription</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>    <span class="comment">#添加这一行</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;/var/lib/awx/i18n.db&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(<span class="string">&#x27;/opt/rh/cfme-appliance&#x27;</span>):</span><br><span class="line">                <span class="keyword">if</span> os.path.isdir(<span class="string">&#x27;/opt/rh/cfme-gemset&#x27;</span>):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                has_rpms = subprocess.call([<span class="string">&#x27;rpm&#x27;</span>, <span class="string">&#x27;--quiet&#x27;</span>, <span class="string">&#x27;-q&#x27;</span>, <span class="string">&#x27;cfme&#x27;</span>, <span class="string">&#x27;cfme-appliance&#x27;</span>, <span class="string">&#x27;cfme-gemset&#x27;</span>])</span><br><span class="line">                <span class="keyword">if</span> has_rpms == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改&quot;license_date=253370764800L&quot; 为 &quot;license_date=253370764800&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_cloudforms_subscription</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._attrs.update(<span class="built_in">dict</span>(company_name=<span class="string">&#x27;Red Hat CloudForms License&#x27;</span>, instance_count=MAX_INSTANCES,</span><br><span class="line">          license_date=<span class="number">253370764800</span>,  <span class="comment">#修改</span></span><br><span class="line">          license_key=<span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">          license_type=<span class="string">&#x27;enterprise&#x27;</span>,</span><br><span class="line">          subscription_name=<span class="string">&#x27;Red Hat CloudForms License&#x27;</span>))</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>修改完重新编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 tower_license]# python3 -m py_compile __init__.py</span><br><span class="line">[root@mgmt2 tower_license]# python3 -O -m py_compile __init__.py</span><br><span class="line">[root@mgmt2 tower_license]# ll</span><br><span class="line">total 1932</span><br><span class="line">-rw-r--r-- 1 root root 1957374 Aug  6 19:15 get-pip.py</span><br><span class="line">-rw-r--r-- 1 root root   11473 Sep  9 09:51 __init__.py</span><br><span class="line">-rw-r--r-- 1 root root    7764 Dec 14  2019 __init__.pyc</span><br><span class="line">drwxr-xr-x 2 root root      74 Sep  9 09:53 __pycache__</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 tower_license]# ansible-tower-service restart</span><br><span class="line">Restarting Tower</span><br><span class="line">Redirecting to /bin/systemctl stop postgresql.service</span><br><span class="line">Redirecting to /bin/systemctl stop rabbitmq-server.service</span><br><span class="line">Redirecting to /bin/systemctl stop nginx.service</span><br><span class="line">Redirecting to /bin/systemctl stop supervisord.service</span><br><span class="line">Redirecting to /bin/systemctl start postgresql.service</span><br><span class="line">Redirecting to /bin/systemctl start rabbitmq-server.service</span><br><span class="line">Redirecting to /bin/systemctl start nginx.service</span><br><span class="line">Redirecting to /bin/systemctl start supervisord.service</span><br></pre></td></tr></table></figure>

<p>再次访问</p>
<blockquote>
<p><a href="https://192.168.101.200/">https://192.168.101.200</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/3.jpg" alt="ansible"></p>
<p><strong>另一种破解方法（未测试）</strong></p>
<blockquote>
<p> license 官方免费申请 <a href="https://www.ansible.com/license">https://www.ansible.com/license</a></p>
</blockquote>
<p>企业版无限node破解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">先申请企业版使用30天license ,激活，再执行如下：</span><br><span class="line"> </span><br><span class="line">echo codyguo &gt; /var/lib/awx/i18n.db</span><br><span class="line">ansible-tower-service restart</span><br></pre></td></tr></table></figure>



<h2 id="面板介绍">1.4. 面板介绍</h2><table>
<thead>
<tr>
<th># viewes</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Dashboard</td>
<td>仪表盘展示信息的</td>
</tr>
<tr>
<td>Jobs</td>
<td>跑过的任务记录</td>
</tr>
<tr>
<td>Schedules</td>
<td>计划任务</td>
</tr>
<tr>
<td>My View</td>
<td>查看用户的工作模版，和任务记录</td>
</tr>
<tr>
<td><strong># resources</strong></td>
<td></td>
</tr>
<tr>
<td>Templates</td>
<td>任务模版，配置调用playbook执行时的各种参数，  从此处添加计划任务</td>
</tr>
<tr>
<td>Credentials</td>
<td>配置连接 机器/云主机api Key/自定义的凭证类型  的账号密码等信息</td>
</tr>
<tr>
<td>Projects</td>
<td>这里配置项目对应的playbook，可以从Git上拉取  或从本地文件夹读取playbook</td>
</tr>
<tr>
<td>Inventories</td>
<td>资产清单</td>
</tr>
<tr>
<td>Inventory Scripts</td>
<td>自定义获取资产清单的脚本</td>
</tr>
<tr>
<td><strong># access</strong></td>
<td></td>
</tr>
<tr>
<td>Organizations</td>
<td>组织管理</td>
</tr>
<tr>
<td>Users</td>
<td>用户管理</td>
</tr>
<tr>
<td>Teams</td>
<td>用户组管理</td>
</tr>
<tr>
<td><strong># Administration</strong></td>
<td></td>
</tr>
<tr>
<td>Credential Types</td>
<td>自定义凭证类型，添加后可在Credentials中使用</td>
</tr>
<tr>
<td>Notifications</td>
<td>配置任务通知，支持电子邮件，Twillio电话等</td>
</tr>
<tr>
<td>Management Jobs</td>
<td>计划任务管理</td>
</tr>
<tr>
<td>Instance Groups</td>
<td>资产组管理</td>
</tr>
<tr>
<td>Applications</td>
<td>自定义应用</td>
</tr>
<tr>
<td>Settings</td>
<td>设置</td>
</tr>
</tbody></table>
<h2 id="运行测试项目">1.5. 运行测试项目</h2><p>playbook将在github上创建，Ansible Tower拉取执行，Ansible Tower的playbook默认存在 /var/lib/awx/projects/</p>
<p>创建host登录凭据</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/4.jpg" alt="ansible"></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/5.jpg" alt="ansible"></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/6.jpg" alt="ansible"></p>
<p>使用gitlab添加playbook项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/7.jpg" alt="ansible"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">a</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">date</span> <span class="string">on</span> <span class="string">the</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">date</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">ip</span> <span class="string">on</span> <span class="string">the</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">ifconfig</span></span><br></pre></td></tr></table></figure>

<p>在Ansible Tower添加拉取gitlab项目的凭据</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/8.jpg" alt="ansible"></p>
<p>创建Projects</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/9.jpg" alt="ansible"></p>
<p>保存后Ansilble Tower会自动运行一次Update，如果要手动运行，点击列表中的刷新按钮。当gitlab上yml文件被更新或者新增后需要点击一下刷新按钮，否则JOB执行得还是原来的yml</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/10.jpg" alt="ansible"></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/11.jpg" alt="ansible"></p>
<p>此时在Ansible Tower服务器的/var/lib/awx/projects/目录下已经有git拉下来的完整文件结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 tower_license]# cd /var/lib/awx/projects/</span><br><span class="line">[root@mgmt2 projects]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 3 awx awx 34 Sep  9 11:06 _8__pull_gitlab</span><br><span class="line">-rwxr-xr-x 1 awx awx  0 Sep  9 11:06 _8__pull_gitlab.lock</span><br><span class="line"></span><br><span class="line">[root@mgmt2 projects]# cd _8__pull_gitlab/</span><br><span class="line">[root@mgmt2 _8__pull_gitlab]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 awx awx 170 Sep  9 11:06 test.yml</span><br><span class="line"></span><br><span class="line">[root@mgmt2 _8__pull_gitlab]# cat test.yml </span><br><span class="line">---</span><br><span class="line">- hosts: test</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Check the date on the server</span><br><span class="line">      command: date</span><br><span class="line">    - name: Check the ip on the server</span><br><span class="line">      command: ifconfig</span><br></pre></td></tr></table></figure>

<h2 id="创建主机清单">1.6. 创建主机清单</h2><p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/12.jpg" alt="ansible"></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/13.jpg" alt="ansible"></p>
<h2 id="创建任务模板">1.7. 创建任务模板</h2><p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/14.jpg" alt="ansible"></p>
<p>运行模板</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/15.jpg" alt="ansible"></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/16.jpg" alt="ansible"></p>
<p>点击右侧日志中change几行可以看到详细信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/17.jpg" alt="ansible"></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ansible/18.jpg" alt="ansible"></p>
]]></content>
      <categories>
        <category>ansible</category>
      </categories>
      <tags>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置清单</title>
    <url>/p/38836.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Nginx配置清单">1. Nginx配置清单</h1><p>Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务，其因丰富的功能集、稳定性、示例配置文件和低系统资源的消耗受到了开发者的欢迎。</p>
<h2 id="侦听端口">1.1. 侦听端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  # Standard HTTP Protocol</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  # Standard HTTPS Protocol</span><br><span class="line">  listen 443 ssl;</span><br><span class="line"></span><br><span class="line">  # For http2</span><br><span class="line">  listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">  # Listen on 80 using IPv6</span><br><span class="line">  listen [::]:80;</span><br><span class="line"></span><br><span class="line">  # Listen only on using IPv6</span><br><span class="line">  listen [::]:80 ipv6only=on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问日志">1.2. 访问日志</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  # Relative or full path to log file</span><br><span class="line">  access_log /path/to/file.log;</span><br><span class="line"></span><br><span class="line">  # Turn &#x27;on&#x27; or &#x27;off&#x27;</span><br><span class="line">  access_log on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="域名">1.3. 域名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  # Listen to yourdomain.com</span><br><span class="line">  server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">  # Listen to multiple domains</span><br><span class="line">  server_name yourdomain.com www.yourdomain.com;</span><br><span class="line"></span><br><span class="line">  # Listen to all domains</span><br><span class="line">  server_name *.yourdomain.com;</span><br><span class="line"></span><br><span class="line">  # Listen to all top-level domains</span><br><span class="line">  server_name yourdomain.*;</span><br><span class="line"></span><br><span class="line">  # Listen to unspecified Hostnames (Listens to IP address itself)</span><br><span class="line">  server_name &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态资产">1.4. 静态资产</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">          root /path/to/website;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重定向">1.5. 重定向</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.yourdomain.com;</span><br><span class="line">  return 301 http://yourdomain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.yourdomain.com;</span><br><span class="line"></span><br><span class="line">  location /redirect-url &#123;</span><br><span class="line">     return 301 http://otherdomain.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反向代理">1.6. 反向代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">     proxy_pass http://0.0.0.0:3000;</span><br><span class="line">     # where 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡">1.7. 负载均衡</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream node_js &#123;</span><br><span class="line">  server 0.0.0.0:3000;</span><br><span class="line">  server 0.0.0.0:4000;</span><br><span class="line">  server 123.131.121.122;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">     proxy_pass http://node_js;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SSL-协议">1.8. SSL 协议</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl;</span><br><span class="line">  server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">  ssl on;</span><br><span class="line"></span><br><span class="line">  ssl_certificate /path/to/cert.pem;</span><br><span class="line">  ssl_certificate_key /path/to/privatekey.pem;</span><br><span class="line"></span><br><span class="line">  ssl_stapling on;</span><br><span class="line">  ssl_stapling_verify on;</span><br><span class="line">  ssl_trusted_certificate /path/to/fullchain.pem;</span><br><span class="line"></span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_session_timeout 1h;</span><br><span class="line">  ssl_session_cache shared:SSL:50m;</span><br><span class="line">  add_header Strict-Transport-Security max-age=15768000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Permanent Redirect for HTTP to HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name yourdomain.com;</span><br><span class="line">  return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="禁止IP访问">1.9. 禁止IP访问</h2><p>禁止ip访问是为了避免其他人把未备案的域名解析到自己的服务器IP，而导致服务器被断网，我们可以通过禁止使用ip访问的方法，防止此类事情的发生。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen       80;</span><br><span class="line">	server_name  www.yourdomain.com;</span><br><span class="line">	if ($host != &#x27;www.yourdomain.com&#x27;)&#123;</span><br><span class="line">		return 403;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="gzip压缩">1.10. gzip压缩</h2><p>在我们进行 gzip 打包压缩之前，最好将一些静态文件先进行压缩为 min 文件，请求的时候合并为同一文件。再通过 gzip 压缩后，你会发现网站加载又加速了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启gzip,减少我们发送的数据量</span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line">#允许压缩的最小字节数</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line">#4个单位为16k的内存作为压缩结果流缓存</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line"></span><br><span class="line">#设置识别HTTP协议版本，默认是1.1</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line">#gzip压缩比，可在1~9中设置，1压缩比最小，速度最快，9压缩比最大，速度最慢，消耗CPU</span><br><span class="line">gzip_comp_level 4;</span><br><span class="line"></span><br><span class="line">#压缩的类型</span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; </span><br><span class="line"></span><br><span class="line">#给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line">#禁用IE6以下的gzip压缩，IE6的某些版本对gzip的压缩支持很不好</span><br><span class="line">gzip_disable &quot;MSIE [1-6].&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="连接超时">1.11. 连接超时</h2><p>长时间占着连接资源不释放，最终会导致请求的堆积，Nginx 处理请求效率大大降低。所以我们对连接的控制都要注意设置超时时间，通过超时机制自动回收资源、避免资源浪费。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#客户端、服务端设置</span><br><span class="line">server_names_hash_bucket_size 128;</span><br><span class="line">server_names_hash_max_size 512;</span><br><span class="line"></span><br><span class="line"># 长连接超时配置</span><br><span class="line">keepalive_timeout  65;</span><br><span class="line">client_header_timeout 15s;</span><br><span class="line">client_body_timeout 15s;</span><br><span class="line">send_timeout 60s;</span><br><span class="line"></span><br><span class="line">#代理设置</span><br><span class="line">#与后端服务器建立连接的超时时间。注意这个一般不能大于75秒</span><br><span class="line">proxy_connect_timeout 30s;</span><br><span class="line">proxy_send_timeout 120s;</span><br><span class="line"></span><br><span class="line">#从后端服务器读取响应的超时</span><br><span class="line">proxy_read_timeout 120s;</span><br></pre></td></tr></table></figure>

<h2 id="隐藏版本信息">1.12. 隐藏版本信息</h2><p>暴露出来的版本号就容易变成攻击者可利用的信息。所以，从安全的角度来说，隐藏版本号会相对安全些！在http模块中增加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 隐藏版本信息</span><br><span class="line">server_tokens off;</span><br></pre></td></tr></table></figure>

<h2 id="防盗链">1.13. 防盗链</h2><p>防止别人直接从你网站引用图片等链接，消耗了你的资源和网络流量</p>
<p>在server模块中配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要防盗链资源的文件类型</span></span><br><span class="line">location ~*^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">#这是可以盗链的域名或IP地址，一般情况可以把google，baidu，sogou，soso，bing，feedsky，zhuaxia，photozero等域名放进来</span></span><br><span class="line">valid_referers noneblocked www.kubelet.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">	<span class="comment">#这样设置能够防盗链，不断地302重定向很多次，可能会加重服务器的负担，所以不建议这么做，除非有单独的图片服务器支持</span></span><br><span class="line">	<span class="comment">#如果有人非法盗链资源，则返回一张防盗链的图片</span></span><br><span class="line">  <span class="comment">#return 302 http://www.benet.com/img/nolink.jpg;</span></span><br><span class="line">  <span class="comment">#或者返回403错误代码</span></span><br><span class="line">  <span class="built_in">return</span> 404;</span><br><span class="line">  <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数可以使如下形式：</p>
<ul>
<li>none  ：意思是不存在的Referer头(表示空的，也就是直接访问，比如直接在浏览器打开一个图片)。</li>
<li>blocked  ：意为根据防火墙伪装Referer头，如：“Referer:XXXXXXX”。</li>
<li>server_names  ：为一个或多个服务器的列表，0.5.33版本以后可以在名称中使用“*”通配符。</li>
</ul>
<h2 id="进程数的优化">1.14. 进程数的优化</h2><p>一般一个进程足够了，你可以把连接数设得很大。（worker_processes: 1，worker_connections: 10,000）<br>如果有SSL、gzip这些比较消耗CPU的工作，而且是多核CPU的话，可以设为和CPU的数量一样。(worker_processes: CPU核心数)<br>或者要处理很多很多的小文件，而且文件总大小比内存大很多的时候，也可以把进程数增加，以充分利用IO带宽（主要似乎是IO操作有block）</p>
<p>worker_processes，工作进程数</p>
<ul>
<li>1.默认：worker_processes: 1</li>
<li>2.调大：worker_processes: CPU核心数，(双核4线程，可以设置为4)</li>
<li>3.auto：worker_processes:  auto</li>
</ul>
<p>也可以将其设置为auto。 这样nginx会自动根据核心数为生成对应数量的worker进程。</p>
<h2 id="连接数的优化">1.15. 连接数的优化</h2><p>linux 默认值 open files为1024。查看当前系统值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# ulimit -n</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>

<p>说明server只允许同时打开1024个文件。</p>
<p>使用ulimit -a 可以查看当前系统的所有限制值，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# ulimit -a</span><br><span class="line">core file size          (blocks, -c) unlimited</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 14982</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 1024</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 14982</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure>

<p>使用ulimit -n 可以查看当前的最大打开文件数。</p>
<p>新装的linux 默认只有1024 ，当作负载较大的服务器时，很容易遇到error: too many open files。因此，需要将其改大，在/etc/security/limits.conf最后增加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 永久生效</span><br><span class="line">[root@linux ~]# vim /etc/security/limits.conf </span><br><span class="line"></span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line">* soft noproc 65535</span><br><span class="line">* hard noproc 65535</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br><span class="line"></span><br><span class="line"># 临时生效</span><br><span class="line">[root@linux ~]# ulimit -Sn 2048 #修改softlimit</span><br><span class="line">[root@linux ~]# ulimit -Hn 2048 #修改hardlimit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>*代表针对所有用户,nproc是代表最大进程数,nofile 是代表最大文件打开数</p>
</blockquote>
<p>修改完成后重启即可</p>
<p>nginx中配置连接数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 65535;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























































]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx更换SSL证书</title>
    <url>/p/63588.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>申请SSL证书需要的CSR文件</p>
<blockquote>
<p><a href="https://www.chinassl.net/ssltools/generator-csr.html">https://www.chinassl.net/ssltools/generator-csr.html</a></p>
</blockquote>
<p>填写相关信息生成两个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*_csr.txt</span><br><span class="line">*_key.txt</span><br></pre></td></tr></table></figure>

<p>csr文件用来申请ssl证书，key文件用于nginx中使用</p>
<p>申请证书</p>
<blockquote>
<p><a href="https://cheapsslsecurity.com/">https://cheapsslsecurity.com/</a></p>
</blockquote>
<p>申请的证书目录如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DigiCertCA.crt</span><br><span class="line">My_CA_Bundle.crt</span><br><span class="line">star_aimmcloud_com.crt</span><br><span class="line">TrustedRoot.crt</span><br></pre></td></tr></table></figure>

<p>将domain_name.crt 和 DigCertCA.crt写入bundle.crt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat your_domain_name.crt DigiCertCA.crt &gt;&gt; bundle.crt</span><br></pre></td></tr></table></figure>

<p>此处应为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat star_aimmcloud_com.crt DigiCertCA.crt &gt;&gt; bundle.crt</span><br></pre></td></tr></table></figure>

<p>nginx的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen   443;</span><br><span class="line"></span><br><span class="line">ssl    on;</span><br><span class="line">ssl_certificate    /etc/ssl/your_domain_name.pem; (or bundle.crt)</span><br><span class="line">ssl_certificate_key    /etc/ssl/your_domain_name.key;</span><br><span class="line"></span><br><span class="line">server_name your.domain.com;</span><br><span class="line">access_log /var/log/nginx/nginx.vhost.access.log;</span><br><span class="line">error_log /var/log/nginx/nginx.vhost.error.log;</span><br><span class="line">location / &#123;</span><br><span class="line">root   /home/www/public_html/your.domain.com/public/;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Pipeline详解</title>
    <url>/p/33227.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SonarQube安装部署</title>
    <url>/p/12102.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="SonarQube安装部署">1. SonarQube安装部署</h1><p>SonarQube是一个用于管理代码质量的开放平台，可以快速的定位代码中潜在的或者明显的错误。目前<br>支持java,C#,C/C++,Python,PL/SQL,Cobol,JavaScrip,Groovy等二十几种编程语言的代码质量管理与检<br>测。<br>官网：<a href="https://www.sonarqube.org/">https://www.sonarqube.org/</a></p>
<h2 id="环境要求">1.1. 环境要求</h2><ul>
<li>jdk </li>
<li>maven </li>
<li>mysql 5.7</li>
</ul>
<p>下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip</span><br></pre></td></tr></table></figure>

<h2 id="安装mysql5-7">1.2. 安装mysql5.7</h2><p>下载并安装MySQL官方的 Yum Repository</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start  mysqld.service</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure>

<p>查看密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br><span class="line">pe9jD62)fQmb</span><br></pre></td></tr></table></figure>

<p>登陆修改密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Mysqldb@12&#x27;;</span><br></pre></td></tr></table></figure>



<h2 id="安装sonarqube">1.3. 安装sonarqube</h2><p>解压sonar，并设置权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y unzip</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip sonarqube-7.8.zip</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">mkdir /data/aimm/sonar -p</span><br><span class="line"></span><br><span class="line"># 移动文件</span><br><span class="line">mv sonarqube-7.8/* /data/aimm/sonar/</span><br><span class="line"></span><br><span class="line"># 创建sonar用户</span><br><span class="line">useradd sonar</span><br><span class="line"></span><br><span class="line"># 更改sonar目录权限</span><br><span class="line">chown -R sonar. /data/aimm/sonar/</span><br></pre></td></tr></table></figure>

<h2 id="配置">1.4. 配置</h2><p>修改sonar配置文件</p>
<p>vim /data/aimm/sonar/conf/sonar.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sonar.jdbc.username=root</span><br><span class="line">sonar.jdbc.password=Mysqldb@12</span><br><span class="line">sonar.jdbc.url=jdbc:mysql://192.168.1.221:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false</span><br></pre></td></tr></table></figure>

<p>sonar常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">su sonar /data/aimm/sonar/bin/linux-x86-64/sonar.sh start</span><br><span class="line"></span><br><span class="line"># 查看状态</span><br><span class="line">su sonar /data/aimm/sonar/bin/linux-x86-64/sonar.sh status </span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line">su sonar /data/aimm/sonar/bin/linux-x86-64/sonar.sh stop</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">tail -f /data/aimm/sonar/logs/sonar.logs</span><br></pre></td></tr></table></figure>

<p>访问sonar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.1.210:9000</span><br></pre></td></tr></table></figure>

<p>默认账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin/admin </span><br></pre></td></tr></table></figure>

<h2 id="配置开机启动">1.5. 配置开机启动</h2><p>编写开机启动脚本</p>
<p>vim /etc/systemd/system/sonarqube.service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=SonarQube service</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start</span><br><span class="line">ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop</span><br><span class="line">User=sonar</span><br><span class="line">Group=sonar</span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">LimitNPROC=10240</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>加入开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable sonarqube.service</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start sonarqube.service</span><br></pre></td></tr></table></figure>

<p><strong>报错解决</strong></p>
<p>报错信息如下</p>
<p>tail -f sonar/logs/sonar.log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--&gt; Wrapper Started as Daemon</span><br><span class="line">Launching a JVM...</span><br><span class="line">Unable to start JVM: No such file or directory (2)</span><br><span class="line">JVM exited while loading the application.</span><br><span class="line">JVM Restarts disabled.  Shutting down.</span><br><span class="line">&lt;-- Wrapper Stopped</span><br></pre></td></tr></table></figure>

<p>这是因为JVM参数没有配置</p>
<p>sonar/conf/wrapper.conf 中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wrapper.java.command=/usr/java/jdk-11.0.5+10/bin/java</span><br></pre></td></tr></table></figure>

<p>配置完成再次重启即可</p>
<h2 id="汉化">1.6. 汉化</h2><p>下载汉化包</p>
<p><a href="https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases">https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases</a></p>
<p>把jar包放在：/data/aimm/sonar/extensions/plugins</p>
<p>然后重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su sonar /data/aimm/sonar/bin/linux-x86-64/sonar.sh restart</span><br></pre></td></tr></table></figure>

<p>创建token</p>
<p>我的账号-安全-生成令牌</p>
<p>令牌名称：admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4de2152c178d7b6809791ffb0fbb187329a4c1b2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SonarQube</category>
      </categories>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>SaltStack安装及使用</title>
    <url>/p/59442.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="SaltStack安装及使用">1. SaltStack安装及使用</h1><blockquote>
<p>官网：<a href="https://saltproject.io/">https://saltproject.io/</a></p>
</blockquote>
<h2 id="什么是SaltStack-Master">1.1. 什么是SaltStack Master</h2><p><a href="https://www.saltstack.com/">SaltStack</a>或Salt是基于Python的开源软件，用于基于事件的IT自动化，远程任务执行和配置管理。SaltStack支持“基础架构即代码”方法来进行数据中心系统和网络的部署和管理，配置自动化，SecOps编排，漏洞修复以及混合云控制。（<strong>由</strong><a href="https://en.wikipedia.org/wiki/Salt_(software)"><strong>维基百科提供</strong></a>）</p>
<p><strong>SaltStack Master</strong>是服务器节点，它是控制所有Salstack Minions的中央服务器。Saltstack Master拥有SaltStack奴才的清单和公钥，并对这些奴才执行远程执行。</p>
<h2 id="SaltStack-Master上安装Python">1.2. SaltStack Master上安装Python</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y python3</span><br></pre></td></tr></table></figure>

<h2 id="安装SaltStack官方Yum存储库">1.3. 安装SaltStack官方Yum存储库</h2><blockquote>
<p><a href="https://repo.saltstack.com/#rhel">https://repo.saltstack.com/#rhel</a></p>
</blockquote>
<p>安装最新版本。更新将安装最新版本，即使它是一个新的主版本。</p>
<p>运行以下命令安装SaltStack存储库和密钥</p>
<p>centos7 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm --import https://repo.saltproject.io/py3/redhat/7/x86_64/latest/SALTSTACK-GPG-KEY.pub</span><br><span class="line">curl -fsSL https://repo.saltproject.io/py3/redhat/7/x86_64/latest.repo | sudo tee /etc/yum.repos.d/salt.repo</span><br></pre></td></tr></table></figure>

<p>centos8</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm --import https://repo.saltproject.io/py3/redhat/8/x86_64/latest/SALTSTACK-GPG-KEY.pub</span><br><span class="line">curl -fsSL https://repo.saltproject.io/py3/redhat/8/x86_64/latest.repo | sudo tee /etc/yum.repos.d/salt.repo</span><br></pre></td></tr></table></figure>

<p>接着运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum clean expire-cache</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装，配置 master</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api</span><br><span class="line">或者</span><br><span class="line">sudo yum install salt-master</span><br><span class="line">sudo yum install salt-minion</span><br><span class="line">sudo yum install salt-ssh</span><br><span class="line">sudo yum install salt-syndic</span><br><span class="line">sudo yum install salt-cloud</span><br><span class="line">sudo yum install salt-api</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装，配置 slave</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装salt-minion</span></span><br><span class="line">yum install -y salt-minion</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vim /etc/salt/minion</span><br><span class="line">master: 10.211.55.4 # master的地址</span><br><span class="line">	 或</span><br><span class="line">master:</span><br><span class="line">	  - 10.211.55.4</span><br><span class="line">	  - 10.211.55.5</span><br><span class="line">random_master: True</span><br><span class="line"></span><br><span class="line">id: slave_id # 客户端在salt-master中显示的唯一ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">service salt-minion start</span><br></pre></td></tr></table></figure>

<p>加入开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable --now salt-master </span><br><span class="line">systemctl enable --now salt-minion</span><br></pre></td></tr></table></figure>

<p>查看启动状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status  salt-master salt-minion</span><br></pre></td></tr></table></figure>

<p>服务端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4505 用于连接slave，发布订阅</span><br><span class="line">4506 接受响应，模式为zmq（消息队列）</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在master上授权</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">salt-key -L                # 查看已授权和未授权的slave</span><br><span class="line">salt-key -a  salve_id      # 接受指定id的salve</span><br><span class="line">salt-key -r  salve_id      # 拒绝指定id的salve</span><br><span class="line">salt-key -d  salve_id      # 删除指定id的salve</span><br></pre></td></tr></table></figure>

<h2 id="常用命令">1.4. 常用命令</h2><ul>
<li><strong>在master服务器上对slave进行远程操作</strong></li>
</ul>
<p>1.salt简单使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">salt &#x27;*&#x27; cmd.run &#x27;ifconfig&#x27; # 对所有slave操作用 &quot; * &quot;</span><br><span class="line">salt &#x27;slave_id&#x27; cmd.run &#x27;ifconfig&#x27;  # 对指定slave操作用 &quot;slave_id&quot;</span><br><span class="line"></span><br><span class="line">salt可以直接让minion执行模块命令，也可以直接执行shell命令</span><br><span class="line">1.salt -C ‘wy-pe1 and wy-pe2 or wy-peN’ test.ping        -C表示多参数(表示在测试多台主机的存活状态)</span><br><span class="line"><span class="meta">#</span><span class="bash"> salt <span class="string">&#x27;*&#x27;</span> disk.usage                            查看磁盘使用情况(使用内建模块查看所有minion端的磁盘使用情况)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">salt <span class="string">&#x27;*&#x27;</span> cmd.run <span class="string">&#x27;df -h&#x27;</span>                      使用cmd.run直接调用远程shell命令(功能同上)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> salt <span class="string">&#x27;*&#x27;</span> cmd.run <span class="string">&#x27;cat /root/lall&#x27;</span>              查看客户端主机的/root/lall文件</span></span><br></pre></td></tr></table></figure>

<p>2.nodegroup对minion进行分组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nodegroups:</span><br><span class="line">group1: ‘L@foo.domain.com,bar.domain.com,baz.domain.com or bl*.domain.com’</span><br><span class="line">group2: ‘G@os :Debian and foo.domain.com’</span><br><span class="line">group3:’wy-pe2′</span><br><span class="line">进行分组测试：</span><br><span class="line"><span class="meta">#</span><span class="bash"> salt -N group3 test.ping</span></span><br><span class="line">wy-pe2:</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>3.grains对minion基本信息的管理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">salt ‘wy-pe2′ grins.ls                                                            查看grains分类</span><br><span class="line">salt ‘wy-pe2′ grins.items                                                      查看minnon基本信息(硬件参数)</span><br></pre></td></tr></table></figure>

<p>4.pillar对敏感信息的管理，只有匹配到的节点才能获取和使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">默认pillar数据定义文件存储路径:/srv/pillar</span><br></pre></td></tr></table></figure>

<h2 id="debug排错">1.5. debug排错</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@pw-aimm-srv master]# salt-minion -l debug</span><br><span class="line">[DEBUG   ] Reading configuration from /etc/salt/minion</span><br><span class="line">[DEBUG   ] Including configuration from &#x27;/etc/salt/minion.d/_schedule.conf&#x27;</span><br><span class="line">[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf</span><br><span class="line">[DEBUG   ] Using cached minion ID from /etc/salt/minion_id: pw-aimm-srv</span><br><span class="line">[DEBUG   ] Using pkg_resources to load entry points</span><br><span class="line">[DEBUG   ] Override  __grains__: &lt;module &#x27;salt.loaded.int.log_handlers.sentry_mod&#x27; from &#x27;/usr/lib/python3.6/site-packages/salt/log/handlers/sentry_mod.py&#x27;&gt;</span><br><span class="line">[DEBUG   ] Configuration file path: /etc/salt/minion</span><br><span class="line">[WARNING ] Insecure logging configuration detected! Sensitive data may be logged.</span><br><span class="line">[INFO    ] Setting up the Salt Minion &quot;pw-aimm-srv&quot;</span><br><span class="line">[INFO    ] An instance is already running. Exiting the Salt Minion</span><br><span class="line">[INFO    ] Shutting down the Salt Minion</span><br><span class="line">[DEBUG   ] Stopping the multiprocessing logging queue listener</span><br><span class="line">[DEBUG   ] closing multiprocessing queue</span><br><span class="line">[DEBUG   ] joining multiprocessing queue thread</span><br><span class="line">[DEBUG   ] Stopped the multiprocessing logging queue listener</span><br><span class="line">The Salt Minion is shutdown.</span><br></pre></td></tr></table></figure>

<h2 id="Ubuntu-安装-saltstack">1.6. Ubuntu 安装 saltstack</h2><ul>
<li><strong>UBUNTU 20</strong></li>
</ul>
<p>运行以下命令以导入SaltStack存储库密钥，并创建/etc/apt/sources.list.d/salt.list：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Download key</span></span><br><span class="line">sudo curl -fsSL -o /usr/share/keyrings/salt-archive-keyring.gpg https://repo.saltproject.io/py3/ubuntu/20.04/amd64/latest/salt-archive-keyring.gpg</span><br><span class="line"><span class="meta">#</span><span class="bash"> Create apt sources list file</span></span><br><span class="line">echo &quot;deb [signed-by=/usr/share/keyrings/salt-archive-keyring.gpg] https://repo.saltproject.io/py3/ubuntu/20.04/amd64/latest focal main&quot; | sudo tee /etc/apt/sources.list.d/salt.list</span><br></pre></td></tr></table></figure>

<p>接着运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>1.安装配置master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api</span><br><span class="line">或者</span><br><span class="line">sudo apt-get install salt-master</span><br><span class="line">sudo apt-get install salt-minion</span><br><span class="line">sudo apt-get install salt-ssh</span><br><span class="line">sudo apt-get install salt-syndic</span><br><span class="line">sudo apt-get install salt-cloud</span><br><span class="line">sudo apt-get install salt-api</span><br></pre></td></tr></table></figure>

<p>2.安装配置slave</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装salt-minion</span></span><br><span class="line">sudo apt-get install -y salt-minion</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vim /etc/salt/minion</span><br><span class="line">master: 10.211.55.4 # master的地址</span><br><span class="line">	 或</span><br><span class="line">master:</span><br><span class="line">	  - 10.211.55.4</span><br><span class="line">	  - 10.211.55.5</span><br><span class="line">random_master: True</span><br><span class="line"></span><br><span class="line">id: slave_id # 客户端在salt-master中显示的唯一ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">sudo systemctl restart salt-minion</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>SaltStack</category>
      </categories>
      <tags>
        <tag>SaltStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset安装部署</title>
    <url>/p/42513.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="superset安装部署">1. superset安装部署</h1><p>Apache Superset 是一个现代数据探索和可视化平台，Superset 快速、轻量、直观，并加载了选项，使所有技能集的用户都可以轻松探索和可视化他们的数据，从简单的折线图到高度详细的地理空间图表。</p>
<h2 id="安装Python3、PIP和VirtualENV">1.1. 安装Python3、PIP和VirtualENV</h2><p><a href="http://superset.apache.org/installation.html#configuration">http://superset.apache.org/installation.html#configuration</a></p>
<p><a href="https://www.jianshu.com/p/e1553b2185ae">https://www.jianshu.com/p/e1553b2185ae</a></p>
<p>2.1 为安装python3环境准备所需的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y &quot;Development tools&quot;</span><br><span class="line">yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure>

<p>2.2 安装python3环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src #进入源码文件夹</span><br><span class="line">wget www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz #下载python文件</span><br><span class="line">tar xf Python-3.6.6.tgz #解压缩</span><br><span class="line">cd Python-3.6.6 #进入python 文件夹</span><br><span class="line">./configure #配置</span><br><span class="line">make &amp;&amp; make install #安装</span><br></pre></td></tr></table></figure>

<p>2.3 安装EPEL源并安装superset必备的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release #安装epel源</span><br><span class="line">yum install -y mysql-devel #安装MySQL开发包，属于pymysqlclient依赖</span><br><span class="line">yum install -y gcc gcc-c++ libffi-devel python-devel python-wheel openssl-devel libsasl2-devel openldap-devel #安装依赖包</span><br></pre></td></tr></table></figure>

<p>2.4 安装Screen</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装Screen</span><br><span class="line">yum install screen</span><br><span class="line"></span><br><span class="line">#指定会话</span><br><span class="line">screen -S superset</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>5安装python3的virtualenv并建立superset的env</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv #安装virtualenv</span><br><span class="line"><span class="meta">#</span><span class="bash">建立并进入虚拟环境</span></span><br><span class="line">mkdir /usr/local/virenv</span><br><span class="line">cd /usr/local/virenv</span><br><span class="line">python3 -m virtualenv superset #建立superset的venv</span><br><span class="line">source ./superset/bin/activate #激活superset的venv</span><br></pre></td></tr></table></figure>

<h2 id="3-安装Superset">1.2. 3. 安装Superset</h2><p>3.1 在env中安装supersetcd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip #升级pip</span><br><span class="line">pip3 install --upgrade setuptools pip #升级setuptools</span><br><span class="line">pip3 install apache-superset #安装superset</span><br></pre></td></tr></table></figure>

<p>3.2 安装superset数据库包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install mysqlclient #安装mysql连接包</span><br><span class="line">pip3 install pymssql #安装mssql连接包</span><br></pre></td></tr></table></figure>

<p>3.3 配置superset</p>
<p>vim superset/lib/python3.6/site-packages/superset/config.py</p>
<p>修改superset配置文件，将默认的sqlite3数据库改为MySQL找到:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = &#x27;sqlite:////path/to/superset.db&#x27;</span><br></pre></td></tr></table></figure>

<p>将其改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = ‘mysql://用户名:密码@IP地址/数据库名?charset=utf8’</span><br><span class="line">SQLALCHEMY_DATABASE_URI = &#x27;mysql://root:Mysql!234@192.168.1.221:3306/superset?charset=utf8&#x27;</span><br></pre></td></tr></table></figure>

<p>3.4 在MySQL中创建superset数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p #登录MySQL</span><br><span class="line">create database 数据库名； #建立superset数据库</span><br></pre></td></tr></table></figure>

<p>3.5 初始化superset</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">superset db upgrade</span><br><span class="line">export FLASK_APP=superset</span><br><span class="line">superset fab create-admin</span><br><span class="line">superset init #初始化superset数据库</span><br><span class="line">bin/superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger #运行superset</span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://superset.kubelet.cn</span><br><span class="line">账号：admin</span><br><span class="line">密码：Mysql!234</span><br></pre></td></tr></table></figure>

<p>进入虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source activate</span><br></pre></td></tr></table></figure>

<p>退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>进入screen</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -s superset</span><br><span class="line">source /usr/local/virenv/superset/bin/activate</span><br><span class="line">superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger</span><br></pre></td></tr></table></figure>

<h2 id="开机自启动">1.3. 开机自启动</h2><p><a href="http://gitlab.aimm.cn/imm/wiki/wikis/superset-start">http://gitlab.aimm.cn/imm/wiki/wikis/superset-start</a></p>
<p>启动脚本</p>
<p>vim /aimm/script/start.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">screen_name=&quot;superset&quot;</span><br><span class="line">screen -dmS $screen_name</span><br><span class="line">cmd=&quot;source /usr/local/virenv/superset/bin/activate;superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger&quot;;</span><br><span class="line">screen -x -S $screen_name -p 0 -X stuff &quot;$cmd&quot;</span><br><span class="line">screen -x -S $screen_name -p 0 -X stuff &#x27;\n&#x27;</span><br></pre></td></tr></table></figure>

<p>授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /aimm/script/start.sh</span><br></pre></td></tr></table></figure>

<p>加入开机启动</p>
<p>vim /etc/rc.local</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># screen</span><br><span class="line">sh /aimm/script/start.sh</span><br></pre></td></tr></table></figure>

<p>授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<h2 id="安装中的其它文档">1.4. 安装中的其它文档</h2><p><a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a> –trusted-host mirrors.aliyun.com</p>
<p>pip config set global.index-url <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>报错解决</p>
<p><a href="https://www.jianshu.com/p/d784d147e442">https://www.jianshu.com/p/d784d147e442</a></p>
<p>注：如安装慢可使用阿里云安装源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com/</span><br><span class="line"></span><br><span class="line">pip install flask-appbuilder -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com/</span><br></pre></td></tr></table></figure>

<p>如缺依赖，可用如下命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install wtforms_json flask_compress celery flask_migrate flask_talisman flask_caching sqlparse bleach markdown numpy pandas parsedatetime pathlib2 simplejson humanize geohash polyline geopy cryptography backoff msgpack pyarrow contextlib2 croniter retry selenium isodate</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/111295100">https://zhuanlan.zhihu.com/p/111295100</a></p>
<p><a href="https://www.cnblogs.com/wbl001/p/11147679.html">https://www.cnblogs.com/wbl001/p/11147679.html</a></p>
]]></content>
      <categories>
        <category>Superset</category>
      </categories>
      <tags>
        <tag>Superset</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8安装Zabbix5.4</title>
    <url>/p/65518.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="环境准备">1. 环境准备</h1><h2 id="基本信息">1.1. 基本信息</h2><p>系统：CentOS Linux release 8.2.2004 (Core)</p>
<p>CPU ：2核</p>
<p>内存 ：4G</p>
<p>磁盘 ：20G</p>
<p>Zabbix ：5.4</p>
<h2 id="关闭防火墙">1.2. 关闭防火墙</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="关闭SElinux">1.3. 关闭SElinux</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">#把SELNUX=enforcing换成</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h1 id="配置yum源">2. 配置yum源</h1><blockquote>
<p>zabbix官方网站：<a href="https://www.zabbix.com/">https://www.zabbix.com</a></p>
<p>zabbix官方镜像网站:<a href="https://repo.zabbix.com/">https://repo.zabbix.com</a></p>
<p>zabbix下载：<a href="https://www.zabbix.com/cn/download">https://www.zabbix.com/cn/download</a></p>
</blockquote>
<p>选择需要安装的版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131454531.png"></p>
<p>选择好版本后下载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://repo.zabbix.com/zabbix/5.4/rhel/8/x86_64/zabbix-release-5.4-1.el8.noarch.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh zabbix-release-5.4-1.el8.noarch.rpm</span><br><span class="line"></span><br><span class="line">dnf clean all</span><br></pre></td></tr></table></figure>

<h1 id="安装">3. 安装</h1><p>安装Zabbix server，Web前端，agent</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install -y zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-sql-scripts zabbix-agent</span><br></pre></td></tr></table></figure>

<p>查看安装后的包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@zabbix ~]# rpm -qa|grep zabbix</span><br><span class="line"></span><br><span class="line">zabbix-web-deps-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-agent-5.4.8-1.el8.x86_64</span><br><span class="line">zabbix-web-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-web-mysql-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-nginx-conf-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-sql-scripts-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-server-mysql-5.4.8-1.el8.x86_64</span><br><span class="line">zabbix-release-5.4-1.el8.noarch</span><br></pre></td></tr></table></figure>

<p>安装配置数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">dnf install -y mysql-server mysql-devel mysql-libs</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">#加入开机启动</span><br><span class="line">systemctl enable mysqld.service</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"># mysql -uroot -p</span><br><span class="line">password</span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@localhost identified by &#x27;password&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">mysql&gt; quit;</span><br><span class="line"></span><br><span class="line"># 导入</span><br><span class="line">zcat /usr/share/doc/zabbix-sql-scripts/mysql/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure>

<p>为zabbix server配置数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 连接数据库</span><br><span class="line">vim /etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line">DBPassword=password</span><br></pre></td></tr></table></figure>

<p>为zabbix前端配置PHP，取消注释并设置“listen”和“server_name”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/zabbix.conf</span><br><span class="line"> </span><br><span class="line">listen 80;</span><br><span class="line">server_name example.com;</span><br></pre></td></tr></table></figure>

<p>nginx配置文件内容</p>
<p>/etc/nginx/conf.d/zabbix.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen          80;</span><br><span class="line">        server_name     zabbix.example.com;</span><br><span class="line"></span><br><span class="line">        root    /usr/share/zabbix;</span><br><span class="line"></span><br><span class="line">        index   index.php;</span><br><span class="line"></span><br><span class="line">        location = /favicon.ico &#123;</span><br><span class="line">                log_not_found   off;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files       $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /assets &#123;</span><br><span class="line">                access_log      off;</span><br><span class="line">                expires         10d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">                deny            all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /(api\/|conf[^\.]|include|locale|vendor) &#123;</span><br><span class="line">                deny            all;</span><br><span class="line">                return          404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">                fastcgi_pass    unix:/run/php-fpm/zabbix.sock;</span><br><span class="line">                fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">                fastcgi_index   index.php;</span><br><span class="line"></span><br><span class="line">                fastcgi_param   DOCUMENT_ROOT   /usr/share/zabbix;</span><br><span class="line">                fastcgi_param   SCRIPT_FILENAME /usr/share/zabbix$fastcgi_script_name;</span><br><span class="line">                fastcgi_param   PATH_TRANSLATED /usr/share/zabbix$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">                include fastcgi_params;</span><br><span class="line">                fastcgi_param   QUERY_STRING    $query_string;</span><br><span class="line">                fastcgi_param   REQUEST_METHOD  $request_method;</span><br><span class="line">                fastcgi_param   CONTENT_TYPE    $content_type;</span><br><span class="line">                fastcgi_param   CONTENT_LENGTH  $content_length;</span><br><span class="line"></span><br><span class="line">                fastcgi_intercept_errors        on;</span><br><span class="line">                fastcgi_ignore_client_abort     off;</span><br><span class="line">                fastcgi_connect_timeout         60;</span><br><span class="line">                fastcgi_send_timeout            180;</span><br><span class="line">                fastcgi_read_timeout            180;</span><br><span class="line">                fastcgi_buffer_size             128k;</span><br><span class="line">                fastcgi_buffers                 4 256k;</span><br><span class="line">                fastcgi_busy_buffers_size       256k;</span><br><span class="line">                fastcgi_temp_file_write_size    256k;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="启动Zabbix-server和agent进程">4. 启动Zabbix server和agent进程</h1><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent nginx php-fpm</span><br><span class="line">systemctl enable zabbix-server zabbix-agent nginx php-fpm</span><br></pre></td></tr></table></figure>

<p>卸载zabbix</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停止</span><br><span class="line">systemctl stop zabbix-server zabbix-agent nginx php-fpm</span><br><span class="line"></span><br><span class="line"># 查看安装的zabbix</span><br><span class="line">[root@zabbix ~]# rpm -qa|grep zabbix</span><br><span class="line">zabbix-web-deps-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-agent-5.4.8-1.el8.x86_64</span><br><span class="line">zabbix-web-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-web-mysql-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-nginx-conf-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-sql-scripts-5.4.8-1.el8.noarch</span><br><span class="line">zabbix-server-mysql-5.4.8-1.el8.x86_64</span><br><span class="line">zabbix-release-5.4-1.el8.noarch</span><br><span class="line"></span><br><span class="line"># 使用yum remove卸载</span><br><span class="line">yum remove zabbix-web-deps-5.4.8-1.el8.noarch zabbix-agent-5.4.8-1.el8.x86_64 zabbix-web-5.4.8-1.el8.noarch zabbix-web-mysql-5.4.8-1.el8.noarch zabbix-nginx-conf-5.4.8-1.el8.noarch zabbix-sql-scripts-5.4.8-1.el8.noarch zabbix-server-mysql-5.4.8-1.el8.x86_64 zabbix-release-5.4-1.el8.noarch</span><br><span class="line"></span><br><span class="line"># 这里也可以使用rpm -e或者rpm -e --nodeps来卸载</span><br><span class="line"># 普通删除</span><br><span class="line">rpm -e zabbix-(根据实际包名删除)</span><br><span class="line"></span><br><span class="line"># 强力删除，如果上面命令删除不了</span><br><span class="line"> rpm -e --nodeps zabbix-(根据实际包名删除)</span><br><span class="line"> </span><br><span class="line"># 查找zabbix目录删除</span><br><span class="line">find / -name zabbix</span><br></pre></td></tr></table></figure>

<p>配置前端</p>
<blockquote>
<p>官方文档：<a href="https://www.zabbix.com/documentation/current/manual/installation/frontend">https://www.zabbix.com/documentation/current/manual/installation/frontend</a></p>
</blockquote>
<p>浏览器访问：<a href="http://ip/">http://ip/</a> 或者 http://域名/</p>
<p>成功访问后可以看到如下页面，这里修改默认语言为中文</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131614299.png"></p>
<p>检查先决条件，确保满足所有软件先决条件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131616560.png"></p>
<p>配置数据库连接：</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131617622.png"></p>
<p>输入zabbix服务器信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131621540.png"></p>
<p>设置前端默认时区和主题：</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131624546.png"></p>
<p>最后两项直接通过就行</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131626677.png"></p>
<p>登录：</p>
<blockquote>
<p>用户名：Admin</p>
<p>密码：zabbix</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131630634.png"></p>
<h1 id="配置中文界面">5. 配置中文界面</h1><h2 id="手动安装中文语言包">5.1. 手动安装中文语言包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install langpacks-zh_CN.noarch</span><br></pre></td></tr></table></figure>

<p>安装glibc-common实现对语言包的识别:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install glibc-common</span><br></pre></td></tr></table></figure>

<p>如果已安装过，需要重新安装，用reinstall</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf reinstall glibc-common</span><br></pre></td></tr></table></figure>

<p>检测是否安装成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locale -a | grep zh_CN</span><br></pre></td></tr></table></figure>

<h2 id="解决中文乱码">5.2. 解决中文乱码</h2><p>zabbix默认的字体文件不支持中文，所以中文字符的显示成了乱码；</p>
<p>在windows的C:\Windows\Fonts目录下复制想要的字体(.ttf)到服务器的/usr/share/zabbix/assets/fonts目录下，注意大写的字体名要改为小写的，</p>
<p>修改配置文件：</p>
<p> vim /usr/share/zabbix/include/defines.inc.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(&#x27;ZBX_GRAPH_FONT_NAME&#x27;,           &#x27;graphfont&#x27;);</span><br><span class="line"></span><br><span class="line">修改为</span><br><span class="line"></span><br><span class="line">define(&#x27;ZBX_GRAPH_FONT_NAME&#x27;,           &#x27;这里写你的字体名称&#x27;);</span><br></pre></td></tr></table></figure>

<p>把graphfont更改为你的字体名称即可，位置在78行。</p>
<h1 id="安装zabbix-agent">6. 安装zabbix agent</h1><p>agent为centos8系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/5.4/rhel/8/x86_64/zabbix-release-5.4-1.el8.noarch.rpm</span><br><span class="line">dnf clean all</span><br><span class="line">dnf install -y zabbix-agent	</span><br></pre></td></tr></table></figure>

<p>agent为centos7系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/5.4/rhel/7/x86_64/zabbix-release-5.4-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br><span class="line">yum install -y zabbix-agent</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<p>vim /etc/zabbix/zabbix_agentd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server=127.0.0.1</span><br><span class="line">ServerActive=127.0.0.1</span><br><span class="line">Hostname=Zabbix server</span><br><span class="line"></span><br><span class="line">修改为</span><br><span class="line"></span><br><span class="line">Server=&lt;zbx-server的ip&gt;</span><br><span class="line">ServerActive=&lt;zbx-server的ip&gt;</span><br><span class="line">Hostname=&lt;本机的名字&gt;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-agent</span><br><span class="line">systemctl enable zabbix-agent</span><br></pre></td></tr></table></figure>

<p>启动之后到zabbix server界面创建主机</p>
<p>配置 - 主机 - 创建主机</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131735506.png"></p>
<p>填写主机信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131758873.png"></p>
<p>模板这里选择Templates/Operating systems - Linux by Zabbix agent</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131801530.png"></p>
<p>添加完成后过一会儿即可看到主机可用性中“ZBX”变成绿色，表示与客户端zabbix agent 连接正常，可以获取到agent数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/zabbix/202112131805341.png"></p>
<h1 id="监控MySQL8-0">7. 监控MySQL8.0</h1><p>前提在MySQL服务器上安装好zabbix agent</p>
<p>在MySQL服务器上拷贝Zabbix监控MySQL的模板文件并授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/share/doc/zabbix-agent-5.4.8/userparameter_mysql.conf /etc/zabbix/zabbix_agentd.d/</span><br><span class="line">chown -R zabbix:zabbix /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf</span><br></pre></td></tr></table></figure>

<p>模板文件内容</p>
<p>cat /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#template_db_mysql.conf created by Zabbix for &quot;Template DB MySQL&quot; and Zabbix 4.2</span><br><span class="line">#For OS Linux: You need create .my.cnf in zabbix-agent home directory (/var/lib/zabbix by default) </span><br><span class="line">#For OS Windows: You need add PATH to mysql and mysqladmin and create my.cnf in %WINDIR%\my.cnf,C:\my.cnf,BASEDIR\my.cnf https://dev.mysql.com/doc/refman/5.7/en/option-files.html</span><br><span class="line">#The file must have three strings:</span><br><span class="line">#[client]</span><br><span class="line">#user=zbx_monitor</span><br><span class="line">#password=&lt;password&gt;</span><br><span class="line">#</span><br><span class="line">UserParameter=mysql.ping[*], mysqladmin -h&quot;$1&quot; -P&quot;$2&quot; ping</span><br><span class="line">UserParameter=mysql.get_status_variables[*], mysql -h&quot;$1&quot; -P&quot;$2&quot; -sNX -e &quot;show global status&quot;</span><br><span class="line">UserParameter=mysql.version[*], mysqladmin -s -h&quot;$1&quot; -P&quot;$2&quot; version</span><br><span class="line">UserParameter=mysql.db.discovery[*], mysql -h&quot;$1&quot; -P&quot;$2&quot; -sN -e &quot;show databases&quot;</span><br><span class="line">UserParameter=mysql.dbsize[*], mysql -h&quot;$1&quot; -P&quot;$2&quot; -sN -e &quot;SELECT SUM(DATA_LENGTH + INDEX_LENGTH) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=&#x27;$3&#x27;&quot;</span><br><span class="line">UserParameter=mysql.replication.discovery[*], mysql -h&quot;$1&quot; -P&quot;$2&quot; -sNX -e &quot;show slave status&quot;</span><br><span class="line">UserParameter=mysql.slave_status[*], mysql -h&quot;$1&quot; -P&quot;$2&quot; -sNX -e &quot;show slave status&quot;</span><br></pre></td></tr></table></figure>

<p>由配置文件可以知道，在Linux系统中需要在zabbix-agent home目录中创建.my.cnf(默认情况下为/var/lib/zabbix)，并且文件必须以下有三个字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">user=zbx_monitor</span><br><span class="line">password=&lt;password&gt;</span><br></pre></td></tr></table></figure>

<p>创建监控需要的用户并赋权:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p&#x27;password&#x27;</span><br><span class="line"></span><br><span class="line"># 创建监控需要的用户并赋权</span><br><span class="line">create user zabbix@&#x27;%&#x27; identified by &#x27;&#x27;;</span><br><span class="line">grant all privileges on . to zabbixr@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"># 修改mysql密码加密方式为mysql_native_password</span><br><span class="line">alter user zabbix@&#x27;%&#x27; identified with mysql_native_password by &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>在/var/lib/zabbix目录下创建 <code>.my.cnf</code> 文件</p>
<p>mkdir /var/lib/zabbix</p>
<p>vim /var/lib/zabbix/.my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">user=&#x27;zabbix&#x27;</span><br><span class="line">password=&#x27;password&#x27; #password为其密码</span><br></pre></td></tr></table></figure>

<p>重启zabbix agent服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure>

<p>在zabbix的web界面中添加 Template DB MySQL.</p>
]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>安装docker和docker-compose</title>
    <url>/p/35698.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="安装docker和docker-compose">1. 安装docker和docker-compose</h1><h2 id="安装Docker">1.1. 安装Docker</h2><blockquote>
<p>下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz">https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz</a> </p>
</blockquote>
<p>以下在所有节点操作。这里采用二进制安装，用yum安装也一样。 </p>
<p> 解压二进制包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz </span><br><span class="line">tar zxvf docker-19.03.9.tgz</span><br><span class="line">mv docker/* /usr/bin</span><br></pre></td></tr></table></figure>

<p>systemd管理docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li>registry-mirrors 阿里云镜像加速器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/docker</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://ms80kkz7.mirror.aliyuncs.com&quot;],</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li>启动并设置开机启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="安装docker-compose">1.2. 安装docker-compose</h2><blockquote>
<p>官网地址参考地址：<a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></p>
</blockquote>
<h3 id="在线安装（不推荐）">1.2.1. 在线安装（不推荐）</h3><p>运行以下命令以下载Docker Compose的当前稳定版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要安装其他版本的Compose，请用您要使用的Compose版本替换1.27.4。 </p>
</blockquote>
<p>授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果命令docker-compose在安装后失败，请检查路径。您也可以创建指向/ usr / bin或路径中任何其他目录的符号链接。 </p>
</blockquote>
<p>软链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>测试安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.27.4, build 1110ad01</span><br></pre></td></tr></table></figure>

<h3 id="离线安装（推荐）">1.2.2. 离线安装（推荐）</h3><p>在 <a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a> 中下载对应的版本，这里选择的是 <a href="https://github.com/docker/compose/releases/tag/1.23.2">1.27.4</a> 的 <a href="https://github.com/docker/compose/releases/download/1.27.4/docker-compose-Linux-x86_64"><strong>docker-compose-Linux-x86_64</strong></a></p>
<p>我们已经提前下载并存放在了 /home/download/docker-compose_1.27.4/ 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ls /home/download/docker-compose_1.27.4/</span></span><br><span class="line">docker-compose-Linux-x86_64</span><br></pre></td></tr></table></figure>

<p>移动到bin目录并更改执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /home/download/docker-compose_1.27.4/docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>添加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>验证下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version 1.27.4, build 40524192</span><br><span class="line">docker-py version: 4.3.1</span><br><span class="line">CPython version: 3.7.7</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器</tag>
        <tag>Docker Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>修改docker数据目录位置</title>
    <url>/p/23817.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="修改docker数据目录位置">1. 修改docker数据目录位置</h1><blockquote>
<p><a href="http://www.manongjc.com/article/35399.html">http://www.manongjc.com/article/35399.html</a></p>
</blockquote>
<p>查看当前目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br><span class="line"># 当前数据目录</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br></pre></td></tr></table></figure>

<p>停止docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker.service</span><br></pre></td></tr></table></figure>

<p>将当前Docker存储目录复制到/data目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -R /var/lib/docker/ /data</span><br></pre></td></tr></table></figure>

<p>修改docker.service配置文件，在EXECStart的后面增加 –graph=/data/docker(修改后的docker存储路径)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@T ~]# vim /usr/lib/systemd/system/docker.service</span><br><span class="line">......</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph=/data/docker</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>执行下列命令然后重启docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl disable docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure>

<p>docker info 检验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker Root Dir: /data/docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>设置非root用户没有权限运行docker命令</title>
    <url>/p/40168.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="设置非root用户没有权限运行docker命令">1. 设置非root用户没有权限运行docker命令</h1><blockquote>
<p><a href="https://blog.csdn.net/icodestechnology/article/details/97170540">https://blog.csdn.net/icodestechnology/article/details/97170540</a></p>
</blockquote>
<p><strong>方法1：</strong><br>使用sudo获取管理员权限，运行docker命令，这个方法在通过脚本执行docker命令的时候会有很多局限性</p>
<p><strong>方法2：</strong><br>docker守护进程启动的时候，会默认赋予名为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker     #添加docker用户组</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署nacos</title>
    <url>/p/43577.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="docker部署nacos">1. docker部署nacos</h1><h2 id="部署">1.1. 部署</h2><p>拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name nacos -p 8848:8848 -e PREFER_HOST_MODE=hostname -e MODE=standalone nacos/nacos-server</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件">1.2. 修改配置文件</h2><p>查看容器ID及容器名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ec2-user@ip-172-16-20-10 ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS                 PORTS                       NAMES</span><br><span class="line">002f5f3d14fe        nacos/nacos-server                   &quot;bin/docker-startup.…&quot;   12 minutes ago      Up 4 minutes           0.0.0.0:8848-&gt;8848/tcp      nacos</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it nacos bash</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<p>vim conf/application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># spring</span><br><span class="line">server.contextPath=/nacos</span><br><span class="line">server.servlet.contextPath=/nacos</span><br><span class="line">server.port=8848</span><br><span class="line">management.metrics.export.elastic.enabled=false</span><br><span class="line">management.metrics.export.influx.enabled=false</span><br><span class="line">server.tomcat.accesslog.enabled=true</span><br><span class="line">server.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i</span><br><span class="line">server.tomcat.basedir=</span><br><span class="line">nacos.security.ignore.urls=/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://mysql:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><br><span class="line">db.user=root</span><br><span class="line">db.password=nacos@1234</span><br></pre></td></tr></table></figure>

<p>新建数据库，导入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库名称：nacos</span><br><span class="line">SQL文件地址：https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql</span><br></pre></td></tr></table></figure>

<p>退出容器然后重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@002f5f3d14fe nacos]# exit</span><br><span class="line">exit</span><br><span class="line">[ec2-user@ip-172-16-20-10 ~]$ docker restart nacos</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器化搭建OpenLDAP</title>
    <url>/p/39881.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="docker-容器化搭建-OpenLDAP">1. docker 容器化搭建 OpenLDAP</h1><h2 id="准备工作">1.1. 准备工作</h2><p>（1）需要在本地虚拟机或者服务器中安装docker。<br>（2）在运行之前我们首先需要将openLDAP的docker镜像拉取到本地。使用命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull osixia/openldap</span><br></pre></td></tr></table></figure>

<p>此时拉取到的镜像就是最新版本的，如果要拉取指定版本的，则在上条命令中加入对应tag即可，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull osixia/openldap:1.3.0</span><br></pre></td></tr></table></figure>

<p>（3）还需要一个可视化的ldap管理工具，我使用的是phpldapadmin。同样使用docker pull命令拉取对应镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull osixia/phpldapadmin</span><br></pre></td></tr></table></figure>

<h2 id="运行openLDAP">1.2. 运行openLDAP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 389:389 -p 636:636 \</span><br><span class="line">    --name openldap-server \</span><br><span class="line">    --env LDAP_TLS_VERIFY_CLIENT=&quot;never&quot; \</span><br><span class="line">    --env LDAP_ORGANISATION=&quot;example&quot; \</span><br><span class="line">    --env LDAP_DOMAIN=&quot;example.com&quot; \</span><br><span class="line">    --env LDAP_ADMIN_PASSWORD=&quot;Pass1234cn&quot; \</span><br><span class="line">    -v /data/ldap/data:/var/lib/ldap \</span><br><span class="line">    -v /data/ldap/conf:/etc/ldap/slapd.d \</span><br><span class="line">    --detach osixia/openldap:1.3.0</span><br></pre></td></tr></table></figure>

<p>参数如下：</p>
<ul>
<li> -p 389:389 \ TCP/IP访问端口，-p 636:636 \ SSL连接端口。</li>
<li> –name your_ldap 容器名称为your_ldap</li>
<li> –hostname openldap-host 设置容器主机名称为 openldap-host</li>
<li> –env LDAP_ORGANISATION=“example” 配置LDAP组织名称</li>
<li> –env LDAP_DOMAIN=“example.com” 配置LDAP域名</li>
<li> –env LDAP_ADMIN_PASSWORD=“youedata520” 配置LDAP密码</li>
<li> -v /data/ldap/data:/var/lib/ldap 配置数据映射到本地</li>
<li> -v /data/ldap/conf:/etc/ldap/slapd.d 配置文件映射到本地</li>
<li> 默认登录用户名：admin</li>
</ul>
<h2 id="运行phpldapadmin">1.3. 运行phpldapadmin</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    --name openldap-admin \</span><br><span class="line">    --env PHPLDAPADMIN_HTTPS=false \</span><br><span class="line">    --env PHPLDAPADMIN_LDAP_HOSTS=192.168.101.196 \</span><br><span class="line">    --detach \</span><br><span class="line">    osixia/phpldapadmin</span><br></pre></td></tr></table></figure>

<p>参数如下：</p>
<ul>
<li>-d 分离模式启动容器</li>
<li>–privileged 特权模式启动(使用该参数，container内的root拥有真正的root权限。</li>
<li>否则，container内的root只是外部的一个普通用户权限。)</li>
<li>–env PHPLDAPADMIN_HTTPS=false 禁用HTTPS</li>
<li>–env PHPLDAPADMIN_LDAP_HOSTS =192.168.101.196 配置openLDAP的IP或者域名，我的openLDAP是在本地192.168.101.196启动。</li>
</ul>
<h2 id="登录">1.4. 登录</h2><blockquote>
<p>用户名：cn=admin,dc=example,dc=com</p>
<p>密码：Pass1234cn</p>
</blockquote>
<p>在运行成功后访问phpldapadmin，地址为：192.168.101.196，如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap202110081453830.png" alt="ldap"></p>
<p>点击登录，用户名为cn=admin,dc=example,dc=com 密码：Pass1234cn</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap202110081457264.png" alt="ldap"></p>
<h2 id="在界面新建组与用户">1.5. 在界面新建组与用户</h2><p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap202110081501662.png" alt="ldap"></p>
<p>先创建一个组织单元，我这里创建研发部</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap202110081507703.png" alt="ldap"></p>
<p>这里点击Commit即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap202110081508021.png" alt="ldap"></p>
<p>创建成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081512638.png" alt="ldap"></p>
<p>然后在该部门中创建组，或者不在细分的话也可直接创建用户。为了演示我就都先创建组然后创建用户。<br>同样点击刚创建好的RD部的条目，点击create a child entry，选择Posix Group，创建一个开发组。</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081515452.png"></p>
<p>点击Commit即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081516186.png"></p>
<p>创建成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081519761.png"></p>
<p>在新建的组下添加用户，选中developmnt条目，创建子条目，选择User Account或Account，推荐使用User Account，因为User Account中包含了Account，还增加了更多的属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081535545.png"></p>
<p>点击Commit</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081536505.png"></p>
<p>创建完成</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081537859.png"></p>
<p>此时该用户的dn为cn=zhang san,cn=development,ou=RD,dc=example,dc=com，如果想使用uid来识别用户可以在界面中rename修改用户的dn。</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081539680.png"></p>
<p>修改成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081542120.png"></p>
<h2 id="在界面使用LDIF-文件进行组与用户的创建">1.6. 在界面使用LDIF 文件进行组与用户的创建</h2><p>选择import</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081547984.png"></p>
<p>在界面选择import，可直接输入LDIF文件内容，也可导入对应的LDIF文件，如创建一个RD部门下的devops组。</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081551336.png"></p>
<p>文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dn: cn=devops,ou=RD,dc=example,dc=com</span><br><span class="line">cn: devops</span><br><span class="line">gidnumber: 501</span><br><span class="line">objectclass: posixGroup</span><br><span class="line">objectclass: top</span><br></pre></td></tr></table></figure>

<p>创建成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081554758.png"></p>
<p>在devops组下创建一个uid=lisi的人员</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081609892.png"></p>
<p>文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dn: uid=lisi,cn=devops,ou=RD,dc=example,dc=com</span><br><span class="line">cn: lisi</span><br><span class="line">gidnumber: 500</span><br><span class="line">givenname: li</span><br><span class="line">homedirectory: /home/user/lisi</span><br><span class="line">objectclass: inerOrgPerson</span><br><span class="line">objectclass: posixAccount</span><br><span class="line">objectclass: top</span><br><span class="line">sn: si</span><br><span class="line">uid: lisi</span><br><span class="line">uidnumber: 1001</span><br><span class="line">userpassword: 123456</span><br></pre></td></tr></table></figure>

<p>创建成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081612487.png"></p>
<p>LDIF文件可以从相似的条目中导出，然后稍作修改后进行创建。如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081614249.png"></p>
<p>导出</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081615747.png"></p>
<p>可以将下面的内容复制修改后在import即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/ldap/202110081617092.png"></p>
]]></content>
      <categories>
        <category>LDAP</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LDAP</tag>
        <tag>OpenLDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>docker清除不用的镜像容器等</title>
    <url>/p/14936.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<blockquote>
<p><a href="https://docs.docker.com/engine/admin/pruning/">https://docs.docker.com/engine/admin/pruning/</a></p>
</blockquote>
<p>对于不再使用的对象如镜像、容器、volumes以及网络 Docker采取的是被动清理(类比垃圾回收)机制：除非使用docker提供的命令手动进行清理，否则它们一般是不会被清除掉。这些没有使用的对象当然会占用额外宝贵的空间资源。Docker为不同的对象提供了各自的对象清理命令prune；另外还提供了docker system prune命令可一次性清理多个未使用对象。今天要讨论的就是这些关于对象清理的命令：prune。</p>
<h1 id="Prune-Images">1. Prune Images</h1><blockquote>
<p><a href="https://docs.docker.com/engine/reference/commandline/image_prune/#filtering">https://docs.docker.com/engine/reference/commandline/image_prune/#filtering</a></p>
</blockquote>
<p>删除15天以前的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image prune -a --filter <span class="string">&quot;until=<span class="subst">$(date +&#x27;%Y-%m-%dT%H:%M:%S&#x27; --date=&#x27;-15 days&#x27;)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>删除超过24小时的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image prune -a --filter <span class="string">&quot;until=24h&quot;</span></span><br></pre></td></tr></table></figure>

<p>清除所有没有容器引用的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure>

<h1 id="Prune-containers">2. Prune containers</h1><blockquote>
<p><a href="https://docs.docker.com/engine/reference/commandline/container_prune/">https://docs.docker.com/engine/reference/commandline/container_prune/</a></p>
</blockquote>
<p>如果容器启动时没有指定–rm选项，容器停止时是不能够自动清除的。有时候我们敲下docker ps -a命令会惊奇的发现，天哪，居然有这么多容器，有运行着的也有停止了的。它们是哪里来的？它们到底还有没有人在关注？这种情况在一个开发环境上尤其常见。要知道，即使容器已经停掉了也会占用空间资源。好吧，让我们用 docker container prune命令来结束这些一团糟的东西吧：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<p>和镜像清理的情况一样，也会有提示信息告诉你是否继续，默认是yes；如果提示信息烦到了你的话就加上 -f 或者 –force标志强制清除就可以了。</p>
<p>默认情况下 docker container prune命令会清理掉所有处于 stopped状态的容器；如果不想那么残忍统统都删掉，也可以使用 –filter标志来筛选出不希望被清理掉的容器。下面是一个筛选的例子，清除掉所有停掉的容器，但24内创建的除外：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container prune --filter <span class="string">&quot;until=24h&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="prune-volumes">3. prune volumes</h1><blockquote>
<p><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">https://docs.docker.com/engine/reference/commandline/volume_prune/</a></p>
</blockquote>
<p> Volumes可被一个或多个容器使用会消耗host端的空间，但它不会自动清理，因为那样就有可能破坏掉有用的数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume prune</span><br><span class="line"> </span><br><span class="line">WARNING! This will remove all volumes not used by at least one container.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure>

<p>和conatiner一样，手动清理Volume时会有提示信息，增加 -f 或 –force标志可以跳过提示信息直接清理。使用过滤参数 –filter来筛选出不希望清理的无用Volume，否则默认会将所有没有使用的volumes都清理掉。下面的例子演示了除 lable=keep外的volume外都清理掉(没有引用的volume)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume prune --filter <span class="string">&quot;label!=keep&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="prune-networks">4. prune networks</h1><blockquote>
<p><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">https://docs.docker.com/engine/reference/commandline/network_prune/</a></p>
</blockquote>
<p>虽然Docker networks占用的空间不多，但是它会创建iptable 规则、虚拟网桥设备以及路由表项，有洁癖的你看到这么多”僵尸”对象会不会抓狂？当然，我们还是要用清理神器：docker network prune 来清理没有再被任何容器引用的networks：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network prune</span><br><span class="line"> </span><br><span class="line">WARNING! This will remove all networks not used by at least one container.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure>

<p>可以通过 -f 或者 –force标志跳过提示信息来强制执行该命令。默认情况会清除所有没有再被引用的networks，如果想要过滤一些特定的networks，可以使用 –filter来实现。下面这个例子就是通过–filter来清理没有被引用的、创建超过24小时的networks：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network prune --filter <span class="string">&quot;until=24h&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="prune-everything">5. prune everything</h1><p> 如题，这里要讲的就是清理everything：images ，containers，networks一次性清理操作可以通过docker system prune来搞定。在Docker 17.06.0 以及更早的版本中，这个docker system prune也会将volume一起清理掉；在Docker 17.06.1以及后期的版本中则必须要手动指定–volumes标志才能够清理掉volumes：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker system prune</span><br><span class="line"> </span><br><span class="line">WARNING! This will remove:</span><br><span class="line">        - all stopped containers</span><br><span class="line">        - all networks not used by at least one container</span><br><span class="line">        - all dangling images</span><br><span class="line">        - all build cache</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure>

<p> 在Docker 17.06.1或更高版本中添加 –volumes标志的情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker system prune --volumes</span><br><span class="line"> </span><br><span class="line">WARNING! This will remove:</span><br><span class="line">        - all stopped containers</span><br><span class="line">        - all networks not used by at least one container</span><br><span class="line">        - all volumes not used by at least one container</span><br><span class="line">        - all dangling images</span><br><span class="line">        - all build cache</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器</tag>
        <tag>Docker Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>LVM创建及管理</title>
    <url>/p/29253.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="LVM创建及管理">1. LVM创建及管理</h1><p>安装lvm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y lvm</span><br></pre></td></tr></table></figure>

<p>查看磁盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x000beec6</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/vda2         2099200    20971519     9436160   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 53.7 GB, 53687091200 bytes, 104857600 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-root: 8585 MB, 8585740288 bytes, 16769024 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-swap: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# fdisk /dev/vdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0xda419f51.</span><br><span class="line"></span><br><span class="line">Command (m for help): o</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x01d037f1.</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): </span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-104857599, default 2048): </span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-104857599, default 104857599): </span><br><span class="line">Using default value 104857599</span><br><span class="line">Partition 1 of type Linux and of size 50 GiB is set</span><br><span class="line">Command (m for help): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (type L to list all codes): 8e</span><br><span class="line">Changed type of partition &#x27;Linux&#x27; to &#x27;Linux LVM&#x27;</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

<p>将磁盘添加到LVM PV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# pvcreate /dev/vdb1</span><br><span class="line">  Physical volume &quot;/dev/vdb1&quot; successfully created.</span><br></pre></td></tr></table></figure>

<p>列出所有PV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# pvscan</span><br><span class="line">  PV /dev/vda2   VG centos          lvm2 [&lt;9.00 GiB / 0    free]</span><br><span class="line">  PV /dev/vdb1                      lvm2 [&lt;50.00 GiB]</span><br><span class="line">  Total: 2 [&lt;59.00 GiB] / in use: 1 [&lt;9.00 GiB] / in no VG: 1 [&lt;50.00 GiB]</span><br></pre></td></tr></table></figure>

<p>显示pv更多信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# pvdisplay /dev/vdb1</span><br><span class="line">  &quot;/dev/vdb1&quot; is a new physical volume of &quot;&lt;50.00 GiB&quot;</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/vdb1</span><br><span class="line">  VG Name               </span><br><span class="line">  PV Size               &lt;50.00 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0   </span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               4kmSEn-kBZG-vMJc-T03x-aWfO-dEes-5prCUL</span><br></pre></td></tr></table></figure>

<p>创建卷组：使用尽可能多的PV来创建VG</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# vgcreate share /dev/vdb1</span><br><span class="line">  Volume group &quot;share&quot; successfully created</span><br></pre></td></tr></table></figure>

<p>列出所有VG</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# vgscan</span><br><span class="line">  Reading volume groups from cache.</span><br><span class="line">  Found volume group &quot;share&quot; using metadata type lvm2</span><br><span class="line">  Found volume group &quot;centos&quot; using metadata type lvm2</span><br></pre></td></tr></table></figure>

<p>显示vg更多信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# vgdisplay share</span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               share</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  1</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                0</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               &lt;50.00 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              12799</span><br><span class="line">  Alloc PE / Size       0 / 0   </span><br><span class="line">  Free  PE / Size       12799 / &lt;50.00 GiB</span><br><span class="line">  VG UUID               t9gVEp-02O6-IK40-oNxs-fdFC-nuA3-Y5NgNU</span><br></pre></td></tr></table></figure>

<p>创建逻辑卷：使用VG创建任意数量的LV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# lvcreate --size 49G --name vg_data share</span><br><span class="line">  Logical volume &quot;vg_data&quot; created.</span><br></pre></td></tr></table></figure>

<p>列出所有LV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# lvscan</span><br><span class="line">  ACTIVE            &#x27;/dev/share/vg_data&#x27; [49.00 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/centos/swap&#x27; [1.00 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/centos/root&#x27; [&lt;8.00 GiB] inherit</span><br></pre></td></tr></table></figure>

<p>格式化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# mkfs.ext4 /dev/share/vg_data</span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS type: Linux</span><br><span class="line">Block size=4096 (log=2)</span><br><span class="line">Fragment size=4096 (log=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">3211264 inodes, 12845056 blocks</span><br><span class="line">642252 blocks (5.00%) reserved for the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=2162163712</span><br><span class="line">392 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">	4096000, 7962624, 11239424</span><br><span class="line"></span><br><span class="line">Allocating group tables: done                            </span><br><span class="line">Writing inode tables: done                            </span><br><span class="line">Creating journal (32768 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done   </span><br></pre></td></tr></table></figure>

<p>创建需要挂载到的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# mkdir -p /data</span><br></pre></td></tr></table></figure>

<p>挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# mount /dev/mapper/share-vg_data /data</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# df -h</span><br><span class="line">Filesystem                 Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                   5.7G     0  5.7G   0% /dev</span><br><span class="line">tmpfs                      5.7G     0  5.7G   0% /dev/shm</span><br><span class="line">tmpfs                      5.7G  8.6M  5.7G   1% /run</span><br><span class="line">tmpfs                      5.7G     0  5.7G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root    8.0G  1.8G  6.3G  22% /</span><br><span class="line">/dev/vda1                 1014M  231M  784M  23% /boot</span><br><span class="line">tmpfs                      1.2G     0  1.2G   0% /run/user/0</span><br><span class="line">/dev/mapper/share-vg_data   49G   53M   46G   1% /data</span><br></pre></td></tr></table></figure>

<p>开机自动挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@template ~]# vim /etc/fstab</span><br><span class="line"></span><br><span class="line">/dev/mapper/share-vg_data  /data               ext4     defaults        0 0 </span><br></pre></td></tr></table></figure>

<p>增加100G到/data</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vmhost2 ~]# lvextend --size +500G --resizefs /dev/mapper/VGsdb1T-vm_main</span><br><span class="line">  Size of logical volume VGsdb1T/vm_main changed from 400.00 GiB (102400 extents) to 900.00 GiB (230400 extents).</span><br><span class="line">  Logical volume VGsdb1T/vm_main successfully resized.</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/mapper/VGsdb1T-vm_main is mounted on /data; on-line resizing required</span><br><span class="line">old_desc_blocks = 50, new_desc_blocks = 113</span><br><span class="line">The filesystem on /dev/mapper/VGsdb1T-vm_main is now 235929600 blocks long.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p>删除卷组VG</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vmhost2 ~]# vgs</span><br><span class="line">  VG     #PV #LV #SN Attr   VSize    VFree   </span><br><span class="line">  centos   1   2   0 wz--n-   &lt;9.00g       0 </span><br><span class="line">  datavg   1   1   0 wz--n- &lt;100.00g       0 </span><br><span class="line">  share    1   0   0 wz--n- &lt;100.00g &lt;100.00g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@vmhost2 ~]# vgremove share</span><br><span class="line">  Volume group &quot;share&quot; successfully removed</span><br><span class="line">  </span><br><span class="line">[root@vmhost2 ~]# vgs</span><br><span class="line">  VG     #PV #LV #SN Attr   VSize    VFree</span><br><span class="line">  centos   1   2   0 wz--n-   &lt;9.00g    0 </span><br><span class="line">  datavg   1   1   0 wz--n- &lt;100.00g    0 </span><br></pre></td></tr></table></figure>

<p>参数详情中文版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VMhost4 yum.repos.d]# fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">欢迎使用 fdisk (util-linux 2.32.1)。</span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">设备不包含可识别的分区表。</span><br><span class="line">创建了一个磁盘标识符为 0xc4b0420b 的新 DOS 磁盘标签。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：m</span><br><span class="line"></span><br><span class="line">帮助：</span><br><span class="line"></span><br><span class="line">  DOS (MBR)</span><br><span class="line">   a   开关 可启动 标志</span><br><span class="line">   b   编辑嵌套的 BSD 磁盘标签</span><br><span class="line">   c   开关 dos 兼容性标志</span><br><span class="line"></span><br><span class="line">  常规</span><br><span class="line">   d   删除分区</span><br><span class="line">   F   列出未分区的空闲区</span><br><span class="line">   l   列出已知分区类型</span><br><span class="line">   n   添加新分区</span><br><span class="line">   p   打印分区表</span><br><span class="line">   t   更改分区类型</span><br><span class="line">   v   检查分区表</span><br><span class="line">   i   打印某个分区的相关信息</span><br><span class="line"></span><br><span class="line">  杂项</span><br><span class="line">   m   打印此菜单</span><br><span class="line">   u   更改 显示/记录 单位</span><br><span class="line">   x   更多功能(仅限专业人员)</span><br><span class="line"></span><br><span class="line">  脚本</span><br><span class="line">   I   从 sfdisk 脚本文件加载磁盘布局</span><br><span class="line">   O   将磁盘布局转储为 sfdisk 脚本文件</span><br><span class="line"></span><br><span class="line">  保存并退出</span><br><span class="line">   w   将分区表写入磁盘并退出</span><br><span class="line">   q   退出而不保存更改</span><br><span class="line"></span><br><span class="line">  新建空磁盘标签</span><br><span class="line">   g   新建一份 GPT 分区表</span><br><span class="line">   G   新建一份空 GPT (IRIX) 分区表</span><br><span class="line">   o   新建一份的空 DOS 分区表</span><br><span class="line">   s   新建一份空 Sun 分区表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hex 代码(输入 L 列出所有代码)：L</span><br><span class="line"></span><br><span class="line"> 0  空              24  NEC DOS         81  Minix / 旧 Linu bf  Solaris        </span><br><span class="line"> 1  FAT12           27  隐藏的 NTFS Win 82  Linux swap / So c1  DRDOS/sec (FAT-</span><br><span class="line"> 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-</span><br><span class="line"> 3  XENIX usr       3c  PartitionMagic  84  OS/2 隐藏 或 In c6  DRDOS/sec (FAT-</span><br><span class="line"> 4  FAT16 &lt;32M      40  Venix 80286     85  Linux 扩展      c7  Syrinx         </span><br><span class="line"> 5  扩展            41  PPC PReP Boot   86  NTFS 卷集       da  非文件系统数据 </span><br><span class="line"> 6  FAT16           42  SFS             87  NTFS 卷集       db  CP/M / CTOS / .</span><br><span class="line"> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux 纯文本    de  Dell 工具      </span><br><span class="line"> 8  AIX             4e  QNX4.x 第2部分  8e  Linux LVM       df  BootIt         </span><br><span class="line"> 9  AIX 可启动      4f  QNX4.x 第3部分  93  Amoeba          e1  DOS 访问       </span><br><span class="line"> a  OS/2 启动管理器 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O        </span><br><span class="line"> b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor      </span><br><span class="line"> c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad 休 ea  Rufus 对齐     </span><br><span class="line"> e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         eb  BeOS fs        </span><br><span class="line"> f  W95 扩展 (LBA)  54  OnTrackDM6      a6  OpenBSD         ee  GPT            </span><br><span class="line">10  OPUS            55  EZ-Drive        a7  NeXTSTEP        ef  EFI (FAT-12/16/</span><br><span class="line">11  隐藏的 FAT12    56  Golden Bow      a8  Darwin UFS      f0  Linux/PA-RISC  </span><br><span class="line">12  Compaq 诊断     5c  Priam Edisk     a9  NetBSD          f1  SpeedStor      </span><br><span class="line">14  隐藏的 FAT16 &lt;3 61  SpeedStor       ab  Darwin 启动     f4  SpeedStor      </span><br><span class="line">16  隐藏的 FAT16    63  GNU HURD 或 Sys af  HFS / HFS+      f2  DOS 次要       </span><br><span class="line">17  隐藏的 HPFS/NTF 64  Novell Netware  b7  BSDI fs         fb  VMware VMFS    </span><br><span class="line">18  AST 智能睡眠    65  Novell Netware  b8  BSDI swap       fc  VMware VMKCORE </span><br><span class="line">1b  隐藏的 W95 FAT3 70  DiskSecure 多启 bb  Boot Wizard 隐  fd  Linux raid 自动</span><br><span class="line">1c  隐藏的 W95 FAT3 75  PC/IX           bc  Acronis FAT32 L fe  LANstep        </span><br><span class="line">1e  隐藏的 W95 FAT1 80  旧 Minix        be  Solaris 启动    ff  BBT            </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LVM</category>
      </categories>
      <tags>
        <tag>LVM</tag>
        <tag>磁盘</tag>
      </tags>
  </entry>
  <entry>
    <title>LVM扩容根目录（不新加磁盘）</title>
    <url>/p/44212.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="LVM扩容根目录（不用新添加磁盘）">1. LVM扩容根目录（不用新添加磁盘）</h1><blockquote>
<p><a href="https://computingforgeeks.com/how-to-extend-increase-kvm-virtual-machine-disk-size/">https://computingforgeeks.com/how-to-extend-increase-kvm-virtual-machine-disk-size/</a></p>
</blockquote>
<p>如何在 KVM 中扩展/增加/增长虚拟磁盘？。我个人将 KVM 用于所有 Linux 虚拟化项目。有时，我需要为正在运行的 VM（来宾）扩展或添加磁盘空间以满足不断增长的软件需求。 KVM 使用 QEMU，它支持多种图像类型，其中包括 raw、cow、qcow、qcow2、vmdk、vdi 等。</p>
<p>“原生”和最灵活的类型是 qcow2，它支持写入时复制、加密、压缩和 VM 快照。</p>
<h2 id="关闭-KVM-上的虚拟机">1.1. 关闭 KVM 上的虚拟机</h2><p>在扩展来宾计算机虚拟磁盘之前，您需要先将其关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo virsh list</span><br><span class="line"> Id   Name    State</span><br><span class="line">-----------------------</span><br><span class="line"> 4    rhel8   running</span><br></pre></td></tr></table></figure>

<p>如果您的来宾计算机处于运行状态，请使用其 ID 或名称将其关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo virsh shutdown rhel8</span><br><span class="line">Domain rhel8 is being shutdown</span><br></pre></td></tr></table></figure>

<p>在继续管理其磁盘之前确认它确实已关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo virsh list          </span><br><span class="line"> Id   Name   State</span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure>

<h2 id="扩展您的-KVM-来宾操作系统磁盘">1.2. 扩展您的 KVM 来宾操作系统磁盘</h2><p>找到您的来宾操作系统磁盘路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo virsh domblklist rhel8</span><br><span class="line"> Target   Source</span><br><span class="line">-----------------------------------------------</span><br><span class="line"> vda      /var/lib/libvirt/images/rhel8.qcow2</span><br><span class="line"> sda      -</span><br><span class="line"></span><br><span class="line">OR use:</span><br><span class="line"></span><br><span class="line">$ sudo virsh dumpxml rhel8 | egrep &#x27;disk type&#x27; -A 5</span><br><span class="line">    &lt;disk type=&#x27;file&#x27; device=&#x27;disk&#x27;&gt;</span><br><span class="line">      &lt;driver name=&#x27;qemu&#x27; type=&#x27;qcow2&#x27;/&gt;</span><br><span class="line">      &lt;source file=&#x27;/var/lib/libvirt/images/rhel8.qcow2&#x27;/&gt;</span><br><span class="line">      &lt;backingStore/&gt;</span><br><span class="line">      &lt;target dev=&#x27;vda&#x27; bus=&#x27;virtio&#x27;/&gt;</span><br><span class="line">      &lt;address type=&#x27;pci&#x27; domain=&#x27;0x0000&#x27; bus=&#x27;0x04&#x27; slot=&#x27;0x00&#x27; function=&#x27;0x0&#x27;/&gt;</span><br><span class="line">--</span><br><span class="line">    &lt;disk type=&#x27;file&#x27; device=&#x27;cdrom&#x27;&gt;</span><br><span class="line">      &lt;driver name=&#x27;qemu&#x27; type=&#x27;raw&#x27;/&gt;</span><br><span class="line">      &lt;target dev=&#x27;sda&#x27; bus=&#x27;sata&#x27;/&gt;</span><br><span class="line">      &lt;readonly/&gt;</span><br><span class="line">      &lt;address type=&#x27;drive&#x27; controller=&#x27;0&#x27; bus=&#x27;0&#x27; target=&#x27;0&#x27; unit=&#x27;0&#x27;/&gt;</span><br><span class="line">    &lt;/disk&gt;</span><br></pre></td></tr></table></figure>

<p>您可以从 Virtual Machine Manager GUI 获取相同的信息。我的虚拟机磁盘位于‘/var/lib/libvirt/images/rhel8.qcow2‘。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo qemu-img info /var/lib/libvirt/images/rhel8.qcow2</span><br><span class="line">image: /var/lib/libvirt/images/rhel8.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 30G (42949672960 bytes)</span><br><span class="line">disk size: 2.0G</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: true</span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: false</span><br></pre></td></tr></table></figure>

<h2 id="扩展来宾-VM-磁盘">1.3. 扩展来宾 VM 磁盘</h2><p>由于我们知道我们的虚拟机磁盘的位置，让我们将其扩展到我们想要的容量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo qemu-img resize /var/lib/libvirt/images/rhel8.qcow2 +10G</span><br></pre></td></tr></table></figure>

<p>请注意 qemu-img 无法调整具有快照的图像的大小。您需要先删除所有 VM 快照。看这个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo virsh snapshot-list rhel8</span><br><span class="line"> Name        Creation Time               State</span><br><span class="line">--------------------------------------------------</span><br><span class="line"> snapshot1   2019-04-16 08:54:24 +0300   shutoff</span><br><span class="line"></span><br><span class="line">$ sudo virsh snapshot-delete --domain rhel8 --snapshotname snapshot1</span><br><span class="line">Domain snapshot snapshot1 deleted</span><br><span class="line"></span><br><span class="line">$ sudo virsh snapshot-list rhel8                                    </span><br><span class="line"> Name   Creation Time   State</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure>

<p>然后使用磁盘容量前的“+”扩展磁盘。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo qemu-img resize /var/lib/libvirt/images/rhel8.qcow2 +10G</span><br><span class="line">Image resized.</span><br></pre></td></tr></table></figure>

<p>您还可以使用 virsh 命令调整大小。这需要域正在运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo qemu-img info /var/lib/libvirt/images/rhel8.qcow2</span><br><span class="line"> image: /var/lib/libvirt/images/rhel8.qcow2</span><br><span class="line"> file format: qcow2</span><br><span class="line"> virtual size: 30G (42949672960 bytes)</span><br><span class="line"> disk size: 2.0G</span><br><span class="line"> cluster_size: 65536</span><br><span class="line"> Format specific information:</span><br><span class="line">     compat: 1.1</span><br><span class="line">     lazy refcounts: true</span><br><span class="line">     refcount bits: 16</span><br><span class="line">     corrupt: false</span><br><span class="line"></span><br><span class="line">$ sudo virsh start rhel8</span><br><span class="line">$ sudo virsh blockresize rhel8 /var/lib/libvirt/images/rhel8.qcow2 40G</span><br><span class="line">Block device &#x27;/var/lib/libvirt/images/rhel8.qcow2&#x27; is resized</span><br></pre></td></tr></table></figure>

<p>使用 fdisk 命令确认磁盘大小。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo fdisk -l /var/lib/libvirt/images/rhel8.qcow2      </span><br><span class="line">Disk /var/lib/libvirt/images/rhel8.qcow2: 30.2 GiB, 32399818752 bytes, 63280896 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>

<h2 id="增加虚拟机分区">1.4. 增加虚拟机分区</h2><p>现在启动虚拟机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo virsh start rhel8</span><br><span class="line">Domain rhel8 started</span><br></pre></td></tr></table></figure>

<p>以 root 用户身份或使用具有 sudo 的用户帐户通过 SSH 连接到您的 VM。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh rhel8             </span><br><span class="line">Last login: Fri Apr 19 06:11:19 2019 from 192.168.122.1</span><br><span class="line">[jmutai@rhel8 ~]$ </span><br></pre></td></tr></table></figure>

<p>检查您的新磁盘布局。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lsblk </span><br><span class="line"> NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line"> sr0            11:0    1 1024M  0 rom  </span><br><span class="line"> vda           252:0    0   40G  0 disk </span><br><span class="line"> ├─vda1        252:1    0    1G  0 part /boot</span><br><span class="line"> └─vda2        252:2    0   29G  0 part </span><br><span class="line">   ├─rhel-root 253:0    0 26.9G  0 lvm  /</span><br><span class="line">   └─rhel-swap 253:1    0  2.1G  0 lvm  [SWAP]</span><br></pre></td></tr></table></figure>

<p>我的 VM 总磁盘容量现在是 40GB，以前是 30GB。扩展虚拟机根磁盘</p>
<h2 id="安装growpart命令">1.5. 安装growpart命令</h2><p>Ubuntu / Debian安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install cloud-guest-utils</span><br></pre></td></tr></table></figure>

<p>CentOS安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y install cloud-utils-growpart</span><br></pre></td></tr></table></figure>

<p>可以通过传递 -h 参数来查看帮助页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ growpart -h</span><br><span class="line">growpart disk partition</span><br><span class="line">   rewrite partition table so that partition takes up all the space it can</span><br><span class="line">   options:</span><br><span class="line">    -h | --help       print Usage and exit</span><br><span class="line">         --fudge F    if part could be resized, but change would be</span><br><span class="line">                      less than &#x27;F&#x27; bytes, do not resize (default: 1048576)</span><br><span class="line">    -N | --dry-run    only report what would be done, show new &#x27;sfdisk -d&#x27;</span><br><span class="line">    -v | --verbose    increase verbosity / debug</span><br><span class="line">    -u | --update  R  update the the kernel partition table info after growing</span><br><span class="line">                      this requires kernel support and &#x27;partx --update&#x27;</span><br><span class="line">                      R is one of:</span><br><span class="line">                       - &#x27;auto&#x27;  : [default] update partition if possible</span><br><span class="line">                       - &#x27;force&#x27; : try despite sanity checks (fail on failure)</span><br><span class="line">                       - &#x27;off&#x27;   : do not attempt</span><br><span class="line">                       - &#x27;on&#x27;    : fail if sanity checks indicate no support</span><br><span class="line"></span><br><span class="line">   Example:</span><br><span class="line">    - growpart /dev/sda 1</span><br><span class="line">      Resize partition 1 on /dev/sda</span><br></pre></td></tr></table></figure>

<p>现在使用growpart 扩展您的分区。在此示例中，我们将扩展磁盘 /dev/vda 中的分区 2。用正确的值替换 2 和 /dev/vda。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo growpart /dev/vda 2</span><br><span class="line">CHANGED: partition=2 start=2099200 old: size=18872320 end=20971520 new: size=60815327,end=62914527</span><br></pre></td></tr></table></figure>

<p>确认更改是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lsblk </span><br><span class="line"> NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line"> sr0            11:0    1 1024M  0 rom  </span><br><span class="line"> vda           252:0    0   40G  0 disk </span><br><span class="line"> ├─vda1        252:1    0    1G  0 part /boot</span><br><span class="line"> └─vda2        252:2    0   39G  0 part </span><br><span class="line">   ├─rhel-root 253:0    0 26.9G  0 lvm  /</span><br><span class="line">   └─rhel-swap 253:1    0  2.1G  0 lvm  [SWAP]</span><br></pre></td></tr></table></figure>

<h2 id="调整根逻辑卷的大小以占用所有空间">1.6. 调整根逻辑卷的大小以占用所有空间</h2><p>调整物理卷大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo pvresize /dev/vda2</span><br><span class="line">  Physical volume &quot;/dev/vda2&quot; changed</span><br><span class="line">  1 physical volume(s) resized or updated / 0 physical volume(s) not resized</span><br><span class="line"></span><br><span class="line">$ sudo pvs</span><br><span class="line">  PV         VG   Fmt  Attr PSize   PFree </span><br><span class="line">  /dev/vda2  rhel lvm2 a--  &lt;39.00g 10.00g</span><br></pre></td></tr></table></figure>

<p>检查配置的卷组的大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vgs</span><br><span class="line">   VG   #PV #LV #SN Attr   VSize   VFree </span><br><span class="line">   rhel   1   2   0 wz--n- &lt;39.00g 10.00g</span><br></pre></td></tr></table></figure>

<p>然后使用扩展卷组调整根文件系统使用的逻辑卷的大小：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo lvextend -r -l +100%FREE /dev/name-of-volume-group/root</span><br></pre></td></tr></table></figure>

<p>这将扩展逻辑卷以使用卷组中的所有可用容量。使用 + 符号将值添加到逻辑卷的实际大小。</p>
<p>使用的命令选项：</p>
<ul>
<li><strong>-l</strong> – 以逻辑盘区为单位扩展或设置逻辑卷大小</li>
<li><strong>-r</strong> – 与逻辑卷一起调整底层文件系统的大小</li>
</ul>
<p>这是我的安装文件系统扩展的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -hT | grep mapper</span><br><span class="line"> /dev/mapper/rhel-root xfs        27G  1.9G   26G   8% /</span><br><span class="line"></span><br><span class="line">$ sudo lvextend -r -l +100%FREE /dev/mapper/rhel-root</span><br><span class="line">Size of logical volume rhel/root changed from &lt;26.93 GiB (6893 extents) to &lt;36.93 GiB (9453 extents).</span><br><span class="line">Logical volume rhel/root successfully resized.</span><br></pre></td></tr></table></figure>

<p>如果您更喜欢手动设置要扩展的大小，请使用命令选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-L, --size [+]LogicalVolumeSize[bBsSkKmMgGtTpPeE]</span><br></pre></td></tr></table></figure>

<p>更多选项如下:</p>
<blockquote>
<ul>
<li><strong>M</strong> for megabytes</li>
<li><strong>G</strong> for gigabytes</li>
<li><strong>T</strong> for terabytes</li>
<li><strong>P</strong> for petabytes</li>
<li><strong>E</strong> for exabytes</li>
</ul>
</blockquote>
<p>如果没有 + 符号，则该值被视为绝对值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Add 20 gigabytes to the current logical volume size</span><br><span class="line">$ sudo lvextend -r -L +20G /dev/name-of-volume-group/root</span><br></pre></td></tr></table></figure>

<h2 id="更新文件系统上的更改（如果您没有在第-3-步中使用-r-选项）">1.7. 更新文件系统上的更改（如果您没有在第 3 步中使用 -r 选项）</h2><p>您的根文件系统仍将显示旧大小。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -hT | grep mapper</span><br><span class="line"> /dev/mapper/rhel-root xfs        27G  1.9G   26G   8% /</span><br></pre></td></tr></table></figure>

<p>让我们让文件系统报告实际大小，包括扩展。</p>
<p>对于 ext4 文件系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo resize2fs /dev/name-of-volume-group/root</span><br></pre></td></tr></table></figure>

<p>对于 xfs 文件系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo xfs_growfs /</span><br><span class="line"> meta-data=/dev/mapper/rhel-root  isize=512    agcount=4, agsize=1764608 blks</span><br><span class="line">          =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">          =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class="line">          =                       reflink=1</span><br><span class="line"> data     =                       bsize=4096   blocks=7058432, imaxpct=25</span><br><span class="line">          =                       sunit=0      swidth=0 blks</span><br><span class="line"> naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class="line"> log      =internal log           bsize=4096   blocks=3446, version=2</span><br><span class="line">          =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line"> realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line"> data blocks changed from 7058432 to 9679872</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://computingforgeeks.com/extending-root-filesystem-using-lvm-linux/">How to extend root filesystem using LVM in Linux</a></li>
<li><a href="https://computingforgeeks.com/resize-ext-and-xfs-root-partition-without-lvm/">How to resize an ext2/3/4 and XFS root partition without LVM</a></li>
</ul>
<p>Other guides:</p>
<ul>
<li><p><a href="https://computingforgeeks.com/how-to-extend-aws-ec2-instance-boot-file-system-without-rebooting/">How to extend EBS boot disk on AWS without an instance reboot</a></p>
</li>
<li><p><a href="https://computingforgeeks.com/how-to-create-disk-partitions-in-windows-using-diskpart-command/">How to create disk partitions in Windows using diskpart command</a></p>
</li>
<li><p><a href="https://computingforgeeks.com/working-with-qemu-img/">Working with qemu-img in Linux</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>LVM</category>
      </categories>
      <tags>
        <tag>LVM</tag>
        <tag>磁盘</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL certificate problem certificate has expired</title>
    <url>/p/31017.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>我在Amazon EC2执行yum时报错如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Linux ~]# yum repolist</span><br><span class="line">Loaded plugins: extras_suggestions, langpacks, priorities, update-motd</span><br><span class="line">amzn2-core                                                                                                                                                                                 | 3.7 kB  00:00:00     </span><br><span class="line">https://repo.zabbix.com/zabbix/5.4/rhel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#60 - &quot;SSL certificate problem: certificate has expired&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line">https://repo.zabbix.com/zabbix/5.4/rhel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#60 - &quot;SSL certificate problem: certificate has expired&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line">https://repo.zabbix.com/non-supported/rhel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#60 - &quot;SSL certificate problem: certificate has expired&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line">repo id                                                                                     repo name                                                                                                       status</span><br><span class="line">amzn2-core/2/x86_64                                                                         Amazon Linux 2 core repository                                                                                  26,893</span><br><span class="line">amzn2extra-docker/2/x86_64                                                                  Amazon Extras repo for docker                                                                                       55</span><br><span class="line">amzn2extra-epel/2/x86_64                                                                    Amazon Extras repo for epel                                                                                          1</span><br><span class="line">amzn2extra-lamp-mariadb10.2-php7.2/2/x86_64                                                 Amazon Extras repo for lamp-mariadb10.2-php7.2                                                                     609</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中报错：[Errno 14] curl#60 - “SSL certificate problem: certificate has expired”，很明显时提示证书过期，</p>
<p><strong>解决方法</strong>：</p>
<p>1.下载最新的证书：<a href="https://curl.se/ca/cacert.pem">https://curl.se/ca/cacert.pem</a></p>
<p>2.Amazon EC2解决过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取证书位置</span><br><span class="line">[root@Linux ~]# curl-config --ca</span><br><span class="line">/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"></span><br><span class="line"># 查看证书文件</span><br><span class="line">[root@Linux ~]# ls -la /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">lrwxrwxrwx 1 root root 49 Aug  6  2020 /etc/pki/tls/certs/ca-bundle.crt -&gt; /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem</span><br><span class="line"></span><br><span class="line"># 备份原文件</span><br><span class="line">mv /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem.bak</span><br><span class="line"></span><br><span class="line"># 下载最新证书（-L是为了跟踪重定向，-v是为了查看具体信息）</span><br><span class="line">curl -o /etc/pki/ca-trust/extracted/pem/cacert.pem &quot;http://curl.haxx.se/ca/cacert.pem&quot;  -L -v</span><br><span class="line"></span><br><span class="line"># 修改名称</span><br><span class="line">mv /etc/pki/ca-trust/extracted/pem/cacert.pem /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.再次执行yum测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Linux ~]# yum repolist</span><br><span class="line">Loaded plugins: extras_suggestions, langpacks, priorities, update-motd</span><br><span class="line"></span><br><span class="line">19 packages excluded due to repository priority protections</span><br><span class="line">repo id                                                                                    repo name                                                                                                      status</span><br><span class="line">amzn2-core/2/x86_64                                                                        Amazon Linux 2 core repository                                                                                   26,893</span><br><span class="line">amzn2extra-docker/2/x86_64                                                                 Amazon Extras repo for docker                                                                                        55</span><br><span class="line">amzn2extra-epel/2/x86_64                                                                   Amazon Extras repo for epel                                                                                           1</span><br><span class="line">amzn2extra-lamp-mariadb10.2-php7.2/2/x86_64                                                Amazon Extras repo for lamp-mariadb10.2-php7.2                                                                      609</span><br><span class="line">amzn2extra-php7.2/2/x86_64                                                                 Amazon Extras repo for php7.2                                                                                       737</span><br><span class="line">centos-sclo-rh/x86_64                                                                      CentOS-7 - SCLo rh                                                                                             7,775+19</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>可以看到已经可以正常使用。</p>
]]></content>
      <categories>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>将新硬盘加入到根目录</title>
    <url>/p/42147.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="将新硬盘加入到根目录（逻辑卷LVM）">1. 将新硬盘加入到根目录（逻辑卷LVM）</h1><p>安装系统时采用了LVM分区，根目录只有9.7G</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs                    1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs                    1.9G  8.6M  1.9G   1% /run</span><br><span class="line">tmpfs                    1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root  8.0G  8.0G   67M 100% /</span><br><span class="line">/dev/sda1               1014M  275M  740M  28% /boot</span><br><span class="line">tmpfs                    379M     0  379M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>查看目前虚拟机的磁盘情况，看到新增磁盘：/dev/sdb1 50G</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x000beec6</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    20971519     9436160   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 53.7 GB, 53687091200 bytes, 104857600 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-root: 8585 MB, 8585740288 bytes, 16769024 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-swap: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x795ab816.</span><br><span class="line"></span><br><span class="line">Command (m for help): o</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x51f639a5.</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-104857599, default 2048): </span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-104857599, default 104857599): </span><br><span class="line">Using default value 104857599</span><br><span class="line">Partition 1 of type Linux and of size 50 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (type L to list all codes): 8e</span><br><span class="line">Changed type of partition &#x27;Linux&#x27; to &#x27;Linux LVM&#x27;</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

<p>创建pv ,通过pvcreate命令将磁盘/dev/sdb1创建为一个系统PV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# pvcreate /dev/sdb1 </span><br><span class="line">  Physical volume &quot;/dev/sdb1&quot; successfully created.</span><br></pre></td></tr></table></figure>

<p>查看pv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# pvscan</span><br><span class="line">  PV /dev/sda2   VG centos          lvm2 [&lt;9.00 GiB / 0    free]</span><br><span class="line">  PV /dev/sdb1                      lvm2 [&lt;50.00 GiB]</span><br><span class="line">  Total: 2 [&lt;59.00 GiB] / in use: 1 [&lt;9.00 GiB] / in no VG: 1 [&lt;50.00 GiB]</span><br></pre></td></tr></table></figure>

<p>查看vg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# vgs</span><br><span class="line">  VG     #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  centos   1   2   0 wz--n- &lt;9.00g    0 </span><br></pre></td></tr></table></figure>

<p>将 PV /dev/sdb1添加到卷组centos中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# vgextend centos /dev/sdb1</span><br><span class="line">  Volume group &quot;centos&quot; successfully extended</span><br></pre></td></tr></table></figure>

<p>查看vg，已经增加为58G</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# vgs</span><br><span class="line">  VG     #PV #LV #SN Attr   VSize  VFree  </span><br><span class="line">  centos   2   2   0 wz--n- 58.99g &lt;50.00g</span><br></pre></td></tr></table></figure>

<p>为根目录添加20G的空间。通过df -h查看根目录的lv名称为 /dev/mapper/centos-root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs                    1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs                    1.9G  8.6M  1.9G   1% /run</span><br><span class="line">tmpfs                    1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root  8.0G  8.0G   67M 100% /</span><br><span class="line">/dev/sda1               1014M  275M  740M  28% /boot</span><br><span class="line">tmpfs                    379M     0  379M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# lvextend -L +50G -n /dev/mapper/centos-root</span><br><span class="line">  Insufficient free space: 12800 extents needed, but only 12799 available</span><br></pre></td></tr></table></figure>

<p>发现报错了，空间不够，所以 降低1G输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# lvextend -L +49G -n /dev/mapper/centos-root</span><br><span class="line">  Size of logical volume centos/root changed from &lt;8.00 GiB (2047 extents) to &lt;57.00 GiB (14591 extents).</span><br><span class="line">  Logical volume centos/root successfully resized.</span><br></pre></td></tr></table></figure>

<p>逻辑卷扩展后并不会马上生效，需要使用“resize2fs”命令重新加载逻辑卷的大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# resize2fs /dev/mapper/centos-root</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">resize2fs: Bad magic number in super-block while trying to open /dev/mapper/centos-root</span><br><span class="line">Couldn&#x27;t find valid filesystem superblock.</span><br></pre></td></tr></table></figure>

<p>使用 resize2fs时，提示错误，了解后发现，xfs格式的文件扩充需要使用 xfs_growfs</p>
<p>查看/dev/mapper/centos-root的格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# df -hT</span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                devtmpfs  1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs                   tmpfs     1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     1.9G  8.6M  1.9G   1% /run</span><br><span class="line">tmpfs                   tmpfs     1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root xfs        8.0G  8.0G   67M  100% /</span><br><span class="line">/dev/sda1               xfs      1014M  275M  740M  28% /boot</span><br><span class="line">tmpfs                   tmpfs     379M     0  379M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>查看得知为xfs，使用xfs_growfs扩充</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@edgex ~]# xfs_growfs /dev/mapper/centos-root </span><br><span class="line">meta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=524032 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=2096128, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 2096128 to 14941184</span><br></pre></td></tr></table></figure>

<p>至此扩充完毕。</p>
]]></content>
      <categories>
        <category>LVM</category>
      </categories>
      <tags>
        <tag>LVM</tag>
        <tag>磁盘</tag>
      </tags>
  </entry>
  <entry>
    <title>helm部署zookeeper和kafka集群</title>
    <url>/p/30035.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# helm search repo zookeeper</span><br><span class="line">NAME                    	CHART VERSION	APP VERSION	DESCRIPTION                                       </span><br><span class="line">bitnami/zookeeper       	7.4.2        	3.7.0      	A centralized service for maintaining configura...</span><br><span class="line">bitnami/dataplatform-bp1	7.0.0        	1.0.0      	OCTO Data platform Kafka-Spark-Solr Helm Chart    </span><br><span class="line">bitnami/dataplatform-bp2	5.0.0        	1.0.0      	OCTO Data platform Kafka-Spark-Elasticsearch He...</span><br><span class="line">bitnami/kafka           	14.0.5       	2.8.0      	Apache Kafka is a distributed streaming platform. </span><br><span class="line">bitnami/solr            	2.0.3        	8.9.0      	Apache Solr is an open source enterprise search...</span><br></pre></td></tr></table></figure>

























]]></content>
  </entry>
  <entry>
    <title>harbor管理helm-charts</title>
    <url>/p/51806.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="harbor管理helm-charts">1. harbor管理helm-charts</h1><h2 id="版本信息">1.1. 版本信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">harbor version： 1.8.1</span><br><span class="line">helm version： v3.6.2</span><br><span class="line">docker version: 18.06.3</span><br><span class="line">docker-compose version: 1.25.4</span><br></pre></td></tr></table></figure>

<h2 id="安装chartmuseum插件">1.2. 安装chartmuseum插件</h2><p>harbor 安装的时候 默认没有helm charts的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br><span class="line">./install.sh  --with-chartmuseum</span><br></pre></td></tr></table></figure>

<p>安装完成之后登录页面上就会有了 helm charts 了，页面上也可以直接上传charts</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/helm/202110131712456.png"></p>
<h2 id="helm-安装push插件">1.3. helm 安装push插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">helm plugin install https://github.com/chartmuseum/helm-push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># helm plugin list</span></span><br><span class="line">NAME   	VERSION	DESCRIPTION                      </span><br><span class="line">cm-push	0.10.1 	Push chart package to ChartMuseum</span><br></pre></td></tr></table></figure>

<p>创建一个charts项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/helm/202110131739738.png"></p>
<h2 id="添加仓库">1.4. 添加仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add harbor https://harbor.xxx.com/chartrepo/library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需要配置用户名密码</span></span><br><span class="line">helm repo add harbor --username=xxx --password=xxx https://harbor.xxx.com/chartrepo/library</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># helm repo list</span></span><br><span class="line">NAME         	URL                                       </span><br><span class="line">bitnami      	https://charts.bitnami.com/bitnami        </span><br><span class="line">ingress-nginx	https://kubernetes.github.io/ingress-nginx</span><br><span class="line">harbor       	http://harbor.aimm.cn/chartrepo/library   </span><br></pre></td></tr></table></figure>

<h2 id="上传到仓库">1.5. 上传到仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找charts</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># helm search repo redis</span></span><br><span class="line">NAME                 	CHART VERSION	APP VERSION	DESCRIPTION                                       </span><br><span class="line">bitnami/redis        	15.0.4       	6.2.5      	Open <span class="built_in">source</span>, advanced key-value store. It is of...</span><br><span class="line">bitnami/redis-cluster	6.3.6        	6.2.5      	Open <span class="built_in">source</span>, advanced key-value store. It is of...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># helm pull bitnami/redis</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># ls redis-15.0.4.tgz </span></span><br><span class="line">redis-15.0.4.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到私有仓库</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># helm cm-push --username=admin --password=Harbor12345 redis-15.0.4.tgz harbor </span></span><br><span class="line">Pushing redis-15.0.4.tgz to harbor...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<p>上传完成后到harbor仓库查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/helm/202110131821245.png"></p>
<p>强制推送</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># helm cm-push --force redis-15.0.4.tgz harbor </span></span><br><span class="line">Pushing redis-15.0.4.tgz to harbor...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<p>直接推送到URL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># helm cm-push redis-15.0.4.tgz https://harbor.xxx.com/chartrepo/library</span></span><br><span class="line">Pushing redis-15.0.4.tgz to https://harbor.xxx.com/chartrepo/library</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<h2 id="报错解决：">1.6. 报错解决：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># helm cm-push redis-15.0.4.tgz harbor</span></span><br><span class="line">Pushing redis-15.0.4.tgz to harbor...</span><br><span class="line">Error: 401: could not properly parse response JSON: &#123;<span class="string">&quot;code&quot;</span>:401,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Unauthorized&quot;</span>&#125;</span><br><span class="line">......</span><br><span class="line">Error: plugin <span class="string">&quot;cm-push&quot;</span> exited with error</span><br></pre></td></tr></table></figure>

<p>添加用户名密码即可。</p>
]]></content>
      <categories>
        <category>helm</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署Redis集群</title>
    <url>/p/53265.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>k8s部署Redis集群</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s私有库secret配置</title>
    <url>/p/63681.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="k8s-私有库secret配置">1. k8s 私有库secret配置</h1><h2 id="方式一：">1.1. 方式一：</h2><p>创建前先查看secrets</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get secrets</span><br><span class="line">NAME                        TYPE                                  DATA   AGE</span><br><span class="line">default-token-pppcz         kubernetes.io/service-account-token   3      43h</span><br><span class="line">sh.helm.release.v1.web.v1   helm.sh/release.v1                    1      18h</span><br></pre></td></tr></table></figure>

<p>k8s创建secrets命令模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry NAME --docker-username=user --docker-password=password --docker-email=email</span><br></pre></td></tr></table></figure>

<p>创建secrets</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry harbor-registry --docker-server=harbor.xxx.com --docker-username=admin --docker-password=Harbor12345 --docker-email=heyuze@163.com</span><br></pre></td></tr></table></figure>

<p>查看生成的secret</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get secrets</span><br><span class="line">NAME                        TYPE                                  DATA   AGE</span><br><span class="line">default-token-pppcz         kubernetes.io/service-account-token   3      43h</span><br><span class="line">harbor-registry             kubernetes.io/dockerconfigjson        1      41h</span><br><span class="line">sh.helm.release.v1.web.v1   helm.sh/release.v1                    1      18h</span><br></pre></td></tr></table></figure>

<p>查看secret的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl describe secrets harbor-registry</span><br><span class="line">Name:         harbor-registry</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/dockerconfigjson</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">.dockerconfigjson:  138 bytes</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里默认生成的secrets只能在default工作空间使用，如果需要在指定的工作空间创建，需要加：-n参数指定工作空间</p>
<p>例如：kubectl create secret docker-registry harbor-registry –docker-server=harbor.xxx.com –docker-username=admin –docker-password=Harbor12345 --docker-email=<a href="mailto:&#x68;&#101;&#x79;&#117;&#122;&#101;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#109;">&#x68;&#101;&#x79;&#117;&#122;&#101;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#109;</a> -n test</p>
</blockquote>
<p>配置yaml，通过secret获取images</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@master1</span> <span class="string">machine-tool</span>]<span class="comment"># vi nginx.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.xxx.com/test/ssh-centos7:latest</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">top</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;-b&#x27;</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-registry</span></span><br></pre></td></tr></table></figure>



<h2 id="方式二：">1.2. 方式二：</h2><p>配置私有仓库</p>
<p>修改docker私有仓库地址(所有node节点都修改）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# vim /etc/docker/daemon.json </span><br><span class="line"></span><br><span class="line">&#123;    </span><br><span class="line">	&quot;registry-mirrors&quot;: [&quot;http://bc437cce.m.daocloud.io&quot;],    </span><br><span class="line">	&quot;insecure-registries&quot;: [&quot;192.168.3.187&quot;] &#125;</span><br><span class="line"></span><br><span class="line">Harbor12345</span><br></pre></td></tr></table></figure>

<p>登录仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 default]# docker login 192.168.3.187</span><br><span class="line"></span><br><span class="line">Username: admin </span><br><span class="line">Password:  </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json. </span><br><span class="line">Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store </span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<p>拉取一个tomcat镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">heyuze/java-demo          latest              4d36f38cc8c8        19 hours ago        406MB</span><br><span class="line">tomcat                    latest              4e7840b49fad        5 days ago          529MB</span><br></pre></td></tr></table></figure>

<p>打tag并推送到harbor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 default]# docker tag tomcat 192.168.3.187/project/tomcat</span><br><span class="line">[root@k8s-node1 default]# </span><br><span class="line">[root@k8s-node1 default]# docker push 192.168.3.187/project/tomcat</span><br></pre></td></tr></table></figure>

<p>k8s配置登录harbor仓库的tocken</p>
<p>查看tocken</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# cat .docker/config.json </span><br><span class="line">&#123;</span><br><span class="line">	&quot;auths&quot;: &#123;</span><br><span class="line">		&quot;192.168.3.187&quot;: &#123;</span><br><span class="line">			&quot;auth&quot;: &quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;HttpHeaders&quot;: &#123;</span><br><span class="line">		&quot;User-Agent&quot;: &quot;Docker-Client/18.09.6 (linux)&quot;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>查看密码是否正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master1 ~]# echo &quot;YWRtaW46SGFyYm9yMTIzNDU=&quot; |base64 --decode -</span><br><span class="line">admin:Harbor12345</span><br></pre></td></tr></table></figure>

<p>不换行生成tocken（64位编码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# cat .docker/config.json |base64 -w 0</span><br><span class="line"></span><br><span class="line">ewoJImF1dGhzIjogewoJCSIxOTIuMTY4LjMuMTg3IjogewoJCQkiYXV0aCI6ICJZV1J0YVc0NlNHRnlZbTl5TVRJek5EVT0iCgkJfQoJfSwKCSJIdHRwSGVhZGVycyI6IHsKCQkiVXNlci1BZ2VudCI6ICJEb2NrZXItQ2xpZW50LzE4LjA5LjYgKGxpbnV4KSIKCX0KfQ==</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：因为k8s中没有认证仓库，因此不能从私有仓库拉取镜像，下面生成认证的yaml文件</p>
</blockquote>
<p>认证仓库的yaml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master1 ~]# vim registry-pull-secret.yaml </span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: registry-pull-secret</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSIxOTIuMTY4LjMuMTg3IjogewoJCQkiYXV0aCI6ICJZV1J0YVc0NlNHRnlZbTl5TVRJek5EVT0iCgkJfQoJfSwKCSJIdHRwSGVhZGVycyI6IHsKCQkiVXNlci1BZ2VudCI6ICJEb2NrZXItQ2xpZW50LzE4LjA5LjYgKGxpbnV4KSIKCX0KfQ==</span><br><span class="line">type: kubernetes.io/dockerconfigjson</span><br></pre></td></tr></table></figure>

<p>创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create -f registry-pull-secret.yaml </span><br><span class="line">secret/registry-pull-secret created</span><br></pre></td></tr></table></figure>

<p>查看生成的凭据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get secret</span><br><span class="line">NAME                   TYPE                                  DATA   AGE</span><br><span class="line">default-token-6d4mx    kubernetes.io/service-account-token   3      6d20h</span><br><span class="line">registry-pull-secret   kubernetes.io/dockerconfigjson        1      34s</span><br></pre></td></tr></table></figure>

<p>下面是生成yaml文件，增加imagePullSecrets:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@k8s-master1</span> <span class="string">~</span>]<span class="comment"># vim tomcat-deployment.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">registry-pull-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.187</span><span class="string">/project/tomcat</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure>

<p>更新私有仓库tomcat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl apply -f tomcat-deployment.yaml</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master2 ~]# kubectl get pod</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">tomcat-5986778c5c-29t75     1/1     Running   0          6m14s</span><br><span class="line">tomcat-5986778c5c-hgr52     1/1     Running   0          24s</span><br><span class="line">tomcat-5986778c5c-hnjh8     1/1     Running   0          19m</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm部署KubernetesV1.18集群</title>
    <url>/p/51486.html</url>
    <content><![CDATA[<h1 id="kubeadm部署KubernetesV1-18集群">1. kubeadm部署KubernetesV1.18集群</h1><p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p>
<p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p>
<p><escape><span id="more"></span></escape></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个 Master 节点</span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"># 将一个 Node 节点加入到当前集群中</span><br><span class="line">$ kubeadm join &lt;Master节点的IP和端口 &gt;</span><br></pre></td></tr></table></figure>

<h2 id="安装要求">1.1. 安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p>
<ul>
<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>
<li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li>
<li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li>
<li>禁止swap分区</li>
</ul>
<h2 id="准备环境">1.2. 准备环境</h2><p> <img src="https://blog-1252881505.cos.ap-beijing.myqcloud.com/k8s/single-master.jpg" alt="kubernetesæ¶æå¾"> </p>
<table>
<thead>
<tr>
<th>角色</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-master</td>
<td>192.168.31.61</td>
</tr>
<tr>
<td>k8s-node1</td>
<td>192.168.31.62</td>
</tr>
<tr>
<td>k8s-node2</td>
<td>192.168.31.63</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 关闭selinux</span><br><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久</span><br><span class="line">setenforce 0  # 临时</span><br><span class="line"></span><br><span class="line"># 关闭swap</span><br><span class="line">swapoff -a  # 临时</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab    # 永久</span><br><span class="line"></span><br><span class="line"># 根据规划设置主机名</span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"># 在master添加hosts</span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.31.71 k8s-master</span><br><span class="line">192.168.31.72 k8s-node1</span><br><span class="line">192.168.31.73 k8s-node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 将桥接的IPv4流量传递到iptables的链</span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system  # 生效</span><br><span class="line"></span><br><span class="line"># 时间同步</span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>

<h2 id="所有节点安装Docker-kubeadm-kubelet">1.3. 所有节点安装Docker/kubeadm/kubelet</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>
<h3 id="安装Docker">1.3.1. 安装Docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="添加阿里云YUM软件源">1.3.2. 添加阿里云YUM软件源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="安装kubeadm，kubelet和kubectl">1.3.3. 安装kubeadm，kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class="line">$ systemctl enable kubelet</span><br></pre></td></tr></table></figure>

<h2 id="部署Kubernetes-Master">1.4. 部署Kubernetes Master</h2><p>在192.168.31.61（Master）执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.31.61 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.18.0 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>

<p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p>
<p>使用kubectl工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure>

<h2 id="加入Kubernetes-Node">1.5. 加入Kubernetes Node</h2><p>在192.168.31.62/63（Node）执行。</p>
<p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubeadm join 192.168.31.61:6443 --token esce21.q6hetwm8si29qxwn \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br><span class="line">    </span><br><span class="line">kubeadm join 192.168.101.209:6443 --token aw0wah.wf0ucozx0syqa58z     --discovery-token-ca-cert-hash sha256:5745909fd8cba0a6643060d19fb6b45a39b718cb39572727198f6ca0218ffe0b</span><br></pre></td></tr></table></figure>

<p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h2 id="部署CNI网络插件">1.6. 部署CNI网络插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">sed -i -r &quot;s#quay.io/coreos/flannel:.*-amd64#lizhenliang/flannel:v0.11.0-amd64#g&quot; kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>默认镜像地址无法访问，sed命令修改为docker hub镜像仓库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-amd64-2pc95   1/1     Running   0          72s</span><br></pre></td></tr></table></figure>

<h2 id="测试kubernetes集群">1.7. 测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://NodeIP:Port">http://NodeIP:Port</a>  </p>
<h2 id="部署-Dashboard">1.8. 部署 Dashboard</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span></span><br></pre></td></tr></table></figure>

<p>默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi recommended.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30001</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pods,svc -n kubernetes-dashboard</span></span><br><span class="line">NAME                                             READY   STATUS              RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-694557449d-z8gfb   1/1     Running             0          2m18s</span><br><span class="line">pod/kubernetes-dashboard-9774cc786-q2gsx         1/1     Running		     0          2m19s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   10.0.0.141   &lt;none&gt;        8000/TCP        2m19s</span><br><span class="line">service/kubernetes-dashboard        NodePort    10.0.0.239   &lt;none&gt;        443:30001/TCP   2m19s</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="https://nodeip:30001/">https://NodeIP:30001</a></p>
<p>创建service account并绑定默认cluster-admin管理员集群角色：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &#x27;/dashboard-admin/&#123;print $1&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>使用输出的token登录Dashboard。</p>
<p><img src="https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-1/dashboard-login.jpg"></p>
<p><img src="https://k8s-1252881505.cos.ap-beijing.myqcloud.com/k8s-1/dashboard.jpg"></p>
<blockquote>
<p>视频教程：<a href="https://ke.qq.com/course/266656">https://ke.qq.com/course/266656</a></p>
</blockquote>
<h2 id="生成一个不过期token">1.9. 生成一个不过期token</h2><blockquote>
<p><a href="https://www.cnblogs.com/xiaoyongyang/p/11953660.html">https://www.cnblogs.com/xiaoyongyang/p/11953660.html</a></p>
</blockquote>
<p>查看生成的token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure>

<p>生成永不过期的token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm token create --ttl 0</span><br></pre></td></tr></table></figure>



<h2 id="dashboard获取不到数据">1.10. dashboard获取不到数据</h2><blockquote>
<p><a href="https://blog.csdn.net/majixiang1996/article/details/105493071">https://blog.csdn.net/majixiang1996/article/details/105493071</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-admin</span><br><span class="line">  namespace: kube-dashboard</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: dashboard-admin</span><br><span class="line">    namespace: kube-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>

<p>查看token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl describe secret dashboard-admin -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins连接k8s集群</title>
    <url>/p/18125.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="jenkins连接k8s集群">1. jenkins连接k8s集群</h1><p>适用于Jenkins连接二进制、kubeadm、rke等工具创建的K8S集群</p>
<h2 id="jenkins配置">1.1. jenkins配置</h2><p>安装kubernetes插件</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110151340901.png"></p>
<p>点击系统管理-&gt;系统设置-添加一个云,在下拉菜单中选择kubernets并添加，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110151340582.png"></p>
<p>Add a new cloud —-kubernetes</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110151342809.png"></p>
<h2 id="获取验证文件">1.2. 获取验证文件</h2><blockquote>
<p>k8s-master服务器</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# cat ~/.kube/config </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EZ3pNREEzTlRJMU9Wb1hEVE14TURneU9EQTNOVEkxT1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzlLCnNBNnhZQ24zOVBZeitKWjNLd2tRYW00RytwSkdCTHRyRWFGVzYwam1rQkxCUVZCanJNZ2hVVWxjYUwwWTNybVAKbkpPbWsyRm1VSzFvZW01d21YQndERFppc08wT011bVI2QlJ4UWF5WlJoMW5GQnNWSHFFdXdFY3ROZkFpTThQagpUOVBQclBHbUN0Tm1qSnB6bDVNTnBaQ0htL2hHMUpaK3hlakhzblJDR3NzSzNFMyt6RFJmVk5qc1Vqamd3ME9FCm9vcGRlYUpRTlVZR01CazFJSDFoYW9wZDBFcjVTUDI3R1pzSXZnTFhmRTUvT2tWckN5WEk2UU9EM29LbytJaW8KL0ExNkg2QXZNR21PZXd5R3RzSEQ0YXlhbE5vQVd0cSt2SWx1S1A4ZTZkaC9jcStjb3llYmk1NTZiNWRRK3dIdwpyR0dFK1laeGVWNGxBR3dRMlhVQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHZGQ0VGx5NDJGclZPOUw5NnV4Znc4Yk54a1MKS2xXdE9EdWpaaUtyMWIyLzluYTVnTlo5cmk0ekYrQ0JhdDVRcURKSmNmQmxPaXAzWm9UWkZnVnJOUTVhYTJGTQpPLzBkRTJ0WVY4MDUxOUFCVXBkWURNek5zVEwzemI3b1dxN0ErQkw1VjF6Z2ppSVBOU3JtVTh3eGhRdXo1YkYvCm41UWZCalJieDdDZGFWdzQ1OHRkaGdRTXpGU0JsdnVSdmZkWGNDbGIwaXBtc2Y3QWFhaGhxcEJva1FNVkZ2VjkKK2ttN3g0cC81QjRucFZSbzd6QWV2ZzJabkNEOHhtRHFWTjY5ZmVsaFZoYUxmakVFNXJtMDBJZTc3TG9ub1grZApIdGlsZGdtd3JPR2REeXhrdk5kb0lyOWFCUVV1WVdZQVpPZXVnMDZURkR1UC90YXhZZTIvRENFSjVLbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">    server: https://192.168.101.201:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJUWg4eEgwNzV6NzR3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TVRBNE16QXdOelV5TlRsYUZ3MHlNakE0TXpBd056VXpNRFJhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTZ6dHA2RTNFenN5cjdQUngKZ2J0bUY1VnJ2cUxjUDJwdlM2Yjd3dk5Oc1BVUkkrZFNpc2RBLzA5OHBxY3JUTnhlSUpoODl2ZmlKeXdCN1lVbApJWG9WZC81bXA3R3F2bS94WWRJUHFNZFJPYmtZc2JrTkVBTFBxUllUZHJ0NnQ1TGJEWktETDd3alI2WGpCK3NxCkpldXV2TGM4UHp5ZDZRZmM3QndLTEdGcWgzRTkxUERzWFNSSnp1Y3NQM1IzOWhCWmd4QXBrWW5KMm13dFNuYmEKbkVSanN1S2ZteWVLcHBzdzRya3kyYUI1VzN3cUpZdE5BbU5LTmZDNi9MU2dLN0FVaThGTFFUYVMyTjBNMGRCOQo0UytnaFJvQkRFMlI2SzB5c0lIakRYRXRLWFpXV0VmQzdlRGo1ZkVRN3pBcGhrS2dKL095bEV1SVFOS0J2OEd5CnpodEFzd0lEQVFBQm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGRDRCUzVwcFp0Ui9tVVdtWG5CU1lvcTJNZkVFTGxEM0JaMQp6d2FFZFFxTWx1SmRWMytKYVlaWEJCWm5wNmgwR0JsSDZ0SGlXVHNxSVpqbGQ2WHRpb3ROWVhTdUtkUEVhYUw1CnA5ZURqdENnNHFsbnc0UHBsNDFTcE9iZFVybzU0cDN3S2lOdUl2ZEw0Yk5TNWhOYWpWdnJqZ0lBV1pBZHBRc1cKYVI0VGcxZWJ0a1RJT0lPcUZjOEV1RkZXa2FQaitlVVNrQzI1c1pUaTZrU0hzNGZleTVROU9YaXp0TGI3TEJUTQpQY2V2cE5NWHBkdFc1bEhCQXFmTmozT3BlV3dxdkozMmpodzFNLzdXcHdCT2p5dHI3amhyT0lWVFFBWHExUVpPCkRpUk5abEZWY3l1eUFKQVBSOGtBdmJka3MrUjlRNWllbzdBY0cxaHRndlA2TEFwTEtQcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNnp0cDZFM0V6c3lyN1BSeGdidG1GNVZydnFMY1AycHZTNmI3d3ZOTnNQVVJJK2RTCmlzZEEvMDk4cHFjclROeGVJSmg4OXZmaUp5d0I3WVVsSVhvVmQvNW1wN0dxdm0veFlkSVBxTWRST2JrWXNia04KRUFMUHFSWVRkcnQ2dDVMYkRaS0RMN3dqUjZYakIrc3FKZXV1dkxjOFB6eWQ2UWZjN0J3S0xHRnFoM0U5MVBEcwpYU1JKenVjc1AzUjM5aEJaZ3hBcGtZbkoybXd0U25iYW5FUmpzdUtmbXllS3Bwc3c0cmt5MmFCNVczd3FKWXROCkFtTktOZkM2L0xTZ0s3QVVpOEZMUVRhUzJOME0wZEI5NFMrZ2hSb0JERTJSNksweXNJSGpEWEV0S1haV1dFZkMKN2VEajVmRVE3ekFwaGtLZ0ovT3lsRXVJUU5LQnY4R3l6aHRBc3dJREFRQUJBb0lCQUR4VU9JMURwTDRFNy9NTgpuaTdQaVJkelV2YkpmZ01sb1BXZUZlT2gwc01YbHhYR05mMHhyUkhOcVFKMHpUNGhKbUxsdU9iK0hCby94eDdMCmp3Sk85VUtaRkdyZHZoU3BVUmJ0Y09hd2Q3eCtKRDh3WHBGRXAwMk9ROStucFlsL09INzZuSHFabmRLNlVNZXYKSUZncFlkODBmMWNZak1jL0pRSEpEekxpcVJlakRYVG5PbFJ0MU5kN0FhOVJhT3JRSjdTUXNadVh6K0Z2MzMreQo3LzhmeFd0SGorS3BaMURTdm1CUGRHWEdGRHJIQy9PZ1dIeWRTTU8xejRneGZlY3lWVWxLNFZIaklyaWFzeE9XCjV4Yk9UYjBwM1R3MWcrNHhlZHBRYitzbUxXR0tpSnlORlpYalRQUm1CbGVWSTNLZ3lJT2l1TkgvSkI3ZUJDUzIKQmRja3JNRUNnWUVBN3NXSjhmN1BEc1ZINmxoS3hVa2FKZkdrRUI5dU9rbjR4L1Yrd2xGSFp4OE5mQnNPcnhzcwpvSXN0OVB0Ym1ZbGtkUmdDbFMwN3BybVlhU2w2SUxJK2RzcGFpZUw3ZzFPZENtWGROeWhaL1NVRzdKcDcwZWd2ClljQmU3YlM4SjI5VFRlS2lRcWNSTGhPMExNUGE5M0pFYU5hdzUzNVRZMWxSWDlIMklKOGh3RWNDZ1lFQS9EUisKZ1pBTFFCTUJzUjBZQnM2eWFwSWxzeWFwcy9vM3JUcGVrcGg4ZmJCRTB1MENLZnJqNmhpME8zazRhbGp0VXV6dgpmbjAzSnkvWTBZMEhlU0M4WEtKVDgzOFB2QjdRODNYcFhhb0NTV1pMZFZlVWxMQ1plWVFsUFUybDU4SFFncEJkCnMyZ3ZFcXhNVXZiaXZFRi8wQ3J6cFp0a1gydk1KTzc3RFduby9qVUNnWUE5a1h4UGhUZlpCQy9XRXF3OUVPdUkKS3pYMTNsVHEvTllFb1ozczkwNWxIZEc1VmJURW5FbzJuNHpiSmRGcDFzNnJqdVJqbVFWUHFYM09hQjZRdmNWegpsaHdnZ0FJQXpCZXJiYmJNR1VDVEVQQW5KSEtYSHJyUkJ1eXplSzRuc1FJWERFQncxV21OcXhFRGxnRXBXektlCm9mVjl5OG91elFJNXBnZEVSQ1JNMHdLQmdRRFc5eGRzNzQzblMwd0IzcjUvN3VYOEdCMnlHWjVFSFY0ZmRNVHYKUnJHMW4rekpxK0pRVGR5OXg5aTNhSmRCYmhLNnYrRlNldi9ya3NqSHMrRk95U3hEK01oOW55dVdPTjM0NWVQSApSZ1UwOHRBV2NGUGdlTFlYOFI2Y3BmWm5GN2ZWMFo5TUw5MFBtWFJrc3JLSHEzeDV2bUoySVlEb0pFV1lwV212CkFUcnFrUUtCZ0h4MlNyeCtVbzZRZmtoeGlUTGxyYWJwRy9GSDFZeFBQeTNkVkNzTDVUVEtYSGM3Z0hFem9xSUkKbnJXUUc2dUJNMDRYRkdLWll1TlZ6OEhTSURvVVlPVkEvOUdya21SZ0tWSThIeWNxT1diVXcrMnMxbWQzWC9GTAphVjNkalk3Wmwwa1Y2SDV1UXVtQlVSWTBZdS9LdW5OY2cybW1BeHN3T1hPUDdlRmN1bG85Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==</span><br></pre></td></tr></table></figure>

<ul>
<li>生成ca.crt</li>
</ul>
<p>获取~/.kube/config中certificate-authority-data的内容并转化成base64 encoded文件，生成：ca.crt</p>
<blockquote>
<p>命令：echo xxxxxxxxx | base64 -d &gt;ca.crt</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master cert]# echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EZ3pNREEzTlRJMU9Wb1hEVE14TURneU9EQTNOVEkxT1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzlLCnNBNnhZQ24zOVBZeitKWjNLd2tRYW00RytwSkdCTHRyRWFGVzYwam1rQkxCUVZCanJNZ2hVVWxjYUwwWTNybVAKbkpPbWsyRm1VSzFvZW01d21YQndERFppc08wT011bVI2QlJ4UWF5WlJoMW5GQnNWSHFFdXdFY3ROZkFpTThQagpUOVBQclBHbUN0Tm1qSnB6bDVNTnBaQ0htL2hHMUpaK3hlakhzblJDR3NzSzNFMyt6RFJmVk5qc1Vqamd3ME9FCm9vcGRlYUpRTlVZR01CazFJSDFoYW9wZDBFcjVTUDI3R1pzSXZnTFhmRTUvT2tWckN5WEk2UU9EM29LbytJaW8KL0ExNkg2QXZNR21PZXd5R3RzSEQ0YXlhbE5vQVd0cSt2SWx1S1A4ZTZkaC9jcStjb3llYmk1NTZiNWRRK3dIdwpyR0dFK1laeGVWNGxBR3dRMlhVQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHZGQ0VGx5NDJGclZPOUw5NnV4Znc4Yk54a1MKS2xXdE9EdWpaaUtyMWIyLzluYTVnTlo5cmk0ekYrQ0JhdDVRcURKSmNmQmxPaXAzWm9UWkZnVnJOUTVhYTJGTQpPLzBkRTJ0WVY4MDUxOUFCVXBkWURNek5zVEwzemI3b1dxN0ErQkw1VjF6Z2ppSVBOU3JtVTh3eGhRdXo1YkYvCm41UWZCalJieDdDZGFWdzQ1OHRkaGdRTXpGU0JsdnVSdmZkWGNDbGIwaXBtc2Y3QWFhaGhxcEJva1FNVkZ2VjkKK2ttN3g0cC81QjRucFZSbzd6QWV2ZzJabkNEOHhtRHFWTjY5ZmVsaFZoYUxmakVFNXJtMDBJZTc3TG9ub1grZApIdGlsZGdtd3JPR2REeXhrdk5kb0lyOWFCUVV1WVdZQVpPZXVnMDZURkR1UC90YXhZZTIvRENFSjVLbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo= | base64 -d &gt;ca.crt</span><br></pre></td></tr></table></figure>

<ul>
<li>生成client.crt</li>
</ul>
<p>获取~/.kube/config中client-certificate-data的内容并转化成base64 encoded文件，生成：client.crt</p>
<blockquote>
<p>命令：echo xxxxxxxxx | base64 -d &gt;client.crt</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master cert]# echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJUWg4eEgwNzV6NzR3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TVRBNE16QXdOelV5TlRsYUZ3MHlNakE0TXpBd056VXpNRFJhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTZ6dHA2RTNFenN5cjdQUngKZ2J0bUY1VnJ2cUxjUDJwdlM2Yjd3dk5Oc1BVUkkrZFNpc2RBLzA5OHBxY3JUTnhlSUpoODl2ZmlKeXdCN1lVbApJWG9WZC81bXA3R3F2bS94WWRJUHFNZFJPYmtZc2JrTkVBTFBxUllUZHJ0NnQ1TGJEWktETDd3alI2WGpCK3NxCkpldXV2TGM4UHp5ZDZRZmM3QndLTEdGcWgzRTkxUERzWFNSSnp1Y3NQM1IzOWhCWmd4QXBrWW5KMm13dFNuYmEKbkVSanN1S2ZteWVLcHBzdzRya3kyYUI1VzN3cUpZdE5BbU5LTmZDNi9MU2dLN0FVaThGTFFUYVMyTjBNMGRCOQo0UytnaFJvQkRFMlI2SzB5c0lIakRYRXRLWFpXV0VmQzdlRGo1ZkVRN3pBcGhrS2dKL095bEV1SVFOS0J2OEd5CnpodEFzd0lEQVFBQm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGRDRCUzVwcFp0Ui9tVVdtWG5CU1lvcTJNZkVFTGxEM0JaMQp6d2FFZFFxTWx1SmRWMytKYVlaWEJCWm5wNmgwR0JsSDZ0SGlXVHNxSVpqbGQ2WHRpb3ROWVhTdUtkUEVhYUw1CnA5ZURqdENnNHFsbnc0UHBsNDFTcE9iZFVybzU0cDN3S2lOdUl2ZEw0Yk5TNWhOYWpWdnJqZ0lBV1pBZHBRc1cKYVI0VGcxZWJ0a1RJT0lPcUZjOEV1RkZXa2FQaitlVVNrQzI1c1pUaTZrU0hzNGZleTVROU9YaXp0TGI3TEJUTQpQY2V2cE5NWHBkdFc1bEhCQXFmTmozT3BlV3dxdkozMmpodzFNLzdXcHdCT2p5dHI3amhyT0lWVFFBWHExUVpPCkRpUk5abEZWY3l1eUFKQVBSOGtBdmJka3MrUjlRNWllbzdBY0cxaHRndlA2TEFwTEtQcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo= | base64 -d &gt;client.crt</span><br></pre></td></tr></table></figure>

<ul>
<li>生成client.key</li>
</ul>
<p>获取~/.kube/config中client-key-data的内容并转化成base64 encoded文件，生成：client.key</p>
<blockquote>
<p>命令：echo xxxxxxxxx | base64 -d &gt;client.key</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master cert]# echo LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNnp0cDZFM0V6c3lyN1BSeGdidG1GNVZydnFMY1AycHZTNmI3d3ZOTnNQVVJJK2RTCmlzZEEvMDk4cHFjclROeGVJSmg4OXZmaUp5d0I3WVVsSVhvVmQvNW1wN0dxdm0veFlkSVBxTWRST2JrWXNia04KRUFMUHFSWVRkcnQ2dDVMYkRaS0RMN3dqUjZYakIrc3FKZXV1dkxjOFB6eWQ2UWZjN0J3S0xHRnFoM0U5MVBEcwpYU1JKenVjc1AzUjM5aEJaZ3hBcGtZbkoybXd0U25iYW5FUmpzdUtmbXllS3Bwc3c0cmt5MmFCNVczd3FKWXROCkFtTktOZkM2L0xTZ0s3QVVpOEZMUVRhUzJOME0wZEI5NFMrZ2hSb0JERTJSNksweXNJSGpEWEV0S1haV1dFZkMKN2VEajVmRVE3ekFwaGtLZ0ovT3lsRXVJUU5LQnY4R3l6aHRBc3dJREFRQUJBb0lCQUR4VU9JMURwTDRFNy9NTgpuaTdQaVJkelV2YkpmZ01sb1BXZUZlT2gwc01YbHhYR05mMHhyUkhOcVFKMHpUNGhKbUxsdU9iK0hCby94eDdMCmp3Sk85VUtaRkdyZHZoU3BVUmJ0Y09hd2Q3eCtKRDh3WHBGRXAwMk9ROStucFlsL09INzZuSHFabmRLNlVNZXYKSUZncFlkODBmMWNZak1jL0pRSEpEekxpcVJlakRYVG5PbFJ0MU5kN0FhOVJhT3JRSjdTUXNadVh6K0Z2MzMreQo3LzhmeFd0SGorS3BaMURTdm1CUGRHWEdGRHJIQy9PZ1dIeWRTTU8xejRneGZlY3lWVWxLNFZIaklyaWFzeE9XCjV4Yk9UYjBwM1R3MWcrNHhlZHBRYitzbUxXR0tpSnlORlpYalRQUm1CbGVWSTNLZ3lJT2l1TkgvSkI3ZUJDUzIKQmRja3JNRUNnWUVBN3NXSjhmN1BEc1ZINmxoS3hVa2FKZkdrRUI5dU9rbjR4L1Yrd2xGSFp4OE5mQnNPcnhzcwpvSXN0OVB0Ym1ZbGtkUmdDbFMwN3BybVlhU2w2SUxJK2RzcGFpZUw3ZzFPZENtWGROeWhaL1NVRzdKcDcwZWd2ClljQmU3YlM4SjI5VFRlS2lRcWNSTGhPMExNUGE5M0pFYU5hdzUzNVRZMWxSWDlIMklKOGh3RWNDZ1lFQS9EUisKZ1pBTFFCTUJzUjBZQnM2eWFwSWxzeWFwcy9vM3JUcGVrcGg4ZmJCRTB1MENLZnJqNmhpME8zazRhbGp0VXV6dgpmbjAzSnkvWTBZMEhlU0M4WEtKVDgzOFB2QjdRODNYcFhhb0NTV1pMZFZlVWxMQ1plWVFsUFUybDU4SFFncEJkCnMyZ3ZFcXhNVXZiaXZFRi8wQ3J6cFp0a1gydk1KTzc3RFduby9qVUNnWUE5a1h4UGhUZlpCQy9XRXF3OUVPdUkKS3pYMTNsVHEvTllFb1ozczkwNWxIZEc1VmJURW5FbzJuNHpiSmRGcDFzNnJqdVJqbVFWUHFYM09hQjZRdmNWegpsaHdnZ0FJQXpCZXJiYmJNR1VDVEVQQW5KSEtYSHJyUkJ1eXplSzRuc1FJWERFQncxV21OcXhFRGxnRXBXektlCm9mVjl5OG91elFJNXBnZEVSQ1JNMHdLQmdRRFc5eGRzNzQzblMwd0IzcjUvN3VYOEdCMnlHWjVFSFY0ZmRNVHYKUnJHMW4rekpxK0pRVGR5OXg5aTNhSmRCYmhLNnYrRlNldi9ya3NqSHMrRk95U3hEK01oOW55dVdPTjM0NWVQSApSZ1UwOHRBV2NGUGdlTFlYOFI2Y3BmWm5GN2ZWMFo5TUw5MFBtWFJrc3JLSHEzeDV2bUoySVlEb0pFV1lwV212CkFUcnFrUUtCZ0h4MlNyeCtVbzZRZmtoeGlUTGxyYWJwRy9GSDFZeFBQeTNkVkNzTDVUVEtYSGM3Z0hFem9xSUkKbnJXUUc2dUJNMDRYRkdLWll1TlZ6OEhTSURvVVlPVkEvOUdya21SZ0tWSThIeWNxT1diVXcrMnMxbWQzWC9GTAphVjNkalk3Wmwwa1Y2SDV1UXVtQlVSWTBZdS9LdW5OY2cybW1BeHN3T1hPUDdlRmN1bG85Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg== | base64 -d &gt;client.key</span><br></pre></td></tr></table></figure>

<p>查看生成的证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master cert]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root 1025 Oct 15 14:12 ca.crt</span><br><span class="line">-rw-r--r-- 1 root root 1082 Oct 15 14:13 client.crt</span><br><span class="line">-rw-r--r-- 1 root root 1675 Oct 15 14:15 client.key</span><br></pre></td></tr></table></figure>

<p>生成Client P12认证文件cert.pfx，并下载至本地（注意自己生成证书的路径）</p>
<blockquote>
<p>命令：openssl pkcs12 -export -out /root/cert/cert.pfx -inkey /root/cert/client.key -in /root/cert/client.crt -certfile /root/cert/ca.crt</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master cert]# openssl pkcs12 -export -out /root/cert/cert.pfx -inkey /root/cert/client.key -in /root/cert/client.crt -certfile /root/cert/ca.crt</span><br><span class="line">Enter Export Password:</span><br><span class="line">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure>

<p><strong>注：自定义一个密码并牢记：123456</strong></p>
<p>查看证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master cert]# ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root 1025 Oct 15 14:12 ca.crt</span><br><span class="line">-rw------- 1 root root 3117 Oct 15 14:27 cert.pfx</span><br><span class="line">-rw-r--r-- 1 root root 1082 Oct 15 14:13 client.crt</span><br><span class="line">-rw-r--r-- 1 root root 1675 Oct 15 14:15 client.key</span><br></pre></td></tr></table></figure>

<p>将cert.pfx下载到本地备用。</p>
<h2 id="在Jenkins云kubernetes中添加凭证">1.3. 在Jenkins云kubernetes中添加凭证</h2><blockquote>
<p>添加凭证-》首先密码填写123456-》类型-》Certificate-》Upload PKCS#12 certificate-》上传证书-》选择文件-》cert-》打开-》上传-》添加-》选择凭证</p>
</blockquote>
<p><strong>注：Upload certificate上次刚生成并下载至本地的cert.pfx文件，Password值添加生成cert.pfx文件时输入的密钥</strong></p>
<p>ID和描述自己随便填写即可，我这里都写了default-cluster</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110151439009.png"></p>
<p>所有配置完成后点击确定即可看到我们配置的凭证</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110151447817.png"></p>
<h2 id="配置kubernetes云">1.4. 配置kubernetes云</h2><p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110151501232.png"></p>
<p><strong>配置参数</strong></p>
<ul>
<li><p>名称：kubernetes</p>
</li>
<li><p>Kubernetes 地址：<a href="https://192.168.101.201:6443；（Kubernetes">https://192.168.101.201:6443；（Kubernetes</a> 地址可以通过kuberctl cluster-info获取）</p>
</li>
<li><p>Kubernetes 服务证书 key：将前面生成的证书文件内容写入（ca.crt)；（证书key就是前面生成的ca.crt)</p>
</li>
<li><p>Kubernetes 命名空间：kubernetes；（~/.kube/config中的 cluster: kubernetes）</p>
</li>
<li><p>凭据：CN=…… ；（选择刚才添加的凭据即可）</p>
</li>
<li><p>jenkins地址：<a href="http://192.168.101.234;/">http://192.168.101.234；</a></p>
</li>
<li><p>其它配置默认即可</p>
</li>
</ul>
<p>所有配置填写完成后点击连接测试，出现Connected to Kubernetes 1.18表示成功。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群动态存储管理GlusterFS</title>
    <url>/p/22918.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>k8s部署eureka集群</title>
    <url>/p/35694.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="k8s部署eureka集群">1. k8s部署eureka集群</h1><p>主要是用到了StatefulSet和headless service这两个k8s对象</p>
<h2 id="StatefulSet">1.1. StatefulSet</h2><p>StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括：</p>
<p>1.稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现；</p>
<p>2.稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现；</p>
<p>3.有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现；</p>
<p>4.有序收缩，有序删除（即从N-1到0）；</p>
<p>StatefulSet中每个Pod的DNS格式为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">statefulSetName-&#123;<span class="number">0.</span>.N<span class="number">-1</span>&#125;.serviceName.<span class="keyword">namespace</span>.svc.cluster.local</span><br></pre></td></tr></table></figure>

<blockquote>
<p>serviceName为Headless Service的名字<br>0..N-1为Pod所在的序号，从0开始到N-1<br>statefulSetName为StatefulSet的名字<br>namespace为服务所在的namespace，Headless Service和StatefulSet必须在相同的namespace<br>cluster.local为Cluster Domain</p>
</blockquote>
<h2 id="Headless-Service">1.2. Headless Service</h2><p>Headless Service 和普通service的一个显著的区别是，Headless Service的对应的每一个Endpoints，即每一个Pod，都会有对应的DNS域名<br> 例如：我们可以用过这种域名来访问某个具体的pod：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">statefulSetName-<span class="number">0</span><span class="selector-class">.serviceName</span><span class="selector-class">.namespace</span><span class="selector-class">.svc</span><span class="selector-class">.cluster</span><span class="selector-class">.local</span></span><br></pre></td></tr></table></figure>

<p>在实际使用中，将service的clusterIP设置成None，就表明这个service是一个Headless Service。</p>
<h2 id="StatefulSet和Headless-Service的结合">1.3. StatefulSet和Headless Service的结合</h2><p>通过 StatefulSet，我们得到了一些列pod，每个pod的name为statefulSetName-{0..N-1}， 加入我们创建了一个名称叫eureka的StatefulSet，并且设置replicas =3，那么部署到k8s后，k8s会为我们生成三个名称依次为eureka-0，eureka-1，eureka-2的pod。<br> 通过Headless Service，我们可以通过pod名称来访问某个pod，</p>
<p>例如，我们在namespace=test的命名空间下创建了一个名称为register-server的service，并且关联了之前StatefulSet创建的pod，那么我们可以在集群内任意地方通过eureka-0.register-server.test.svc.cluster.local这个域名访问到eureka-0这个pod。</p>
<h3 id="搭建：">1.3.1. 搭建：</h3><p>有了前面的基础，现在部署eureka集群的方式就逐渐清晰了。</p>
<p>首先明确部署eureka的关键点：需要让每个eureka注册到另外的eureka上。<br> 也就是eureka.client.serviceUrl.defaultZone这个配置，是一组eureka的地址。<br> 通过StatefulSet，我们可以明确知道生成的每个eureka的名称，<br> 通过Headless Service，我们又可以访问到每个eureka，所以eureka.client.serviceUrl.defaultZone的值就是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;http://eureka-0.register-server:8000/eureka/,http://eureka-1.register-server:8000/eureka/,http://eureka-2.register-server:8000/eureka/&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于这三个pod在同一个命名空间内，可以省略.namespace.svc.cluster.local</p>
</blockquote>
<h2 id="创建StatefulSet-yaml">1.4. 创建StatefulSet.yaml</h2><p>vim eureka-StatefulSet.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  namespace: wise</span><br><span class="line">  name: register-server</span><br><span class="line">  labels:</span><br><span class="line">    service: register-server</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  serviceName: register-server</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      service: register-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        service: register-server</span><br><span class="line">      annotations:</span><br><span class="line">        service: register-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: register-server</span><br><span class="line">          image: codewjy/eureka:0.1.0</span><br><span class="line">          imagePullPolicy: Always</span><br><span class="line">          env:</span><br><span class="line">          - name: MY_POD_NAME</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                fieldPath: metadata.name</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 8000</span><br><span class="line">              protocol: TCP</span><br><span class="line">          readinessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /actuator/health</span><br><span class="line">              port: 8001</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            initialDelaySeconds: 60</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          resources:</span><br><span class="line">            limits:</span><br><span class="line">              # cpu: 100m</span><br><span class="line">              memory: 1.7Gi</span><br><span class="line">            requests:</span><br><span class="line">                # cpu: 100m</span><br><span class="line">              memory: 1.2Gi</span><br><span class="line">          volumeMounts:</span><br><span class="line">          - mountPath: /Charts</span><br><span class="line">            name: data</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">  podManagementPolicy: &quot;Parallel&quot;</span><br></pre></td></tr></table></figure>

<p>创建并查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master eureka]# kubectl apply -f StatefulSet.yaml </span><br><span class="line">statefulset.apps/register-server created</span><br><span class="line"></span><br><span class="line">[root@k8s-master eureka]# kubectl get pods -n wise|grep register-server</span><br><span class="line">register-server-0                   1/1     Running   0          29m</span><br><span class="line">register-server-1                   1/1     Running   0          29m</span><br><span class="line">register-server-2                   1/1     Running   0          29m</span><br></pre></td></tr></table></figure>

<h2 id="创建service">1.5. 创建service</h2><p>vim eureka-service.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  namespace: wise</span><br><span class="line">  name: register-server</span><br><span class="line">  labels:</span><br><span class="line">    service: register-server</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">    - port: 8000</span><br><span class="line">      targetPort: http</span><br><span class="line">      protocol: TCP</span><br><span class="line">      name: http</span><br><span class="line">  selector:</span><br><span class="line">    service: register-server</span><br></pre></td></tr></table></figure>

<p>创建并查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master eureka]# kubectl apply -f service.yaml </span><br><span class="line">service/register-server created</span><br><span class="line"></span><br><span class="line">[root@k8s-master eureka]# kubectl get pods -n wise|grep register-server</span><br><span class="line">register-server-0                   1/1     Running   0          29m</span><br><span class="line">register-server-1                   1/1     Running   0          29m</span><br><span class="line">register-server-2                   1/1     Running   0          29m</span><br><span class="line"></span><br><span class="line">[root@k8s-master eureka]# kubectl get svc -n wise|grep register-server</span><br><span class="line">register-server   ClusterIP   None             &lt;none&gt;        8000/TCP       30m</span><br></pre></td></tr></table></figure>

<h2 id="创建ingress">1.6. 创建ingress</h2><p>vim eureka-ingress.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">  name: register-server</span><br><span class="line">  namespace: wise</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik-v2.3</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: eureka.heyonggs.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: register-server</span><br><span class="line">          servicePort: 8000</span><br></pre></td></tr></table></figure>

<p>创建并查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master eureka]# kubectl apply -f ingress.yaml </span><br><span class="line">ingress.extensions/register-server created</span><br><span class="line"></span><br><span class="line">[root@k8s-master eureka]# kubectl get ingress -n wise|grep register-server</span><br><span class="line">register-server   &lt;none&gt;   eureka.heyonggs.com             80      21m</span><br></pre></td></tr></table></figure>

<h2 id="访问">1.7. 访问</h2><p>先做域名解析在访问查看集群：http://域名</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/eureka/202110121114492.png"></p>
<p><strong>参考：</strong></p>
<p><a href="https://www.jianshu.com/p/a3829851a97d">https://www.jianshu.com/p/a3829851a97d</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s中部署ingress-nginx</title>
    <url>/p/58551.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="ingress-nginx部署">1. ingress-nginx部署</h1><p>Ingress 资源随着时间的推移而发展。他们从 apiVersion: extensions/v1beta1 开始，然后转移到 apiVersion:network.k8s.io/v1beta1，最近又转移到 apiVersion:networks.k8s.io/v1。</p>
<p>以下是 Kubernetes 支持这些 Ingress 版本的方式：</p>
<ul>
<li>在 Kubernetes 1.19 之前，仅支持 v1beta1 Ingress 资源 </li>
<li>从 Kubernetes 1.19 到 1.21，同时支持 v1beta1 和 v1 Ingress 资源 </li>
<li>在 Kubernetes 1.22 及更高版本中，仅支持 v1 Ingress 资源</li>
</ul>
<p>以下是 NGINX Ingress Controller 支持这些 Ingress 版本的方式： </p>
<ul>
<li>在 1.0 版之前，仅支持 v1beta1 Ingress 资源 </li>
<li>在 1.0 及更高版本中，仅支持 v1 Ingress 资源</li>
</ul>
<p>因此，如果您运行 Kubernetes 1.19 或更高版本，您应该能够使用最新版本的 NGINX Ingress Controller；但是如果您使用的是旧版本的 Kubernetes（1.18 或更早版本），则必须使用 NGINX Ingress Controller 的 0.X 版（例如 0.49 版）。</p>
<p>NGINX Ingress Controller 的 Helm chart 在chart的版本 4 中切换到版本 1。换句话说，如果您运行的是 Kubernetes 1.19 或更早版本，则应使用chart的 3.X 版本（这可以通过在 helm install 命令中添加 –version=’&lt;4’ 来完成）。</p>
<h2 id="使用helm安装">1.1. 使用helm安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm upgrade --install ingress-nginx ingress-nginx \</span><br><span class="line">  --repo https://kubernetes.github.io/ingress-nginx \</span><br><span class="line">  --namespace ingress-nginx --create-namespace</span><br></pre></td></tr></table></figure>

<p>它将在 ingress-nginx 命名空间中安装控制器，如果该命名空间尚不存在，则创建该命名空间。</p>
<p>这个命令是幂等的： - 如果入口控制器没有安装，它会安装它， - 如果入口控制器已经安装，它会升级它。</p>
<p>如果报错：Error: failed pre-install: timed out waiting for the condition，可按步骤分开部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span><br><span class="line">helm pull ingress-nginx/ingress-nginx</span><br><span class="line">tar xf ingress-nginx-4.0.9.tgz</span><br><span class="line">cd ingress-nginx/</span><br></pre></td></tr></table></figure>

<p>修改values.yaml配置，这里我使用DaemonSet部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">controller:</span><br><span class="line">  name: controller</span><br><span class="line">  image:</span><br><span class="line">    registry: k8s.gcr.io</span><br><span class="line">    image: ingress-nginx/controller</span><br><span class="line">    tag: &quot;v1.0.5&quot;</span><br><span class="line">    digest: sha256:55a1fcda5b7657c372515fe402c3e39ad93aa59f6e4378e82acd99912fe6028d</span><br><span class="line">  dnsPolicy: ClusterFirst</span><br><span class="line">  hostNetwork: false</span><br><span class="line">  kind: Deployment</span><br><span class="line">  nodeSelector:</span><br><span class="line">    kubernetes.io/os: linux</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  patch:</span><br><span class="line">    enabled: true</span><br><span class="line">    image:</span><br><span class="line">      registry: k8s.gcr.io</span><br><span class="line">      image: ingress-nginx/kube-webhook-certgen</span><br><span class="line">      tag: v1.1.1</span><br><span class="line">      digest: sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">修改为</span><br><span class="line">controller:</span><br><span class="line">  name: controller</span><br><span class="line">  image:</span><br><span class="line">    registry: heyuze</span><br><span class="line">    image: ingress-nginx-controller</span><br><span class="line">    tag: &quot;v1.0.5&quot;</span><br><span class="line">  dnsPolicy: ClusterFirstWithHostNet</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  kind: DaemonSet</span><br><span class="line">  nodeSelector:</span><br><span class="line">    kubernetes.io/os: linux</span><br><span class="line">    ingress: &quot;true&quot;</span><br><span class="line">  type: ClustertIP</span><br><span class="line">  patch:</span><br><span class="line">    enabled: true</span><br><span class="line">    image:</span><br><span class="line">      registry: heyuze</span><br><span class="line">      image: kube-webhook-certgen</span><br><span class="line">      tag: v1.1.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：删除digest，</p>
</blockquote>
<p>部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create ns ingress-nginx</span><br><span class="line"></span><br><span class="line"># 在部署的节点打个label</span><br><span class="line">kubectl label node k8s-master ingress=true</span><br><span class="line">kubectl label node k8s-node1 ingress=true</span><br><span class="line"></span><br><span class="line">helm install ingress-nginx -n ingress-nginx .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩容ingress节点：kubectl label nodes k8s-node1 ingress=true</p>
<p>缩容ingress节点：kubectl label nodes k8s-node1 ingress-</p>
<p>查看所有节点labels：kubectl get pod -A –show-labels</p>
</blockquote>
<p>查看部署的ingress</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ingress-nginx]# kubectl get pod -n ingress-nginx -o wide</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE     IP                NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx-controller-hw5pw   1/1     Running   0          2m29s   192.168.101.202   k8s-node1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>注意：这里我在master节点上也打了标签，但是没有部署；原因很简单，我的master节点已经有了污点的标签，从亲和性上就已经不再容忍任何pod运行，所以只能部署到node节点。</p>
<h2 id="使用yaml文件安装">1.2. 使用yaml文件安装</h2><p>如果您更喜欢使用 YAML 清单，则可以运行以下命令：</p>
<p>在终端上运行命令之前，请确保在 Docker 设置中启用了 Kubernetes</p>
<p>其中 YAML 清单是使用 helm 模板生成的，因此您最终将获得几乎与使用 Helm 安装控制器相同的资源。</p>
<p>下载yaml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.5/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>

<p>修改yaml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># containers镜像地址</span><br><span class="line">heyuze/ingress-nginx-controller:v1.0.5</span><br><span class="line"></span><br><span class="line"># kube-webhook-certgen镜像地址</span><br><span class="line">heyuze/ingress-nginx/kube-webhook-certgen:v1.1.1</span><br></pre></td></tr></table></figure>

<p>应用yaml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl apply -f deploy.yaml </span><br><span class="line">namespace/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx created</span><br><span class="line">configmap/ingress-nginx-controller created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">service/ingress-nginx-controller-admission created</span><br><span class="line">service/ingress-nginx-controller created</span><br><span class="line">deployment.apps/ingress-nginx-controller created</span><br><span class="line">ingressclass.networking.k8s.io/nginx created</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br><span class="line">serviceaccount/ingress-nginx-admission created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">job.batch/ingress-nginx-admission-create created</span><br><span class="line">job.batch/ingress-nginx-admission-patch created</span><br></pre></td></tr></table></figure>

<p>如果您运行的是旧版本的 Kubernetes（1.18 或更早版本），请阅读<a href="https://kubernetes.github.io/ingress-nginx/deploy/#running-on-Kubernetes-versions-older-than-1.19">本段</a>以获取具体说明。</p>
<h2 id="nginx-配置">1.3. nginx 配置</h2><p>自定义 NGINX 有以下三种方式：<br><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/">ConfigMap</a>：使用 Configmap 在 NGINX 中设置全局配置。<br><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/">Annotations</a>：如果您想要特定 Ingress 规则的特定配置，请使用此选项。<br><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/custom-template/">Custom template</a>：当需要更具体的设置时，如 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache">open_file_cache</a>，将监听选项调整为 rcvbuf，或者当无法通过 ConfigMap 更改配置时。</p>
<h2 id="案例测试">1.4. 案例测试</h2><p>创建deployment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建模板</span><br><span class="line">kubectl create deployment nginx --image=nginx --dry-run -o yaml &gt; nginx-deploy.yaml</span><br><span class="line"></span><br><span class="line"># 查看deployment内容</span><br><span class="line">[root@k8s-master ~]# cat nginx-deploy.yaml </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  strategy: &#123;&#125;</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      creationTimestamp: null</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: nginx</span><br><span class="line">        name: nginx</span><br><span class="line">        resources: &#123;&#125;</span><br><span class="line">status: &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 应用deployment并查看</span><br><span class="line">[root@k8s-master ~]# kubectl apply -f nginx-deploy.yaml </span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-6799fc88d8-hfhwt   1/1     Running   0          3m40s</span><br></pre></td></tr></table></figure>

<p>创建service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建模板</span><br><span class="line">kubectl expose deployment nginx --port=8000 --target-port=80 --type=ClusterIP  --dry-run -o yaml &gt; nginx-svc.yaml</span><br><span class="line"></span><br><span class="line"># 查看模板</span><br><span class="line">[root@k8s-master ~]# cat nginx-svc.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8000</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  type: ClusterIP</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 创建service并查看</span><br><span class="line">[root@k8s-master ~]# kubectl apply -f nginx-svc.yaml </span><br><span class="line">service/nginx created</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# kubectl get svc|grep nginx</span><br><span class="line">nginx        ClusterIP   10.103.198.110   &lt;none&gt;        8000/TCP   19s</span><br></pre></td></tr></table></figure>

<p>测试访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# curl 10.103.198.110:8000</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>创建ingress</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># [root@k8s-master ~]# vim nginx-ingress.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/ingress.class: &#x27;nginx&#x27;</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - host: test.kubelet.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx</span><br><span class="line">            port:</span><br><span class="line">              number: 8000</span><br></pre></td></tr></table></figure>

<p>访问</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202111221601300.png"></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm方式部署k8sV1.22.0版本</title>
    <url>/p/20016.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="kubeadm方式部署k8sV1-22-0集群版本">1. kubeadm方式部署k8sV1.22.0集群版本</h1><p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p>
<p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个 Master 节点</span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"># 将一个 Node 节点加入到当前集群中</span><br><span class="line">$ kubeadm join &lt;Master节点的IP和端口 &gt;</span><br></pre></td></tr></table></figure>

<h2 id="安装要求">1.1. 安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p>
<ul>
<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>
<li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li>
<li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li>
<li>禁止swap分区</li>
</ul>
<h2 id="准备环境">1.2. 准备环境</h2><table>
<thead>
<tr>
<th>角色</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-master</td>
<td>192.168.101.201</td>
</tr>
<tr>
<td>k8s-node1</td>
<td>192.168.101.202</td>
</tr>
<tr>
<td>k8s-node2</td>
<td>192.168.101.203</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 关闭selinux</span><br><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久</span><br><span class="line">setenforce 0  # 临时</span><br><span class="line"></span><br><span class="line"># 关闭swap</span><br><span class="line">swapoff -a  # 临时</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab    # 永久</span><br><span class="line"></span><br><span class="line"># 根据规划设置主机名</span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"># 在master添加hosts</span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.101.201 k8s-master</span><br><span class="line">192.168.101.202 k8s-node1</span><br><span class="line">192.168.101.203 k8s-node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 将桥接的IPv4流量传递到iptables的链</span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system  # 生效</span><br><span class="line"></span><br><span class="line"># 时间同步</span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>

<h2 id="所有节点安装Docker-kubeadm-kubelet">1.3. 所有节点安装Docker/kubeadm/kubelet</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>
<h3 id="安装Docker">1.3.1. 安装Docker</h3><blockquote>
<p>下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz">https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz</a> </p>
</blockquote>
<p>以下在所有节点操作。这里采用二进制安装，用yum安装也一样。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz </span><br></pre></td></tr></table></figure>

<p> 解压二进制包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf docker-19.03.9.tgz</span><br><span class="line">mv docker/* /usr/bin</span><br></pre></td></tr></table></figure>

<p>systemd管理docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>配置docker镜像加速地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/docker</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://ms80kkz7.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;harbor.xxx.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li>registry-mirrors： 阿里云镜像加速器</li>
<li>exec-opts： 修改docker的cgroup和k8s的一致</li>
<li>insecure-registries：harbor地址</li>
</ul>
<p>启动并设置开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>3.2 添加阿里云YUM软件源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="安装kubeadm，kubelet和kubectl">1.4. 安装kubeadm，kubelet和kubectl</h2><p>由于版本更新频繁，这里指定版本号部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install -y kubelet-1.22.0 kubeadm-1.22.0 kubectl-1.22.0</span><br><span class="line">$ systemctl enable kubelet</span><br></pre></td></tr></table></figure>

<h2 id="部署Kubernetes-Master">1.5. 部署Kubernetes Master</h2><p>在192.168.101.201（Master）执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.101.201 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.22.0 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>

<p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p>
<p>使用kubectl工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure>

<h2 id="加入Kubernetes-Node">1.6. 加入Kubernetes Node</h2><p>在192.168.101.202/203（Node）执行。</p>
<p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubeadm join 192.168.101.201:6443 --token aw0wah.wf0ucozx0syqa58z     --discovery-token-ca-cert-hash sha256:5745909fd8cba0a6643060d19fb6b45a39b718cb39572727198f6ca0218ffe0b</span><br></pre></td></tr></table></figure>

<p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h2 id="部署CNI网络插件">1.7. 部署CNI网络插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>默认镜像地址无法访问，sed命令修改为docker hub镜像仓库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-amd64-2pc95   1/1     Running   0          72s</span><br></pre></td></tr></table></figure>

<h2 id="测试kubernetes集群">1.8. 测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://NodeIP:Port">http://NodeIP:Port</a>  </p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署nacos集群</title>
    <url>/p/20278.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="k8s部署nacos集群">1. k8s部署nacos集群</h1><h2 id="Nacos集群部署的安装包准备">1.1. Nacos集群部署的安装包准备</h2><p>下载nacos安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master data]# pwd</span><br><span class="line">/data/nacos-server-2.0.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载安装包</span></span><br><span class="line">[root@k8s-master data]# wget https://github.com/alibaba/nacos/releases/download/2.0.2/nacos-server-2.0.2.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">[root@k8s-master data]# unzip nacos-server-2.0.2.zip</span><br><span class="line">[root@k8s-master data]# mv nacos nacos-server-2.0.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入配置文件目录</span></span><br><span class="line">[root@k8s-master conf]# cd nacos-server-2.0.2/nacos/conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份配置文件</span></span><br><span class="line">[root@k8s-master conf]# mv application.properties application.properties.bak</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<p>[root@k8s-master conf]# cat application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spring</span></span><br><span class="line"><span class="meta">server.servlet.contextPath</span>=<span class="string">$&#123;SERVER_SERVLET_CONTEXTPATH:/nacos&#125;</span></span><br><span class="line"><span class="meta">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">$&#123;NACOS_SERVER_PORT:8848&#125;</span></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">$&#123;SPRING_DATASOURCE_PLATFORM:&quot;&quot;&#125;</span></span><br><span class="line"><span class="meta">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="meta">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="meta">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">$&#123;MYSQL_DATABASE_NUM:1&#125;</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://$&#123;MYSQL_SERVICE_HOST&#125;:$&#123;MYSQL_SERVICE_PORT:3306&#125;/$&#123;MYSQL_SERVICE_DB_NAME&#125;?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">$&#123;MYSQL_SERVICE_USER&#125;</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">$&#123;MYSQL_SERVICE_PASSWORD&#125;</span></span><br><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; is supported:</span></span><br><span class="line"><span class="meta">nacos.core.auth.system.type</span>=<span class="string">$&#123;NACOS_AUTH_SYSTEM_TYPE:nacos&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line"><span class="meta">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">$&#123;NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line"><span class="meta">nacos.core.auth.default.token.secret.key</span>=<span class="string">$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line"><span class="meta">nacos.core.auth.caching.enabled</span>=<span class="string">$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">server.tomcat.accesslog.enabled</span>=<span class="string">$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D</span></span><br><span class="line"><span class="comment"># default current work dir</span></span><br><span class="line"><span class="meta">server.tomcat.basedir</span>=<span class="string"></span></span><br><span class="line"><span class="comment">## spring security config</span></span><br><span class="line"><span class="comment">### turn off security</span></span><br><span class="line"><span class="meta">nacos.security.ignore.urls</span>=<span class="string">/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="comment"># metrics for elastic search</span></span><br><span class="line"><span class="meta">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="meta">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="meta">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>添加docker-startup.sh脚本</p>
<p>容器里nacos集群模式的启动脚本必须使用docker-startup.sh，不能使用startup.sh启动脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master conf]# cd ../bin/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@k8s-master bin]# cat docker-startup.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Licensed under the Apache License, Version 2.0 (the <span class="string">&quot;License&quot;</span>);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you may not use this file except <span class="keyword">in</span> compliance with the License.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> limitations under the License.</span></span><br><span class="line">set -x</span><br><span class="line">export DEFAULT_SEARCH_LOCATIONS=&quot;classpath:/,classpath:/config/,file:./,file:./config/&quot;</span><br><span class="line">export CUSTOM_SEARCH_LOCATIONS=$&#123;DEFAULT_SEARCH_LOCATIONS&#125;,file:$&#123;BASE_DIR&#125;/conf/,$&#123;BASE_DIR&#125;/init.d/</span><br><span class="line">export CUSTOM_SEARCH_NAMES=&quot;application,custom&quot;</span><br><span class="line">PLUGINS_DIR=&quot;/home/nacos/plugins/peer-finder&quot;</span><br><span class="line">function print_servers()&#123;</span><br><span class="line">   if [[ ! -d &quot;$&#123;PLUGINS_DIR&#125;&quot; ]]; then</span><br><span class="line">    echo &quot;&quot; &gt; &quot;$CLUSTER_CONF&quot;</span><br><span class="line">    for server in $&#123;NACOS_SERVERS&#125;; do</span><br><span class="line">            echo &quot;$server&quot; &gt;&gt; &quot;$CLUSTER_CONF&quot;</span><br><span class="line">    done</span><br><span class="line">   else</span><br><span class="line">    bash $PLUGINS_DIR/plugin.sh</span><br><span class="line">   sleep 30</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">===========================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> JVM Configuration</span></span><br><span class="line"><span class="meta">#</span><span class="bash">===========================================================================================</span></span><br><span class="line">if [[ &quot;$&#123;MODE&#125;&quot; == &quot;standalone&quot; ]]; then</span><br><span class="line"> </span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Xms512m -Xmx512m -Xmn256m&quot;</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.standalone=true&quot;</span><br><span class="line">else</span><br><span class="line"> </span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms$&#123;JVM_XMS&#125; -Xmx$&#123;JVM_XMX&#125; -Xmn$&#123;JVM_XMN&#125; -XX:MetaspaceSize=$&#123;JVM_MS&#125; -XX:MaxMetaspaceSize=$&#123;JVM_MMS&#125;&quot;</span><br><span class="line">  if [[ &quot;$&#123;NACOS_DEBUG&#125;&quot; == &quot;y&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span><br><span class="line">  fi</span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;BASE_DIR&#125;/logs/java_heapdump.hprof&quot;</span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages&quot;</span><br><span class="line">  print_servers</span><br><span class="line">fi</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">===========================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting system properties</span></span><br><span class="line"><span class="meta">#</span><span class="bash">===========================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span>  mode that Nacos Server <span class="keyword">function</span> of split</span></span><br><span class="line">if [[ &quot;$&#123;FUNCTION_MODE&#125;&quot; == &quot;config&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.functionMode=config&quot;</span><br><span class="line">elif [[ &quot;$&#123;FUNCTION_MODE&#125;&quot; == &quot;naming&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.functionMode=naming&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> nacos server ip</span></span><br><span class="line">if [[ ! -z &quot;$&#123;NACOS_SERVER_IP&#125;&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.server.ip=$&#123;NACOS_SERVER_IP&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [[ ! -z &quot;$&#123;USE_ONLY_SITE_INTERFACES&#125;&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.inetutils.use-only-site-local-interfaces=$&#123;USE_ONLY_SITE_INTERFACES&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [[ ! -z &quot;$&#123;PREFERRED_NETWORKS&#125;&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.inetutils.preferred-networks=$&#123;PREFERRED_NETWORKS&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [[ ! -z &quot;$&#123;IGNORED_INTERFACES&#125;&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.inetutils.ignored-interfaces=$&#123;IGNORED_INTERFACES&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## If turn on auth system:</span></span></span><br><span class="line">if [[ ! -z &quot;$&#123;NACOS_AUTH_ENABLE&#125;&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.core.auth.enabled=$&#123;NACOS_AUTH_ENABLE&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [[ &quot;$&#123;PREFER_HOST_MODE&#125;&quot; == &quot;hostname&quot; ]]; then</span><br><span class="line">    JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.preferHostnameOverIp=true&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">JAVA_MAJOR_VERSION=$($JAVA -version 2&gt;&amp;1 | sed -E -n &#x27;s/.* version &quot;([0-9]*).*$/\1/p&#x27;)</span><br><span class="line">if [[ &quot;$JAVA_MAJOR_VERSION&quot; -ge &quot;9&quot; ]] ; then</span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp .:$&#123;BASE_DIR&#125;/plugins/cmdb/*.jar:$&#123;BASE_DIR&#125;/plugins/mysql/*.jar&quot;</span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Xlog:gc*:file=$&#123;BASE_DIR&#125;/logs/nacos_gc.log:time,tags:filecount=10,filesize=102400&quot;</span><br><span class="line">else</span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Djava.ext.dirs=$&#123;JAVA_HOME&#125;/jre/lib/ext:$&#123;JAVA_HOME&#125;/lib/ext:$&#123;BASE_DIR&#125;/plugins/health:$&#123;BASE_DIR&#125;/plugins/cmdb:$&#123;BASE_DIR&#125;/plugins/mysql&quot;</span><br><span class="line">  JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Xloggc:$&#123;BASE_DIR&#125;/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -Dnacos.home=$&#123;BASE_DIR&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -jar $&#123;BASE_DIR&#125;/target/nacos-server.jar&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; --spring.config.location=$&#123;CUSTOM_SEARCH_LOCATIONS&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; --spring.config.name=$&#123;CUSTOM_SEARCH_NAMES&#125;&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; --logging.config=$&#123;BASE_DIR&#125;/conf/nacos-logback.xml&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; --server.max-http-header-size=524288&quot;</span><br><span class="line"> </span><br><span class="line">echo &quot;nacos is starting,you can check the $&#123;BASE_DIR&#125;/logs/start.out&quot;</span><br><span class="line">echo &quot;$JAVA $&#123;JAVA_OPT&#125;&quot; &gt; $&#123;BASE_DIR&#125;/logs/start.out 2&gt;&amp;1 &amp;</span><br><span class="line">nohup $JAVA $&#123;JAVA_OPT&#125; &gt; $&#123;BASE_DIR&#125;/logs/start.out 2&gt;&amp;1 &lt; /dev/null</span><br></pre></td></tr></table></figure>

<p>打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master bin]# cd /data</span><br><span class="line">[root@k8s-master data]# tar -zvcf nacos-server-2.0.2.tar.gz nacos-server-2.0.2</span><br><span class="line">[root@k8s-master data]# ls</span><br><span class="line">nacos-server-2.0.2  nacos-server-2.0.2.tar.gz  nacos-server-2.0.2.zip</span><br></pre></td></tr></table></figure>

<h2 id="Nacos镜像制作">1.2. Nacos镜像制作</h2><p>编写dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[root@k8s-master data]<span class="comment"># cat Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> heyuze/jdk1.<span class="number">8.0</span>_301:latest</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -f /etc/localtime \</span></span><br><span class="line"><span class="bash">&amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ENV</span> MODE cluster</span><br><span class="line"><span class="keyword">ENV</span> PREFER_HOST_MODE ip</span><br><span class="line"><span class="keyword">ENV</span> BASE_DIR /home/nacos</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH .:/home/nacos/conf:</span><br><span class="line"><span class="keyword">ENV</span> CLUSTER_CONF /home/nacos/conf/cluster.conf</span><br><span class="line"><span class="keyword">ENV</span> FUNCTION_MODE all</span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_301</span><br><span class="line"><span class="keyword">ENV</span> NACOS_USER nacos</span><br><span class="line"><span class="keyword">ENV</span> JAVA /usr/local/jdk/jdk1.<span class="number">8.0</span>_301/bin/java</span><br><span class="line"><span class="keyword">ENV</span> JVM_XMS <span class="number">2</span>g</span><br><span class="line"><span class="keyword">ENV</span> JVM_XMX <span class="number">2</span>g</span><br><span class="line"><span class="keyword">ENV</span> JVM_XMN <span class="number">1</span>g</span><br><span class="line"><span class="keyword">ENV</span> JVM_MS <span class="number">128</span>m</span><br><span class="line"><span class="keyword">ENV</span> JVM_MMS <span class="number">320</span>m</span><br><span class="line"><span class="keyword">ENV</span> NACOS_DEBUG n</span><br><span class="line"><span class="keyword">ENV</span> TOMCAT_ACCESSLOG_ENABLED false</span><br><span class="line"> </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/nacos</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nacos-server-2.0.2.tar.gz /home</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -x &amp;&amp; mv /home/nacos-server-2.0.2/nacos/* /home/nacos/ &amp;&amp; rm -rf /home/nacos-server-2.0.2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p logs &amp;&amp; <span class="built_in">cd</span> logs &amp;&amp; touch start.out &amp;&amp; ln -sf /dev/stdout start.out &amp;&amp; ln -sf /dev/stderr start.out</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 755 bin/docker-startup.sh</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8848</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;bin/docker-startup.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>制作镜像并上传</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master data]# docker build -t heyuze/nacos-cluster:v2.0.2 .</span><br><span class="line">[root@k8s-master data]# docker push heyuze/nacos-cluster:v2.0.2</span><br></pre></td></tr></table></figure>



<h2 id="部署Nacos集群">1.3. 部署Nacos集群</h2><p>这里采用了configmap存储卷，将mysql配置信息存到了configmap中</p>
<blockquote>
<p>注意：需要提前在mysql数据库中创建一个nacos库名！然后将上面nacos-server-2.0.2.tar.gz包中的conf/nacos-mysql.sql文件里的sql语句在mysql的nacos库下执行（source nacos-mysql.sql ）导入语句。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@k8s-master</span> <span class="string">nacos_cluster</span>]<span class="comment"># pwd</span></span><br><span class="line"><span class="string">/data/k8s-yaml/test_yaml/nacos_cluster</span></span><br><span class="line"></span><br><span class="line">[<span class="string">root@k8s-master</span> <span class="string">nacos_cluster</span>]<span class="comment"># cat nacos-cluster.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wise</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-cluster</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nacos-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8848</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8848</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nacos-cluster</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wise</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-cluster-cm</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">mysql.host:</span> <span class="string">&quot;192.168.101.221&quot;</span></span><br><span class="line">  <span class="attr">mysql.db.name:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="attr">mysql.port:</span> <span class="string">&quot;3306&quot;</span></span><br><span class="line">  <span class="attr">mysql.user:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="attr">mysql.password:</span> <span class="string">&quot;nacos@123&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wise</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">nacos-cluster</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nacos-cluster</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">pod.alpha.kubernetes.io/initialized:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">                <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;app&quot;</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">nacos-cluster</span></span><br><span class="line">              <span class="attr">topologyKey:</span> <span class="string">&quot;kubernetes.io/hostname&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8snacos</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">heyuze/nacos-cluster:v2.0.2</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">2048Mi</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8848</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NACOS_REPLICAS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_HOST</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cluster-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.host</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_DB_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cluster-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.db.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_PORT</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cluster-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.port</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_USER</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cluster-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.user</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_PASSWORD</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cluster-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.password</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NACOS_SERVER_PORT</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;8848&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PREFER_HOST_MODE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;hostname&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NACOS_SERVERS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;nacos-cluster-0.nacos-cluster.wise.svc.cluster.local:8848 nacos-cluster-1.nacos-cluster.wise.svc.cluster.local:8848 nacos-cluster-2.nacos-cluster.wise.svc.cluster.local:8848&quot;</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nacos-cluster</span></span><br></pre></td></tr></table></figure>

<p>创建并查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master nacos_cluster]# kubectl create -f nacos-cluster.yaml </span><br><span class="line">service/nacos-cluster created</span><br><span class="line">configmap/nacos-cluster-cm created</span><br><span class="line">statefulset.apps/nacos-cluster created</span><br><span class="line"></span><br><span class="line">[root@k8s-master nacos_cluster]# kubectl get pods -n wise|grep nacos-cluster</span><br><span class="line">nacos-cluster-0   1/1     Running   0          12m</span><br><span class="line">nacos-cluster-1   1/1     Running   0          11m</span><br><span class="line">nacos-cluster-2   1/1     Running   0          10m</span><br><span class="line"></span><br><span class="line">[root@k8s-master nacos_cluster]# kubectl get svc -n wise|grep nacos-cluster</span><br><span class="line">nacos-cluster   ClusterIP   None         &lt;none&gt;        8848/TCP   12m</span><br><span class="line"></span><br><span class="line">[root@k8s-master nacos_cluster]# kubectl get statefulset -n wise</span><br><span class="line">NAME            READY   AGE</span><br><span class="line">nacos-cluster   3/3     13m</span><br><span class="line"></span><br><span class="line">[root@k8s-master nacos_cluster]# kubectl get configmap -n wise|grep nacos-cluster</span><br><span class="line">nacos-cluster-cm   5      13m</span><br></pre></td></tr></table></figure>

<p>创建ingress访问</p>
<p>vim nacos-ingress.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wise</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik-v2.3</span>     </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nacos.heyonggs.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">nacos-cluster</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8848</span></span><br></pre></td></tr></table></figure>

<p>应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f nacos-ingress.yaml </span><br></pre></td></tr></table></figure>

<p>先做域名解析在访问查看集群：http://域名/nacos</p>
<blockquote>
<p>账号：nacos</p>
<p>密码：nacos</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/nacos/1.jpg" alt="traefik"></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes桌面客户端Lens</title>
    <url>/p/27615.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Kubernetes桌面客户端Lens">1. Kubernetes桌面客户端Lens</h1><blockquote>
<p>官网：<a href="https://k8slens.dev/">https://k8slens.dev/</a></p>
</blockquote>
<p><a href="https://links.jianshu.com/go?to=https://github.com/lensapp/lens">Lens </a>是一个开源的管理 Kubernetes 集群的 IDE，相比于其他的可视化管理更加好用，功能十分强大。通过 Lens，我们可以很方便的管理多个Kubernetes集群。</p>
<p>Lens的优势及特征</p>
<ol>
<li>消除复杂性：无需学习 kubectl 命令即可探索和导航 Kubernetes 集群，非常适合刚入门的开发人员。</li>
<li>实时可观察性：实时检查实时统计数据、事件和日志流。没有旋转器、刷新或等待屏幕更新。</li>
<li>故障排除和调试：查看仪表板上的错误和警告，然后单击以查看详细信息。再次单击以查看日志或获取命令行。</li>
<li>在您的桌面上运行：适用于 MacOS、Windows 和 Linux 的独立应用程序。 1 分钟安装。无需在集群中安装任何东西。</li>
<li>建立在开源和免费的基础上：Lens 建立在具有活跃社区的开源之上，并得到 Kubernetes 和云原生生态系统先驱的支持。</li>
<li>适用于任何 Kubernetes：使用 EKS、AKS、GKE、Minikube、Rancher、k0s、k3s、OpenShift…？他们都工作。只需为要使用的集群导入 kubeconfigs。</li>
<li>多集群管理：支持数百个集群</li>
</ol>
<h2 id="下载安装">1.1. 下载安装</h2><p>Lens支持 MacOS， Windows 和 Linux多平台安装，下载地址如下，版本5.2.4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Windows</span><br><span class="line">https://api.k8slens.dev/binaries/Lens%20Setup%205.2.4-latest.20210923.1.exe</span><br><span class="line"></span><br><span class="line"># Mac OS Intel</span><br><span class="line">https://api.k8slens.dev/binaries/Lens-5.2.4-latest.20210923.1.dmg</span><br><span class="line"></span><br><span class="line"># Mac OS M1</span><br><span class="line">https://api.k8slens.dev/binaries/Lens-5.2.4-latest.20210923.1-arm64.dmg</span><br><span class="line"></span><br><span class="line"># Linux rpm</span><br><span class="line">https://api.k8slens.dev/binaries/Lens-5.2.4-latest.20210923.1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241703367.png"></p>
<p>下载完成后直接安装即可。</p>
<h2 id="Lens连接K8S集群">1.2. Lens连接K8S集群</h2><p>获取config文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# cat ~/.kube/config </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EZ3pNREEzTlRJMU9Wb1hEVE14TURneU9EQTNOVEkxT1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzlLCnNBNnhZQ24zOVBZeitKWjNLd2tRYW00RytwSkdCTHRyRWFGVzYwam1rQkxCUVZCanJNZ2hVVWxjYUwwWTNybVAKbkpPbWsyRm1VSzFvZW01d21YQndERFppc08wT011bVI2QlJ4UWF5WlJoMW5GQnNWSHFFdXdFY3ROZkFpTThQagpUOVBQclBHbUN0Tm1qSnB6bDVNTnBaQ0htL2hHMUpaK3hlakhzblJDR3NzSzNFMyt6RFJmVk5qc1Vqamd3ME9FCm9vcGRlYUpRTlVZR01CazFJSDFoYW9wZDBFcjVTUDI3R1pzSXZnTFhmRTUvT2tWckN5WEk2UU9EM29LbytJaW8KL0ExNkg2QXZNR21PZXd5R3RzSEQ0YXlhbE5vQVd0cSt2SWx1S1A4ZTZkaC9jcStjb3llYmk1NTZiNWRRK3dIdwpyR0dFK1laeGVWNGxBR3dRMlhVQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHZGQ0VGx5NDJGclZPOUw5NnV4Znc4Yk54a1MKS2xXdE9EdWpaaUtyMWIyLzluYTVnTlo5cmk0ekYrQ0JhdDVRcURKSmNmQmxPaXAzWm9UWkZnVnJOUTVhYTJGTQpPLzBkRTJ0WVY4MDUxOUFCVXBkWURNek5zVEwzemI3b1dxN0ErQkw1VjF6Z2ppSVBOU3JtVTh3eGhRdXo1YkYvCm41UWZCalJieDdDZGFWdzQ1OHRkaGdRTXpGU0JsdnVSdmZkWGNDbGIwaXBtc2Y3QWFhaGhxcEJva1FNVkZ2VjkKK2ttN3g0cC81QjRucFZSbzd6QWV2ZzJabkNEOHhtRHFWTjY5ZmVsaFZoYUxmakVFNXJtMDBJZTc3TG9ub1grZApIdGlsZGdtd3JPR2REeXhrdk5kb0lyOWFCUVV1WVdZQVpPZXVnMDZURkR1UC90YXhZZTIvRENFSjVLbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">    server: https://192.168.101.201:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">  </span><br><span class="line">.........</span><br></pre></td></tr></table></figure>

<p>打开Lens，将config文件内容贴入</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241728344.png"></p>
<p>贴入配置后按Add cluster</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202110261047340.png"></p>
<p>接着在Clusters选项卡中可以看到添加的集群</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241736564.png"></p>
<p>选择连接即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241741264.png"></p>
<h2 id="常用功能展示">1.3. 常用功能展示</h2><p>集群概览</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241745284.png"></p>
<p>服务概览</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241746565.png"></p>
<p>应用商店</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241748646.png"></p>
<p>查看pod详细信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241749047.png"></p>
<p>Lens 内置 kubectl 命令，不需要你机器环境中安装 kubectl 命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202109241751105.png"></p>
<p>其它功能我就不一一展示了。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署treafik2.x</title>
    <url>/p/9854.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="k8s部署treafik2-x">1. k8s部署treafik2.x</h1><blockquote>
<p><a href="https://blog.51cto.com/u_15329153/3371086?xiangguantuijian">https://blog.51cto.com/u_15329153/3371086?xiangguantuijian</a></p>
</blockquote>
<h2 id="创建-CRD-资源">1.1. 创建 CRD 资源</h2><p>在<code>Traefik v2.0</code>版本后，开始使用<code> CRD（Custom Resource Definition）</code>来完成路由配置等，所以需要提前创建<code>CRD</code>资源。</p>
<p>cat traefik-crd.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## IngressRoute</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingressroutes.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">ingressroutes</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">ingressroute</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## IngressRouteTCP</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingressroutetcps.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">IngressRouteTCP</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">ingressroutetcps</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">ingressroutetcp</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Middleware</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">middlewares.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Middleware</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">middlewares</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">middleware</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tlsoptions.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">TLSOption</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">tlsoptions</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">tlsoption</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## TraefikService</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefikservices.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">traefikservices</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">traefikservice</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## TraefikTLSStore</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tlsstores.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">TLSStore</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">tlsstores</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">tlsstore</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## IngressRouteUDP</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingressrouteudps.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">IngressRouteUDP</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">ingressrouteudps</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">ingressrouteudp</span></span><br></pre></td></tr></table></figure>

<p>创建traefik crd 资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f traefik-crd.yaml</span><br></pre></td></tr></table></figure>

<h2 id="创建-RBAC-权限">1.2. 创建 RBAC 权限</h2><p>Kubernetes 在 1.6 版本中引入了基于角色的访问控制（RBAC）策略，方便对 Kubernetes 资源和 API 进行细粒度控制。Traefik 需要一定的权限，所以，这里提前创建好<code>Traefik ServiceAccount</code>并分配一定的权限。</p>
<p>cat traefik-rbac.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat traefik-rbac.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.containo.us</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">middlewares</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressroutes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefikservices</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressroutetcps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressrouteudps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlsoptions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlsstores</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>

<p>创建 Traefik RBAC 资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f traefik-rbac.yaml</span><br></pre></td></tr></table></figure>

<h2 id="创建-Traefik-配置文件">1.3. 创建 Traefik 配置文件</h2><p>由于 Traefik 配置很多，通过 CLI 定义不是很方便，一般时候都会通过配置文件配置 Traefik 参数，然后存入<code>ConfigMap</code>，将其挂入 Traefik 中。</p>
<p>下面配置中可以通过配置<code>kubernetesCRD</code>与<code>kubernetesIngress</code>和<code>kubernetesGateway</code>三项参数，让 Traefik 支持<code> CRD</code>、<code>Ingress</code>与<code>kubernetesGateway</code>三种路由配置方式。</p>
<p>cat traefik-config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat traefik-config.yaml</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">traefik.yaml:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    serversTransport:</span></span><br><span class="line"><span class="string">      insecureSkipVerify: true  ## Traefik 忽略验证代理服务的 TLS 证书</span></span><br><span class="line"><span class="string">    api:</span></span><br><span class="line"><span class="string">      insecure: true            ## 允许 HTTP 方式访问 API</span></span><br><span class="line"><span class="string">      dashboard: true           ## 启用 Dashboard</span></span><br><span class="line"><span class="string">      debug: true               ## 启用 Debug 调试模式</span></span><br><span class="line"><span class="string">    metrics:</span></span><br><span class="line"><span class="string">      prometheus: metrics       ## 配置 Prometheus 监控指标数据，并使用默认配置</span></span><br><span class="line"><span class="string">    entryPoints:</span></span><br><span class="line"><span class="string">      web:</span></span><br><span class="line"><span class="string">        address: &quot;:80&quot;          ## 配置 80 端口，并设置入口名称为 web</span></span><br><span class="line"><span class="string">      websecure:</span></span><br><span class="line"><span class="string">        address: &quot;:443&quot;         ## 配置 443 端口，并设置入口名称为 websecure</span></span><br><span class="line"><span class="string">      traefik:</span></span><br><span class="line"><span class="string">        address: &quot;:8090&quot;        ## 配置 8090 端口，并设置入口名称为 dashboard</span></span><br><span class="line"><span class="string">      metrics:</span></span><br><span class="line"><span class="string">        address: &quot;:8082&quot;        ## 配置 8082 端口，作为metrics收集入口</span></span><br><span class="line"><span class="string">      tcpep:</span></span><br><span class="line"><span class="string">        address: &quot;:8000&quot;        ## 配置 8000 端口，作为tcp入口</span></span><br><span class="line"><span class="string">      udpep:</span></span><br><span class="line"><span class="string">        address: &quot;:9000/udp&quot;    ## 配置 9000 端口，作为udp入口</span></span><br><span class="line"><span class="string">    providers:</span></span><br><span class="line"><span class="string">      kubernetescrd:            ## 启用 Kubernetes CRD 方式来配置路由规则</span></span><br><span class="line"><span class="string">        ingressclass: traefik-v2.3</span></span><br><span class="line"><span class="string">      kubernetesingress:        ## 启动 Kubernetes Ingress 方式来配置路由规则</span></span><br><span class="line"><span class="string">        ingressclass: traefik-v2.3</span></span><br><span class="line"><span class="string">    log:</span></span><br><span class="line"><span class="string">      filePath: &quot;/etc/traefik/logs/traefik.log&quot;              ## 设置调试日志文件存储路径，如果为空则输出到控制台</span></span><br><span class="line"><span class="string">      level: error              ## 设置调试日志级别</span></span><br><span class="line"><span class="string">      format: json                ## 设置调试日志格式</span></span><br><span class="line"><span class="string">    accessLog:</span></span><br><span class="line"><span class="string">      filePath: &quot;/etc/traefik/logs/access.log&quot;              ## 设置访问日志文件存储路径，如果为空则输出到控制台</span></span><br><span class="line"><span class="string">      format: json                ## 设置访问调试日志格式</span></span><br><span class="line"><span class="string">      bufferingSize: 0          ## 设置访问日志缓存行数</span></span><br><span class="line"><span class="string">      filters:</span></span><br><span class="line"><span class="string">        #statusCodes: [&quot;200&quot;]   ## 设置只保留指定状态码范围内的访问日志</span></span><br><span class="line"><span class="string">        retryAttempts: true     ## 设置代理访问重试失败时，保留访问日志</span></span><br><span class="line"><span class="string">        minDuration: 20         ## 设置保留请求时间超过指定持续时间的访问日志</span></span><br><span class="line"><span class="string">      fields:                   ## 设置访问日志中的字段是否保留（keep 保留、drop 不保留）</span></span><br><span class="line"><span class="string">        defaultMode: keep       ## 设置默认保留访问日志字段</span></span><br><span class="line"><span class="string">        names:                  ## 针对访问日志特别字段特别配置保留模式</span></span><br><span class="line"><span class="string">          ClientUsername: drop  </span></span><br><span class="line"><span class="string">        headers:                ## 设置 Header 中字段是否保留</span></span><br><span class="line"><span class="string">          defaultMode: keep     ## 设置默认保留 Header 中字段</span></span><br><span class="line"><span class="string">          names:                ## 针对 Header 中特别字段特别配置保留模式</span></span><br><span class="line"><span class="string">            User-Agent: redact</span></span><br><span class="line"><span class="string">            Authorization: drop</span></span><br><span class="line"><span class="string">            Content-Type: keep</span></span><br></pre></td></tr></table></figure>

<p>创建Traefik configmap 资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f traefik-config.yaml</span><br></pre></td></tr></table></figure>

<h2 id="设置节点-Label-标签">1.4. 设置节点 Label 标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master traefik]# kubectl label nodes k8s-master IngressProxy=traefik2.3</span><br><span class="line">node/k8s-master labeled</span><br><span class="line"></span><br><span class="line">[root@k8s-master traefik]# kubectl label nodes k8s-node1 IngressProxy=traefik2.3</span><br><span class="line">node/k8s-node1 labeled</span><br><span class="line"></span><br><span class="line">[root@k8s-master traefik]# kubectl label nodes k8s-node2 IngressProxy=traefik2.3</span><br><span class="line">node/k8s-node2 labeled</span><br></pre></td></tr></table></figure>

<p>验证节点标签是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master traefik]# kubectl get node --show-labels</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION   LABELS</span><br><span class="line">k8s-master   Ready    master   46h   v1.18.0   IngressProxy=traefik2.3,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master,kubernetes.io/os=linux,node-role.kubernetes.io/master=</span><br><span class="line">k8s-node1    Ready    &lt;none&gt;   46h   v1.18.0   IngressProxy=traefik2.3,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node1,kubernetes.io/os=linux</span><br><span class="line">k8s-node2    Ready    &lt;none&gt;   46h   v1.18.0   IngressProxy=traefik2.3,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node2,kubernetes.io/os=linux</span><br></pre></td></tr></table></figure>

<p>节点删除Label标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kubectl label nodes k8s-master IngressProxy-</span><br><span class="line"># kubectl label nodes k8s-node1 IngressProxy-</span><br><span class="line"># kubectl label nodes k8s-node2 IngressProxy-</span><br></pre></td></tr></table></figure>



<h2 id="创建-Traefik">1.5. 创建 Traefik</h2><p>下面将用<code>DaemonSet</code>方式部署 Traefik，便于在多服务器间扩展，用 hostport 方式绑定服务器 80、443 端口，方便流量通过物理机进入 Kubernetes 内部。</p>
<p>cat traefik-deploy.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat traefik-deploy.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-v2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">traefik-v2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">traefik-v2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">traefik-v2</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">traefik-v2</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">traefik:v2.3</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configfile=/config/traefik.yaml</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">hostPort:</span> <span class="number">80</span>           <span class="comment">#hostPort方式，将端口暴露到集群节点</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">websecure</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">hostPort:</span> <span class="number">443</span>          <span class="comment">#hostPort方式，将端口暴露到集群节点</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8090</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcpep</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8000</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">udpep</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">9000</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">300m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">capabilities:</span>              <span class="comment">## 只开放网络权限    </span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/config&quot;</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">&quot;config&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/traefik/logs</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">logdir</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">timezone</span></span><br><span class="line">            <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">traefik-config</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logdir</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/traefik/logs</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">&quot;DirectoryOrCreate&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">timezone</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/etc/localtime</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">File</span></span><br><span class="line">      <span class="attr">tolerations:</span>            </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span>        <span class="comment">## 设置容忍所有污点，防止节点被设置污点</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span>             <span class="comment">## 开启host网络，提高网络入口的网络性能</span></span><br><span class="line">      <span class="attr">nodeSelector:</span>                 <span class="comment">## 设置node筛选器，在特定label的节点上启动</span></span><br><span class="line">        <span class="attr">IngressProxy:</span> <span class="string">&quot;traefik2.3&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-v2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">traefik-v2</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">websecure</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8090</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">tcpep</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefikudp-v2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">traefik-v2</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">UDP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">udpep</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure>

<p>创建 Traefik</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f traefik-deploy.yaml</span><br></pre></td></tr></table></figure>

<p>使用Deployment类型部署，以便于在多服务器间扩展，使用 hostport 方式占用服务器 80、443 端口，方便流量进入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 部署 Traefik</span><br><span class="line"># kubectl apply -f traefik-deploy.yaml </span><br><span class="line">deployment.apps/traefik-v2 created</span><br><span class="line">service/traefik-v2 created</span><br><span class="line">service/traefikudp-v2 created</span><br></pre></td></tr></table></figure>

<p>到此 Traefik v2.3 应用已经部署完成。<br>这时候就可以通过节点<a href="http://IP:8090,可以看到dashboard相关信息">http://IP:8090,可以看到dashboard相关信息</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/traefik/1.jpg" alt="traefik"></p>
<h2 id="路由配置">1.6. 路由配置</h2><h3 id="配置-HTTP-路由规则-（Traefik-Dashboard-为例）">1.6.1. 配置 HTTP 路由规则 （Traefik Dashboard 为例）</h3><p>Traefik 应用已经部署完成，但是想让外部访问 Kubernetes 内部服务，还需要配置路由规则，这里开启了 Traefik Dashboard 配置，所以首先配置 Traefik Dashboard 看板的路由规则，使外部能够访问 Traefik Dashboard。</p>
<p>创建 Traefik Dashboard 路由规则文件 traefik-dashboard-route.yaml</p>
<p>因为静态配置文件指定了ingressclass，所以这里的annotations 要指定，否则访问会404</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/traefik/2.jpg" alt="traefik"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat traefik-dashboard-route.yaml</span><br><span class="line">apiVersion: traefik.containo.us/v1alpha1</span><br><span class="line">kind: IngressRoute</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik-v2.3     </span><br><span class="line">spec:</span><br><span class="line">  entryPoints:</span><br><span class="line">    - web</span><br><span class="line">  routes:</span><br><span class="line">  - match: Host(`traefik.heyonggs.com`) </span><br><span class="line">    kind: Rule</span><br><span class="line">    services:</span><br><span class="line">    - name: api@internal</span><br><span class="line">      kind: TraefikService</span><br></pre></td></tr></table></figure>

<p>部署Traefik Dashboard 路由规则对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kubectl apply -f traefik-dashboard-route.yaml</span><br><span class="line">ingressroute.traefik.containo.us/traefik-dashboard created</span><br></pre></td></tr></table></figure>

<p>客户端通过域名访问服务，必须要进行 DNS 解析，可以通过 DNS 服务器进行域名解析，也可以修改 hosts 文件将 Traefik 指定节点的 IP 和自定义 host 绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># cat hosts</span><br><span class="line">192.168.101.202 traefik.heyonggs.com</span><br></pre></td></tr></table></figure>

<p>打开任意浏览器输入地址： <a href="http://traefik.heyonggs.com进行访问,打开/">http://traefik.heyonggs.com进行访问，打开</a> Traefik Dashboard.</p>
<p>此处没有配置验证登录，如果想配置验证登录，使用middleware即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/traefik/3.jpg" alt="traefik"></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm修改证书时间为99年</title>
    <url>/p/23286.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="kubeadm修改证书时间为99年">1. kubeadm修改证书时间为99年</h1><h2 id="查看当前证书时间">1.1. 查看当前证书时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm alpha certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Aug 30, 2022 07:53 UTC   363d                                    no      </span><br><span class="line">apiserver                  Aug 30, 2022 07:52 UTC   363d            ca                      no      </span><br><span class="line">apiserver-etcd-client      Aug 30, 2022 07:53 UTC   363d            etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Aug 30, 2022 07:52 UTC   363d            ca                      no      </span><br><span class="line">controller-manager.conf    Aug 30, 2022 07:53 UTC   363d                                    no      </span><br><span class="line">etcd-healthcheck-client    Aug 30, 2022 07:53 UTC   363d            etcd-ca                 no      </span><br><span class="line">etcd-peer                  Aug 30, 2022 07:53 UTC   363d            etcd-ca                 no      </span><br><span class="line">etcd-server                Aug 30, 2022 07:53 UTC   363d            etcd-ca                 no      </span><br><span class="line">front-proxy-client         Aug 30, 2022 07:53 UTC   363d            front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Aug 30, 2022 07:53 UTC   363d                                    no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Aug 28, 2031 07:52 UTC   9y              no      </span><br><span class="line">etcd-ca                 Aug 28, 2031 07:53 UTC   9y              no      </span><br><span class="line">front-proxy-ca          Aug 28, 2031 07:53 UTC   9y              no      </span><br></pre></td></tr></table></figure>

<p>可以看到正常只有一年时间。</p>
<h2 id="下载源码">1.2. 下载源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/kubernetes/kubernetes.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果github下载慢可以用gitee下载地址：<a href="https://gitee.com/mirrors/Kubernetes.git">https://gitee.com/mirrors/Kubernetes.git</a></p>
</blockquote>
<p>查看k8s版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;18&quot;, GitVersion:&quot;v1.18.0&quot;, GitCommit:&quot;9e991415386e4cf155a24b1da15becaa390438d8&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-03-25T14:58:59Z&quot;, GoVersion:&quot;go1.13.8&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;18&quot;, GitVersion:&quot;v1.18.0&quot;, GitCommit:&quot;9e991415386e4cf155a24b1da15becaa390438d8&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-03-25T14:50:46Z&quot;, GoVersion:&quot;go1.13.8&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>切换到自己的版本，修改源码，比如我的是v1.18.0版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd kubernetes</span><br><span class="line">git checkout v1.18.0</span><br></pre></td></tr></table></figure>

<p>vim cmd/kubeadm/app/constants/constants.go，找到CertificateValidity，修改如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">const (</span><br><span class="line">        // KubernetesDir is the directory Kubernetes owns for storing various configuration files</span><br><span class="line">        KubernetesDir = &quot;/etc/kubernetes&quot;</span><br><span class="line">        // ManifestsSubDirName defines directory name to store manifests</span><br><span class="line">        ManifestsSubDirName = &quot;manifests&quot;</span><br><span class="line">        // TempDirForKubeadm defines temporary directory for kubeadm</span><br><span class="line">        // should be joined with KubernetesDir.</span><br><span class="line">        TempDirForKubeadm = &quot;tmp&quot;</span><br><span class="line"></span><br><span class="line">        // CertificateValidity defines the validity for all the signed certificates generated by kubeadm</span><br><span class="line">        CertificateValidity = time.Hour * 24 * 365 * 100</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h2 id="安装编译软件">1.3. 安装编译软件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>

<p>安装go编译环境，这里就直接使用yum安装</p>
<p>查看go是否安装过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubernetes]# go env</span><br><span class="line">-bash: go: command not found</span><br></pre></td></tr></table></figure>

<p>查看yum的Golang</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubernetes]# yum info golang</span><br><span class="line">Last metadata expiration check: 0:06:47 ago on Wed 01 Sep 2021 10:07:23 AM CST.</span><br><span class="line">Available Packages</span><br><span class="line">Name         : golang</span><br><span class="line">Version      : 1.15.14</span><br><span class="line">Release      : 1.module_el8.4.0+882+ab13bcd9</span><br><span class="line">Architecture : x86_64</span><br><span class="line">Size         : 708 k</span><br><span class="line">Source       : golang-1.15.14-1.module_el8.4.0+882+ab13bcd9.src.rpm</span><br><span class="line">Repository   : AppStream</span><br><span class="line">Summary      : The Go Programming Language</span><br><span class="line">URL          : http://golang.org/</span><br><span class="line">License      : BSD and Public Domain</span><br><span class="line">Description  : The Go Programming Language.</span><br></pre></td></tr></table></figure>

<p>安装golang</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure>

<p>再次查看go环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubernetes]# go env</span><br><span class="line">GO111MODULE=&quot;&quot;</span><br><span class="line">GOARCH=&quot;amd64&quot;</span><br><span class="line">GOBIN=&quot;&quot;</span><br><span class="line">GOCACHE=&quot;/root/.cache/go-build&quot;</span><br><span class="line">GOENV=&quot;/root/.config/go/env&quot;</span><br><span class="line">GOEXE=&quot;&quot;</span><br><span class="line">GOFLAGS=&quot;&quot;</span><br><span class="line">GOHOSTARCH=&quot;amd64&quot;</span><br><span class="line">GOHOSTOS=&quot;linux&quot;</span><br><span class="line">GOINSECURE=&quot;&quot;</span><br><span class="line">GOMODCACHE=&quot;/root/go/pkg/mod&quot;</span><br><span class="line">GONOPROXY=&quot;&quot;</span><br><span class="line">GONOSUMDB=&quot;&quot;</span><br><span class="line">GOOS=&quot;linux&quot;</span><br><span class="line">GOPATH=&quot;/root/go&quot;</span><br><span class="line">GOPRIVATE=&quot;&quot;</span><br><span class="line">GOPROXY=&quot;https://proxy.golang.org,direct&quot;</span><br><span class="line">GOROOT=&quot;/usr/lib/golang&quot;</span><br><span class="line">GOSUMDB=&quot;sum.golang.org&quot;</span><br><span class="line">GOTMPDIR=&quot;&quot;</span><br><span class="line">GOTOOLDIR=&quot;/usr/lib/golang/pkg/tool/linux_amd64&quot;</span><br><span class="line">GCCGO=&quot;gccgo&quot;</span><br><span class="line">AR=&quot;ar&quot;</span><br><span class="line">CC=&quot;gcc&quot;</span><br><span class="line">CXX=&quot;g++&quot;</span><br><span class="line">CGO_ENABLED=&quot;1&quot;</span><br><span class="line">GOMOD=&quot;/root/kubernetes/go.mod&quot;</span><br><span class="line">CGO_CFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_CPPFLAGS=&quot;&quot;</span><br><span class="line">CGO_CXXFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_FFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_LDFLAGS=&quot;-g -O2&quot;</span><br><span class="line">PKG_CONFIG=&quot;pkg-config&quot;</span><br><span class="line">GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build406782294=/tmp/go-build -gno-record-gcc-switches&quot;</span><br></pre></td></tr></table></figure>

<h2 id="执行make-WHAT-cmd-kubeadm编译">1.4. 执行make WHAT=cmd/kubeadm编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubernetes]# make WHAT=cmd/kubeadm</span><br><span class="line">+++ [0901 10:20:55] Building go targets for linux/amd64:</span><br><span class="line">    ./vendor/k8s.io/code-generator/cmd/deepcopy-gen</span><br><span class="line">+++ [0901 10:21:08] Building go targets for linux/amd64:</span><br><span class="line">    ./vendor/k8s.io/code-generator/cmd/defaulter-gen</span><br><span class="line">+++ [0901 10:21:18] Building go targets for linux/amd64:</span><br><span class="line">    ./vendor/k8s.io/code-generator/cmd/conversion-gen</span><br><span class="line">+++ [0901 10:21:37] Building go targets for linux/amd64:</span><br><span class="line">    ./vendor/k8s.io/kube-openapi/cmd/openapi-gen</span><br><span class="line">+++ [0901 10:21:53] Building go targets for linux/amd64:</span><br><span class="line">    ./vendor/github.com/go-bindata/go-bindata/go-bindata</span><br><span class="line">warning: ignoring symlink /root/kubernetes/_output/local/go/src/k8s.io/kubernetes</span><br><span class="line">go: warning: &quot;k8s.io/kubernetes/vendor/github.com/go-bindata/go-bindata/...&quot; matched no packages</span><br><span class="line">+++ [0901 10:21:55] Building go targets for linux/amd64:</span><br><span class="line">    cmd/kubeadm</span><br></pre></td></tr></table></figure>

<p>编译完生成如下目录和二进制文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubernetes]# ll _output/bin/</span><br><span class="line">total 70380</span><br><span class="line">-rwxr-xr-x 1 root root  6242304 Sep  1 10:21 conversion-gen</span><br><span class="line">-rwxr-xr-x 1 root root  6234112 Sep  1 10:20 deepcopy-gen</span><br><span class="line">-rwxr-xr-x 1 root root  6205440 Sep  1 10:21 defaulter-gen</span><br><span class="line">-rwxr-xr-x 1 root root  3688610 Sep  1 10:20 go2make</span><br><span class="line">-rwxr-xr-x 1 root root  2023424 Sep  1 10:21 go-bindata</span><br><span class="line">-rwxr-xr-x 1 root root 37076992 Sep  1 10:23 kubeadm</span><br><span class="line">-rwxr-xr-x 1 root root 10596352 Sep  1 10:21 openapi-gen</span><br></pre></td></tr></table></figure>

<p>备份原kubeadm和证书文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/bin/kubeadm&#123;,.bak20210901&#125;</span><br><span class="line">cp -r /etc/kubernetes/pki&#123;,.bak20210901&#125;</span><br></pre></td></tr></table></figure>

<p>将新生成的kubeadm进行替换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp _output/bin/kubeadm /usr/bin/kubeadm</span><br></pre></td></tr></table></figure>

<p>生成新的证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/kubernetes/pki</span><br><span class="line">kubeadm alpha certs renew all</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubernetes]# cd /etc/kubernetes/pki</span><br><span class="line">[root@k8s-master pki]# kubeadm alpha certs renew all</span><br><span class="line">[renew] Reading configuration from the cluster...</span><br><span class="line">[renew] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line"></span><br><span class="line">certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed</span><br><span class="line">certificate for serving the Kubernetes API renewed</span><br><span class="line">certificate the apiserver uses to access etcd renewed</span><br><span class="line">certificate for the API server to connect to kubelet renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the controller manager to use renewed</span><br><span class="line">certificate for liveness probes to healthcheck etcd renewed</span><br><span class="line">certificate for etcd nodes to communicate with each other renewed</span><br><span class="line">certificate for serving etcd renewed</span><br><span class="line">certificate for the front proxy client renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>

<p>验证结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm alpha certs check-expiration</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master pki]# kubeadm alpha certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Aug 08, 2121 02:32 UTC   99y                                     no      </span><br><span class="line">apiserver                  Aug 08, 2121 02:32 UTC   99y             ca                      no      </span><br><span class="line">apiserver-etcd-client      Aug 08, 2121 02:32 UTC   99y             etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Aug 08, 2121 02:32 UTC   99y             ca                      no      </span><br><span class="line">controller-manager.conf    Aug 08, 2121 02:32 UTC   99y                                     no      </span><br><span class="line">etcd-healthcheck-client    Aug 08, 2121 02:32 UTC   99y             etcd-ca                 no      </span><br><span class="line">etcd-peer                  Aug 08, 2121 02:32 UTC   99y             etcd-ca                 no      </span><br><span class="line">etcd-server                Aug 08, 2121 02:32 UTC   99y             etcd-ca                 no      </span><br><span class="line">front-proxy-client         Aug 08, 2121 02:32 UTC   99y             front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Aug 08, 2121 02:32 UTC   99y                                     no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Aug 28, 2031 07:52 UTC   9y              no      </span><br><span class="line">etcd-ca                 Aug 28, 2031 07:53 UTC   9y              no      </span><br><span class="line">front-proxy-ca          Aug 28, 2031 07:53 UTC   9y              no      </span><br></pre></td></tr></table></figure>

<p>查看集群状态是否OK。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master pki]# kubectl get node</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master   Ready    master   42h   v1.18.0</span><br><span class="line">k8s-node1    Ready    &lt;none&gt;   42h   v1.18.0</span><br><span class="line">k8s-node2    Ready    &lt;none&gt;   42h   v1.18.0</span><br></pre></td></tr></table></figure>

<p>查看pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master pki]# kubectl get pod -n kube-system</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-7ff77c879f-6pwrg             1/1     Running   1          42h</span><br><span class="line">coredns-7ff77c879f-d6s95             1/1     Running   2          42h</span><br><span class="line">etcd-k8s-master                      1/1     Running   3          42h</span><br><span class="line">kube-apiserver-k8s-master            1/1     Running   2          42h</span><br><span class="line">kube-controller-manager-k8s-master   1/1     Running   3          42h</span><br><span class="line">kube-flannel-ds-fs8dj                1/1     Running   3          42h</span><br><span class="line">kube-flannel-ds-g6d4l                1/1     Running   2          42h</span><br><span class="line">kube-flannel-ds-tnrzq                1/1     Running   1          42h</span><br><span class="line">kube-proxy-dngh8                     1/1     Running   1          42h</span><br><span class="line">kube-proxy-nxb5q                     1/1     Running   2          42h</span><br><span class="line">kube-proxy-zz5xn                     1/1     Running   3          42h</span><br><span class="line">kube-scheduler-k8s-master            1/1     Running   2          42h</span><br></pre></td></tr></table></figure>

<p>如看到上面的Ready和Running，即表示证书修改成功。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm平滑升级集群</title>
    <url>/p/23481.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="kubeadm平滑升级群集">1. kubeadm平滑升级群集</h1><p>我们安装的版本为<code>1.18.0</code>，但是最新的版本为<code>1.18.20</code>想要升级为最新的版本又不影响业务的访问。</p>
<h2 id="检查群集">1.1. 检查群集</h2><p>检查群集可用于升级的版本和当前群集是否可升级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm upgrade plan</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm upgrade plan</span><br><span class="line">[upgrade/config] Making sure the configuration is correct:</span><br><span class="line">[upgrade/config] Reading configuration from the cluster...</span><br><span class="line">[upgrade/config] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line">[preflight] Running pre-flight checks.</span><br><span class="line">[upgrade] Running cluster health checks</span><br><span class="line">[upgrade] Fetching available versions to upgrade to</span><br><span class="line">[upgrade/versions] Cluster version: v1.18.0</span><br><span class="line">[upgrade/versions] kubeadm version: v1.18.0-dirty</span><br><span class="line">I0906 09:48:57.817361 3822642 version.go:252] remote version is much newer: v1.22.1; falling back to: stable-1.18</span><br><span class="line">[upgrade/versions] Latest stable version: v1.18.20</span><br><span class="line">[upgrade/versions] Latest stable version: v1.18.20</span><br><span class="line">[upgrade/versions] Latest version in the v1.18 series: v1.18.20</span><br><span class="line">[upgrade/versions] Latest version in the v1.18 series: v1.18.20</span><br><span class="line"></span><br><span class="line">Components that must be upgraded manually after you have upgraded the control plane with &#x27;kubeadm upgrade apply&#x27;:</span><br><span class="line">COMPONENT   CURRENT       AVAILABLE</span><br><span class="line">Kubelet     3 x v1.18.0   v1.18.20</span><br><span class="line"></span><br><span class="line">Upgrade to the latest version in the v1.18 series:</span><br><span class="line"></span><br><span class="line">COMPONENT            CURRENT   AVAILABLE</span><br><span class="line">API Server           v1.18.0   v1.18.20</span><br><span class="line">Controller Manager   v1.18.0   v1.18.20</span><br><span class="line">Scheduler            v1.18.0   v1.18.20</span><br><span class="line">Kube Proxy           v1.18.0   v1.18.20</span><br><span class="line">CoreDNS              1.6.7     1.6.7</span><br><span class="line">Etcd                 3.4.3     3.4.3-0</span><br><span class="line"></span><br><span class="line">You can now apply the upgrade by executing the following command:</span><br><span class="line"></span><br><span class="line">	kubeadm upgrade apply v1.18.20</span><br><span class="line"></span><br><span class="line">Note: Before you can perform this upgrade, you have to update kubeadm to v1.18.20.</span><br><span class="line"></span><br><span class="line">_____________________________________________________________________</span><br></pre></td></tr></table></figure>

<p>这里需要先升级<code>kubeadm``kubelet``kubectl</code></p>
<h2 id="升级kubelet-kubeadm-kubectl">1.2. 升级kubelet kubeadm kubectl</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.18.20 kubeadm-1.18.20 kubectl-1.18.20</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其他节点也需要执行</p>
</blockquote>
<h2 id="升级群集组件">1.3. 升级群集组件</h2><p>过程会稍微有点慢，因需要下载新版本的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm upgrade apply v1.18.20</span><br></pre></td></tr></table></figure>

<p>执行之后输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm upgrade apply v1.18.20</span><br><span class="line">[upgrade/config] Making sure the configuration is correct:</span><br><span class="line">[upgrade/config] Reading configuration from the cluster...</span><br><span class="line">[upgrade/config] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line">[preflight] Running pre-flight checks.</span><br><span class="line">[upgrade] Running cluster health checks</span><br><span class="line">[upgrade/version] You have chosen to change the cluster version to &quot;v1.18.20&quot;</span><br><span class="line">[upgrade/versions] Cluster version: v1.18.0</span><br><span class="line">[upgrade/versions] kubeadm version: v1.18.20</span><br><span class="line">[upgrade/confirm] Are you sure you want to proceed with the upgrade? [y/N]: y</span><br><span class="line">[upgrade/prepull] Will prepull images for components [kube-apiserver kube-controller-manager kube-scheduler etcd]</span><br><span class="line">[upgrade/prepull] Prepulling image for component etcd.</span><br><span class="line">[upgrade/prepull] Prepulling image for component kube-apiserver.</span><br><span class="line">[upgrade/prepull] Prepulling image for component kube-controller-manager.</span><br><span class="line">[upgrade/prepull] Prepulling image for component kube-scheduler.</span><br><span class="line">[apiclient] Found 1 Pods for label selector k8s-app=upgrade-prepull-kube-apiserver</span><br><span class="line">[apiclient] Found 0 Pods for label selector k8s-app=upgrade-prepull-kube-scheduler</span><br><span class="line">[apiclient] Found 1 Pods for label selector k8s-app=upgrade-prepull-kube-controller-manager</span><br><span class="line">[apiclient] Found 0 Pods for label selector k8s-app=upgrade-prepull-etcd</span><br><span class="line">[apiclient] Found 1 Pods for label selector k8s-app=upgrade-prepull-kube-scheduler</span><br><span class="line">[apiclient] Found 1 Pods for label selector k8s-app=upgrade-prepull-etcd</span><br><span class="line">[upgrade/prepull] Prepulled image for component etcd.</span><br><span class="line">[upgrade/prepull] Prepulled image for component kube-controller-manager.</span><br><span class="line">[upgrade/prepull] Prepulled image for component kube-scheduler.</span><br><span class="line">[upgrade/prepull] Prepulled image for component kube-apiserver.</span><br><span class="line">[upgrade/prepull] Successfully prepulled the images for all the control plane components</span><br><span class="line">[upgrade/apply] Upgrading your Static Pod-hosted control plane to version &quot;v1.18.20&quot;...</span><br><span class="line">Static pod: kube-apiserver-k8s-master hash: 19d5d1ced032267ed77feb4529dd89b6</span><br><span class="line">Static pod: kube-controller-manager-k8s-master hash: c99654aba4d0627786d6f7f6ca3cf8a4</span><br><span class="line">Static pod: kube-scheduler-k8s-master hash: b901723f22729fcf965378cb64525117</span><br><span class="line">[upgrade/etcd] Upgrading to TLS for etcd</span><br><span class="line">[upgrade/etcd] Non fatal issue encountered during upgrade: the desired etcd version for this Kubernetes version &quot;v1.18.20&quot; is &quot;3.4.3-0&quot;, but the current etcd version is &quot;3.4.3&quot;. Won&#x27;t downgrade etcd, instead just continue</span><br><span class="line">[upgrade/staticpods] Writing new Static Pod manifests to &quot;/etc/kubernetes/tmp/kubeadm-upgraded-manifests350292254&quot;</span><br><span class="line">W0906 12:02:13.995741 3880622 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;</span><br><span class="line">[upgrade/staticpods] Preparing for &quot;kube-apiserver&quot; upgrade</span><br><span class="line">[upgrade/staticpods] Renewing apiserver certificate</span><br><span class="line">[upgrade/staticpods] Renewing apiserver-kubelet-client certificate</span><br><span class="line">[upgrade/staticpods] Renewing front-proxy-client certificate</span><br><span class="line">[upgrade/staticpods] Renewing apiserver-etcd-client certificate</span><br><span class="line">[upgrade/staticpods] Moved new manifest to &quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot; and backed up old manifest to &quot;/etc/kubernetes/tmp/kubeadm-backup-manifests-2021-09-06-12-02-12/kube-apiserver.yaml&quot;</span><br><span class="line">[upgrade/staticpods] Waiting for the kubelet to restart the component</span><br><span class="line">[upgrade/staticpods] This might take a minute or longer depending on the component/version gap (timeout 5m0s)</span><br><span class="line">Static pod: kube-apiserver-k8s-master hash: 19d5d1ced032267ed77feb4529dd89b6</span><br><span class="line">Static pod: kube-apiserver-k8s-master hash: 4b88bf8fbacc7b265a069eb9c4b66b28</span><br><span class="line">[apiclient] Found 1 Pods for label selector component=kube-apiserver</span><br><span class="line">[upgrade/staticpods] Component &quot;kube-apiserver&quot; upgraded successfully!</span><br><span class="line">[upgrade/staticpods] Preparing for &quot;kube-controller-manager&quot; upgrade</span><br><span class="line">[upgrade/staticpods] Renewing controller-manager.conf certificate</span><br><span class="line">[upgrade/staticpods] Moved new manifest to &quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot; and backed up old manifest to &quot;/etc/kubernetes/tmp/kubeadm-backup-manifests-2021-09-06-12-02-12/kube-controller-manager.yaml&quot;</span><br><span class="line">[upgrade/staticpods] Waiting for the kubelet to restart the component</span><br><span class="line">[upgrade/staticpods] This might take a minute or longer depending on the component/version gap (timeout 5m0s)</span><br><span class="line">Static pod: kube-controller-manager-k8s-master hash: c99654aba4d0627786d6f7f6ca3cf8a4</span><br><span class="line">Static pod: kube-controller-manager-k8s-master hash: 36c14c513b299c15f058e6c085d03822</span><br><span class="line">[apiclient] Found 1 Pods for label selector component=kube-controller-manager</span><br><span class="line">[upgrade/staticpods] Component &quot;kube-controller-manager&quot; upgraded successfully!</span><br><span class="line">[upgrade/staticpods] Preparing for &quot;kube-scheduler&quot; upgrade</span><br><span class="line">[upgrade/staticpods] Renewing scheduler.conf certificate</span><br><span class="line">[upgrade/staticpods] Moved new manifest to &quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot; and backed up old manifest to &quot;/etc/kubernetes/tmp/kubeadm-backup-manifests-2021-09-06-12-02-12/kube-scheduler.yaml&quot;</span><br><span class="line">[upgrade/staticpods] Waiting for the kubelet to restart the component</span><br><span class="line">[upgrade/staticpods] This might take a minute or longer depending on the component/version gap (timeout 5m0s)</span><br><span class="line">Static pod: kube-scheduler-k8s-master hash: b901723f22729fcf965378cb64525117</span><br><span class="line">Static pod: kube-scheduler-k8s-master hash: f8fbdc8109ec0a5dd59acbd52a6c05ca</span><br><span class="line">[apiclient] Found 1 Pods for label selector component=kube-scheduler</span><br><span class="line">[upgrade/staticpods] Component &quot;kube-scheduler&quot; upgraded successfully!</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.18&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.18&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">[upgrade/successful] SUCCESS! Your cluster was upgraded to &quot;v1.18.20&quot;. Enjoy!</span><br><span class="line"></span><br><span class="line">[upgrade/kubelet] Now that your control plane is upgraded, please proceed with upgrading your kubelets if you haven&#x27;t already done so.</span><br></pre></td></tr></table></figure>

<p>在其他master节点升级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm upgrade node</span><br></pre></td></tr></table></figure>

<p>执行后输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm upgrade node</span><br><span class="line">[upgrade] Reading configuration from the cluster...</span><br><span class="line">[upgrade] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line">[upgrade] Upgrading your Static Pod-hosted control plane instance to version &quot;v1.18.20&quot;...</span><br><span class="line">Static pod: kube-apiserver-k8s-master hash: 4b88bf8fbacc7b265a069eb9c4b66b28</span><br><span class="line">Static pod: kube-controller-manager-k8s-master hash: 36c14c513b299c15f058e6c085d03822</span><br><span class="line">Static pod: kube-scheduler-k8s-master hash: f8fbdc8109ec0a5dd59acbd52a6c05ca</span><br><span class="line">[upgrade/etcd] Upgrading to TLS for etcd</span><br><span class="line">[upgrade/etcd] Non fatal issue encountered during upgrade: the desired etcd version for this Kubernetes version &quot;v1.18.20&quot; is &quot;3.4.3-0&quot;, but the current etcd version is &quot;3.4.3&quot;. Won&#x27;t downgrade etcd, instead just continue</span><br><span class="line">[upgrade/staticpods] Writing new Static Pod manifests to &quot;/etc/kubernetes/tmp/kubeadm-upgraded-manifests324894338&quot;</span><br><span class="line">W0906 13:40:16.646872 3923374 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;</span><br><span class="line">[upgrade/staticpods] Preparing for &quot;kube-apiserver&quot; upgrade</span><br><span class="line">[upgrade/staticpods] Current and new manifests of kube-apiserver are equal, skipping upgrade</span><br><span class="line">[upgrade/staticpods] Preparing for &quot;kube-controller-manager&quot; upgrade</span><br><span class="line">[upgrade/staticpods] Current and new manifests of kube-controller-manager are equal, skipping upgrade</span><br><span class="line">[upgrade/staticpods] Preparing for &quot;kube-scheduler&quot; upgrade</span><br><span class="line">[upgrade/staticpods] Current and new manifests of kube-scheduler are equal, skipping upgrade</span><br><span class="line">[upgrade] The control plane instance for this node was successfully updated!</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.18&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[upgrade] The configuration for this node was successfully updated!</span><br><span class="line">[upgrade] Now you should go ahead and upgrade the kubelet package using your package manager.</span><br></pre></td></tr></table></figure>

<h2 id="升级flannel-可选">1.4. 升级flannel (可选)</h2><p>这个根据实际情况升级，如不是使用的<code>flannel</code>请参考官网</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<h2 id="验证群集升级">1.5. 验证群集升级</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s-master   Ready    master   6d19h   v1.18.0</span><br><span class="line">k8s-node1    Ready    &lt;none&gt;   6d19h   v1.18.0</span><br><span class="line">k8s-node2    Ready    &lt;none&gt;   6d19h   v1.18.0</span><br></pre></td></tr></table></figure>

<p>kubectl版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;18&quot;, GitVersion:&quot;v1.18.20&quot;, GitCommit:&quot;632ed300f2c34f6d6d15ca4cef3d3c7073412212&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-08-19T15:45:37Z&quot;, GoVersion:&quot;go1.16.7&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;18&quot;, GitVersion:&quot;v1.18.0&quot;, GitCommit:&quot;9e991415386e4cf155a24b1da15becaa390438d8&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-03-25T14:50:46Z&quot;, GoVersion:&quot;go1.13.8&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br><span class="line">WARNING: version difference between client (1.18) and server (1.18) exceeds the supported minor version skew of +/-1</span><br></pre></td></tr></table></figure>

<p>这里发现<code>version</code>还是<code>1.18.0</code>, kubectl的server还是<code>1.18.0</code>，只需要重启一下kubelet即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload;systemctl restart kubelet.service</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有节点都需要执行</p>
</blockquote>
<p>再次查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm upgrade plan</span><br><span class="line">[upgrade/config] Making sure the configuration is correct:</span><br><span class="line">[upgrade/config] Reading configuration from the cluster...</span><br><span class="line">[upgrade/config] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line">[preflight] Running pre-flight checks.</span><br><span class="line">[upgrade] Running cluster health checks</span><br><span class="line">[upgrade] Fetching available versions to upgrade to</span><br><span class="line">[upgrade/versions] Cluster version: v1.18.20</span><br><span class="line">[upgrade/versions] kubeadm version: v1.18.20</span><br><span class="line">I0906 13:48:20.988439 3926779 version.go:255] remote version is much newer: v1.22.1; falling back to: stable-1.18</span><br><span class="line">[upgrade/versions] Latest stable version: v1.18.20</span><br><span class="line">[upgrade/versions] Latest stable version: v1.18.20</span><br><span class="line">[upgrade/versions] Latest version in the v1.18 series: v1.18.20</span><br><span class="line">[upgrade/versions] Latest version in the v1.18 series: v1.18.20</span><br><span class="line"></span><br><span class="line">Awesome, you&#x27;re up-to-date! Enjoy!</span><br></pre></td></tr></table></figure>

<p>最后发现群集已经为1.18.20</p>
<h2 id="更新群集证书">1.6. 更新群集证书</h2><ul>
<li>更新所有证书</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm alpha certs renew all</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm alpha certs renew all</span><br><span class="line">[renew] Reading configuration from the cluster...</span><br><span class="line">[renew] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line"></span><br><span class="line">certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed</span><br><span class="line">certificate for serving the Kubernetes API renewed</span><br><span class="line">certificate the apiserver uses to access etcd renewed</span><br><span class="line">certificate for the API server to connect to kubelet renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the controller manager to use renewed</span><br><span class="line">certificate for liveness probes to healthcheck etcd renewed</span><br><span class="line">certificate for etcd nodes to communicate with each other renewed</span><br><span class="line">certificate for serving etcd renewed</span><br><span class="line">certificate for the front proxy client renewed</span><br><span class="line">certificate embedded in the kubeconfig file for the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>

<ul>
<li>更新其他单个证书请参考官方文档<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-alpha/#cmd-certs-renew">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-alpha/#cmd-certs-renew</a></li>
</ul>
<p>查看当前证书时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm alpha certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Sep 06, 2022 05:51 UTC   364d                                    no      </span><br><span class="line">apiserver                  Sep 06, 2022 05:51 UTC   364d            ca                      no      </span><br><span class="line">apiserver-etcd-client      Sep 06, 2022 05:51 UTC   364d            etcd-ca                 no      </span><br><span class="line">apiserver-kubelet-client   Sep 06, 2022 05:51 UTC   364d            ca                      no      </span><br><span class="line">controller-manager.conf    Sep 06, 2022 05:51 UTC   364d                                    no      </span><br><span class="line">etcd-healthcheck-client    Sep 06, 2022 05:51 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-peer                  Sep 06, 2022 05:51 UTC   364d            etcd-ca                 no      </span><br><span class="line">etcd-server                Sep 06, 2022 05:51 UTC   364d            etcd-ca                 no      </span><br><span class="line">front-proxy-client         Sep 06, 2022 05:51 UTC   364d            front-proxy-ca          no      </span><br><span class="line">scheduler.conf             Sep 06, 2022 05:51 UTC   364d                                    no      </span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Aug 28, 2031 07:52 UTC   9y              no      </span><br><span class="line">etcd-ca                 Aug 28, 2031 07:53 UTC   9y              no      </span><br><span class="line">front-proxy-ca          Aug 28, 2031 07:53 UTC   9y              no      </span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl彩色输出之kubecolor</title>
    <url>/p/14849.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="kubecolor是什么？">1. kubecolor是什么？</h1><p>kubecolor 为您的<code>kubectl</code>命令输出着色，不执行任何其他操作。kubecolor 在内部调用<code>kubectl</code>command 并尝试对输出进行着色，以便你可以使用 kubecolor 作为 kubectl 的完整替代方案。</p>
<blockquote>
<p>kubecolor项目地址：<a href="https://github.com/dty1er/kubecolor">https://github.com/dty1er/kubecolor</a></p>
</blockquote>
<h1 id="安装">2. 安装</h1><h2 id="源码编译安装">2.1. 源码编译安装</h2><p>通过github下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/dty1er/kubecolor.git</span><br></pre></td></tr></table></figure>

<p>安装golang</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure>

<p>通过go命令构建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd kubecolor/</span><br><span class="line">go build -o kubecolor cmd/kubecolor/main.go</span><br></pre></td></tr></table></figure>

<p>我这里遇到报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go: github.com/MakeNowJust/heredoc@v1.0.0: Get &quot;https://proxy.golang.org/github.com/%21make%21now%21just/heredoc/@v/v1.0.0.mod&quot;: dial tcp 172.217.160.113:443: i/o timeout</span><br></pre></td></tr></table></figure>

<p>配置go proxy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<p>再次使用go命令构建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master kubecolor]# go build -o kubecolor cmd/kubecolor/main.go</span><br><span class="line">go: downloading github.com/mattn/go-colorable v0.1.8</span><br><span class="line">go: downloading github.com/mattn/go-isatty v0.0.12</span><br><span class="line">go: downloading golang.org/x/sys v0.0.0-20210110051926-789bb1bd4061</span><br></pre></td></tr></table></figure>

<p>设置别名让kubectl使用kubecolor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;alias kubectl=&#x27;/root/kubecolor/kubecolor&#x27;&quot; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"># 使配置生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="MAC系统">2.2. MAC系统</h2><p>如果是mac用户可以使用brew安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install hidetatz/tap/kubecolor</span><br></pre></td></tr></table></figure>



<h1 id="效果展示">3. 效果展示</h1><blockquote>
<p>kubectl get pod -n kube-system</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202112171012618.png"></p>
<blockquote>
<p>kubectl describe pod -n istio-system istio-egressgateway-7f4864f59c-448qp</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/k8s/202112171015665.png"></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio安装配置及使用</title>
    <url>/p/46059.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>Istio是一个开放平台，提供统一的方法来集成微服务、管理跨微服务的交通流、执行政策和聚合遥测数据。Istio的控制平面在底层的集群管理平台(如Kubernetes)上提供了一个抽象层。</p>
<h1 id="k8s安装Istio">1. k8s安装Istio</h1><p>软件下载地址：<a href="https://github.com/istio/istio/">https://github.com/istio/istio/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># wget https://github.com/istio/istio/releases/download/1.12.0/istio-1.12.0-linux-amd64.tar.gz</span></span><br><span class="line">[root@k8s-master1 ~]<span class="comment"># ls</span></span><br><span class="line">istio-1.12.0-linux-amd64.tar.gz</span><br><span class="line">[root@k8s-master ~]<span class="comment"># tar xf istio-1.12.0-linux-amd64.tar.gz </span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># cd istio-1.12.0/</span></span><br><span class="line">[root@k8s-master istio-1.12.0]<span class="comment"># ll</span></span><br><span class="line">total 28</span><br><span class="line">drwxr-x---  2 root root    22 Nov 19 01:38 bin</span><br><span class="line">-rw-r--r--  1 root root 11348 Nov 19 01:38 LICENSE</span><br><span class="line">drwxr-xr-x  5 root root    52 Nov 19 01:38 manifests</span><br><span class="line">-rw-r-----  1 root root   827 Nov 19 01:38 manifest.yaml</span><br><span class="line">-rw-r--r--  1 root root  5866 Nov 19 01:38 README.md</span><br><span class="line">drwxr-xr-x 21 root root  4096 Nov 19 01:38 samples</span><br><span class="line">drwxr-xr-x  3 root root    57 Nov 19 01:38 tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝istioctl到/usr/bin下</span></span><br><span class="line">[root@k8s-master istio-1.12.0]<span class="comment"># cp bin/istioctl /usr/bin/</span></span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]<span class="comment"># istioctl install --set profile=demo -y</span></span><br><span class="line">✔ Istio core installed</span><br><span class="line">✔ Istiod installed</span><br><span class="line">✔ Egress gateways installed</span><br><span class="line">✔ Ingress gateways installed</span><br><span class="line">✔ Installation complete</span><br><span class="line">Making this installation the default <span class="keyword">for</span> injection and validation.</span><br><span class="line">Thank you <span class="keyword">for</span> installing Istio 1.12.  Please take a few minutes to tell us about your install/upgrade experience!  https://forms.gle/FegQbc9UvePd4Z9z7</span><br></pre></td></tr></table></figure>

<p>验证istio是否部署成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]<span class="comment"># kubectl get pods -n istio-system</span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">istio-egressgateway-7f4864f59c-wglp2   1/1     Running   0          16m</span><br><span class="line">istio-ingressgateway-55d9fb9f-zrscz    1/1     Running   0          16m</span><br><span class="line">istiod-555d47cb65-2jm2t                1/1     Running   0          16m</span><br></pre></td></tr></table></figure>

<p>如果需要卸载，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]<span class="comment"># istioctl manifest generate --set profile=demo | kubectl delete -f -</span></span><br><span class="line"></span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;authorizationpolicies.security.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;destinationrules.networking.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;envoyfilters.networking.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;gateways.networking.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;istiooperators.install.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;peerauthentications.security.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;requestauthentications.security.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;serviceentries.networking.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;sidecars.networking.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;telemetries.telemetry.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;virtualservices.networking.istio.io&quot;</span> deleted</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io <span class="string">&quot;wasmplugins.extensions.istio.io&quot;</span> deleted</span><br><span class="line">........</span><br></pre></td></tr></table></figure>

<h1 id="Istio部署在线书店bookinfo">2. Istio部署在线书店bookinfo</h1><h2 id="在线书城功能介绍">2.1. 在线书城功能介绍</h2><p>在线书店-<code>bookinfo</code>：该应用由四个单独的微服务构成，这个应用模仿在线书店的一个分类，显示一本书的信息，页面上会显示一本书的描述，书籍的细节（ISBN、页数等），以及关于这本书的一些评论。</p>
<p>Bookinfo应用分为四个单独的微服务<br>1）productpage这个微服务会调用details和reviews两个微服务，用来生成页面；<br>2）details这个微服务中包含了书籍的信息；<br>3）reviews这个微服务中包含了书籍相关的评论，它还会调用ratings微服务；<br>4）ratings这个微服务中包含了由书籍评价组成的评级信息。</p>
<p>reviews微服务有3个版本<br>1）v1版本不会调用ratings服务；<br>2）v2版本会调用ratings服务，并使用1到5个黑色星形图标来显示评分信息；<br>3）v3版本会调用ratings服务，并使用1到5个红色星形图标来显示评分信息。</p>
<p>Bookinfo应用中的几个微服务是由不同的语言编写的。这些服务对istio并无依赖，但是构成了一个有代表性的服务网格的例子：它由多个服务、多个语言构成，并且reviews服务具有多个版本。</p>
<p>要在Istio中运行这一应用，无需对应用自身做出任何改变。 只要简单的在 Istio 环境中对服务进行配置和运行，具体一点说就是<strong>把 Envoy sidecar 注入到每个服务之中</strong>。 最终的部署结果将如下图所示：</p>
<p>所有的微服务都和<code>Envoy sidecar</code>集成在一起，被集成服务所有的出入流量都被envoy sidecar 所劫持，这样就为外部控制准备了所需的 Hook，然后就可以利用Istio控制平面为应用提供服务路由、遥测数据收集以及策略实施等功能。</p>
<h2 id="在线书城部署">2.2. 在线书城部署</h2><p>istio默认自动注入 sidecar，需要为default命名空间打上标签<code>istio-injection=enabled</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# kubectl label namespace default istio-injection=enabled</span><br><span class="line">namespace/default labeled</span><br><span class="line"></span><br><span class="line">[root@k8s-master istio-1.12.0]# kubectl describe ns default |grep istio-injection</span><br><span class="line">Labels:       istio-injection=enabled</span><br></pre></td></tr></table></figure>

<p>部署应用bookinfo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# ls samples/bookinfo/platform/kube/bookinfo.yaml </span><br><span class="line">samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line">[root@k8s-master istio-1.12.0]#  kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line">service/details created</span><br><span class="line">serviceaccount/bookinfo-details created</span><br><span class="line">deployment.apps/details-v1 created</span><br><span class="line">service/ratings created</span><br><span class="line">serviceaccount/bookinfo-ratings created</span><br><span class="line">deployment.apps/ratings-v1 created</span><br><span class="line">service/reviews created</span><br><span class="line">serviceaccount/bookinfo-reviews created</span><br><span class="line">deployment.apps/reviews-v1 created</span><br><span class="line">deployment.apps/reviews-v2 created</span><br><span class="line">deployment.apps/reviews-v3 created</span><br><span class="line">service/productpage created</span><br><span class="line">serviceaccount/bookinfo-productpage created</span><br><span class="line">deployment.apps/productpage-v1 created</span><br></pre></td></tr></table></figure>

<p>确认所有的服务和 Pod 都已经正确的定义和启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# kubectl get services</span><br><span class="line">NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">details       ClusterIP   10.106.21.152    &lt;none&gt;        9080/TCP   48s</span><br><span class="line">kubernetes    ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    20d</span><br><span class="line">nginx         ClusterIP   10.103.198.110   &lt;none&gt;        8000/TCP   17d</span><br><span class="line">productpage   ClusterIP   10.105.235.207   &lt;none&gt;        9080/TCP   48s</span><br><span class="line">ratings       ClusterIP   10.98.222.244    &lt;none&gt;        9080/TCP   48s</span><br><span class="line">reviews       ClusterIP   10.108.100.54    &lt;none&gt;        9080/TCP   48s</span><br><span class="line"></span><br><span class="line">[root@k8s-master istio-1.12.0]# kubectl get pods </span><br><span class="line">NAME                              READY   STATUS    RESTARTS       AGE</span><br><span class="line">details-v1-79f774bdb9-x27dm       2/2     Running   0              75s</span><br><span class="line">nginx-6799fc88d8-hfhwt            1/1     Running   3 (2d2h ago)   17d</span><br><span class="line">productpage-v1-6b746f74dc-98prq   2/2     Running   0              75s</span><br><span class="line">ratings-v1-b6994bb9-nf5hl         2/2     Running   0              75s</span><br><span class="line">reviews-v1-545db77b95-snh2s       2/2     Running   0              75s</span><br><span class="line">reviews-v2-7bf8c9648f-s8d8n       2/2     Running   0              75s</span><br><span class="line">reviews-v3-84779c7bbc-9w7vj       2/2     Running   0              75s</span><br></pre></td></tr></table></figure>

<p>确认 Bookinfo 应用是否正在运行，在某个Pod中用curl命令对应用发送请求，例如ratings：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;) -c ratings -- curl productpage:9080/productpage | grep -o &quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span><br><span class="line">&lt;title&gt;Simple Bookstore App&lt;/title&gt;  #出现这个表示正常</span><br></pre></td></tr></table></figure>

<p>确定Ingress的IP和端口</p>
<p>现在Bookinfo服务已经启动并运行，你需要使应用程序可以从Kubernetes集群外部访问，例如从浏览器访问，那可以用Istio Gateway来实现这个目标。</p>
<p>为应用程序定义gateway网关</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@k8s-master</span> <span class="string">istio-1.12.0</span>]<span class="comment"># cat samples/bookinfo/networking/bookinfo-gateway.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingressgateway</span> <span class="comment"># use istio default controller</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bookinfo-gateway</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">exact:</span> <span class="string">/productpage</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">/static</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">exact:</span> <span class="string">/login</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">exact:</span> <span class="string">/logout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">/api/v1/products</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">productpage</span></span><br><span class="line">        <span class="attr">port:</span></span><br><span class="line">          <span class="attr">number:</span> <span class="number">9080</span></span><br></pre></td></tr></table></figure>

<p>应用yaml文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line">gateway.networking.istio.io/bookinfo-gateway created</span><br><span class="line">virtualservice.networking.istio.io/bookinfo created</span><br><span class="line"></span><br><span class="line">[root@k8s-master istio-1.12.0]# kubectl get gateway</span><br><span class="line">NAME               AGE</span><br><span class="line">bookinfo-gateway   33s</span><br><span class="line"></span><br><span class="line">[root@k8s-master istio-1.12.0]# kubectl get virtualservice</span><br><span class="line">NAME       GATEWAYS               HOSTS   AGE</span><br><span class="line">bookinfo   [&quot;bookinfo-gateway&quot;]   [&quot;*&quot;]   51s</span><br></pre></td></tr></table></figure>

<p>确定ingress ip和端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# kubectl get svc istio-ingressgateway -n istio-system</span><br><span class="line">NAME                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                                                                      AGE</span><br><span class="line">istio-ingressgateway   LoadBalancer   10.102.214.74   &lt;pending&gt;     15021:31077/TCP,80:30181/TCP,443:31334/TCP,31400:32201/TCP,15443:30785/TCP   16m</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果EXTERNAL-IP值已设置，说明环境正在使用外部负载均衡，可以用其为ingress gateway 提供服务。 如果EXTERNAL-IP值为<none>（或持续显示<pending>）， 说明环境没有提供外部负载均衡，无法使用ingress gateway。在这种情况下，你可以使用服务的NodePort访问网关。 </pending></none></p>
</blockquote>
<p>获取Istio Gateway的地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#x27;&#123;.spec.ports[?(@.name==&quot;http2&quot;)].nodePort&#125;&#x27;)</span><br><span class="line">[root@k8s-master istio-1.12.0]# echo $INGRESS_PORT</span><br><span class="line">30181</span><br><span class="line">[root@k8s-master istio-1.12.0]# export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#x27;&#123;.spec.ports[?(@.name==&quot;https&quot;)].nodePort&#125;&#x27;)</span><br><span class="line">[root@k8s-master istio-1.12.0]# echo $SECURE_INGRESS_PORT</span><br><span class="line">31334</span><br></pre></td></tr></table></figure>

<p>设置GATEWAY_URL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# INGRESS_HOST=192.168.101.201</span><br><span class="line">[root@k8s-master istio-1.12.0]# export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT</span><br><span class="line">[root@k8s-master istio-1.12.0]# echo $GATEWAY_URL</span><br><span class="line">192.168.101.201:30181</span><br></pre></td></tr></table></figure>

<p>curl命令来确认是否能够从集群外部访问 Bookinfo 应用程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# curl -s http://$&#123;GATEWAY_URL&#125;/productpage | grep -o &quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span><br><span class="line">&lt;title&gt;Simple Bookstore App&lt;/title&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器打开网址http://$GATEWAY_URL/productpage，也就是192.168.101.201:30181/productpage来浏览应用的Web页面，如果刷新几次应用的页面，就会看到 productpage 页面中会随机展示 reviews 服务的不同版本的效果（红色、黑色的星形或者没有显示）</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/istio/202112101113494.png"></p>
<p>istio的<code>ingressgateway</code>访问：<a href="https://istio.io/docs/examples/bookinfo/#determine-the-ingress-ip-and-port">https://istio.io/docs/examples/bookinfo/#determine-the-ingress-ip-and-port</a></p>
<p>扩展：添加外部IP-extertal-IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# kubectl edit svc istio-ingressgateway -n istio-system</span><br><span class="line">spec:</span><br><span class="line">  allocateLoadBalancerNodePorts: true</span><br><span class="line">  clusterIP: 10.102.214.74</span><br><span class="line">  clusterIPs:</span><br><span class="line">  - 10.102.214.74</span><br><span class="line">  externalIPs:</span><br><span class="line">  - 192.168.101.201</span><br><span class="line"></span><br><span class="line">[root@k8s-master istio-1.12.0]# kubectl get svc istio-ingressgateway -n istio-system</span><br><span class="line">NAME                   TYPE           CLUSTER-IP      EXTERNAL-IP       PORT(S)                                                                      AGE</span><br><span class="line">istio-ingressgateway   LoadBalancer   10.102.214.74   192.168.101.201   15021:31077/TCP,80:30181/TCP,443:31334/TCP,31400:32201/TCP,15443:30785/TCP   27m</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/istio/202112101118461.png"></p>
<p>配置域名解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.101.201 productpage.kubelet.cn</span><br></pre></td></tr></table></figure>

<p>在浏览器访问：<a href="http://productpage.kubelet.cn/productpage">http://productpage.kubelet.cn/productpage</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/istio/202112101124394.png"></p>
<h2 id="卸载bookinfo服务">2.3. 卸载bookinfo服务</h2><p>删除路由规则，并销毁应用的 Pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-master istio-1.12.0]# sh samples/bookinfo/platform/kube/cleanup.sh</span><br><span class="line">namespace ? [default] </span><br><span class="line">using NAMESPACE=default</span><br><span class="line">virtualservice.networking.istio.io &quot;bookinfo&quot; deleted</span><br><span class="line">gateway.networking.istio.io &quot;bookinfo-gateway&quot; deleted</span><br><span class="line">Application cleanup may take up to one minute</span><br><span class="line">service &quot;details&quot; deleted</span><br><span class="line">serviceaccount &quot;bookinfo-details&quot; deleted</span><br><span class="line">deployment.apps &quot;details-v1&quot; deleted</span><br><span class="line">service &quot;ratings&quot; deleted</span><br><span class="line">serviceaccount &quot;bookinfo-ratings&quot; deleted</span><br><span class="line">deployment.apps &quot;ratings-v1&quot; deleted</span><br><span class="line">service &quot;reviews&quot; deleted</span><br><span class="line">serviceaccount &quot;bookinfo-reviews&quot; deleted</span><br><span class="line">deployment.apps &quot;reviews-v1&quot; deleted</span><br><span class="line">deployment.apps &quot;reviews-v2&quot; deleted</span><br><span class="line">deployment.apps &quot;reviews-v3&quot; deleted</span><br><span class="line">service &quot;productpage&quot; deleted</span><br><span class="line">serviceaccount &quot;bookinfo-productpage&quot; deleted</span><br><span class="line">deployment.apps &quot;productpage-v1&quot; deleted</span><br><span class="line">Application cleanup successful</span><br></pre></td></tr></table></figure>

<p>确认应用已经关停</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get virtualservices     #-- there should be no virtual services</span><br><span class="line">kubectl get destinationrules   #-- there should be no destination rules</span><br><span class="line">kubectl get gateway           #-- there should be no gateway</span><br><span class="line">kubectl get pods               #-- the Bookinfo pods should be deleted</span><br></pre></td></tr></table></figure>







































]]></content>
      <categories>
        <category>Istio</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql导入数据慢解决方法</title>
    <url>/p/1525.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>mysql导入慢，添加两个参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">max_allowed_packet   客户端/服务器之间通信的缓存区的最大大小</span><br><span class="line">net_buffer_length    TCP/IP和套接字通信缓冲区大小，创建长度达net_buffer_length行。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：max_allowed_packet; net_buffer_length 这两个参数不能比目标数据度配置大，否则会报错。</p>
</blockquote>
<p>先查看目标库的参数值 如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">&#x27;max_allowed_packet&#x27;</span>;</span></span><br><span class="line">+--------------------+----------+</span><br><span class="line">| Variable_name      | Value    |</span><br><span class="line">+--------------------+----------+</span><br><span class="line">| max_allowed_packet | 67108864 |</span><br><span class="line">+--------------------+----------+</span><br><span class="line">1 row in set (0.22 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">&#x27;net_buffer_length&#x27;</span>;</span></span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| net_buffer_length | 16384 |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>命令行加上两个参数执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p&#x27;Pass!234&#x27; data_base_name --max_allowed_packet=67108864 --net_buffer_length=16384&lt;your_sql_script.sql</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Redis部署PHP留言板应用程序</title>
    <url>/p/13297.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="使用Redis部署PHP留言板应用程序">1. 使用Redis部署PHP留言板应用程序</h1><p>这个实例是Kubernetes官网的实例，地址：</p>
<blockquote>
<p><a href="https://kubernetes.io/zh/docs/tutorials/stateless-application/guestbook/">https://kubernetes.io/zh/docs/tutorials/stateless-application/guestbook/</a></p>
</blockquote>
<p>本教程向您展示如何使用 Kubernetes 和 <a href="https://www.docker.com/">Docker</a> 构建和部署 一个简单的_(非面向生产)的_多层 web 应用程序。本例由以下组件组成：</p>
<ul>
<li>单实例 <a href="https://www.redis.io/">Redis</a> 以保存留言板条目</li>
<li>多个 web 前端实例</li>
</ul>
<h2 id="教程目标">1.1. 教程目标</h2><ul>
<li>启动 Redis 领导者（Leader）</li>
<li>启动两个 Redis 跟随者（Follower）</li>
<li>公开并查看前端服务</li>
<li>清理</li>
</ul>
<h2 id="准备开始">1.2. 准备开始</h2><p>你必须拥有一个 Kubernetes 的集群，同时你的 Kubernetes 集群必须带有 kubectl 命令行工具。 如果你还没有集群，你可以通过 <a href="https://kubernetes.io/zh/docs/tasks/tools/#minikube">Minikube</a> 构建一 个你自己的集群，或者你可以使用下面任意一个 Kubernetes 工具构建：</p>
<ul>
<li><a href="https://www.katacoda.com/courses/kubernetes/playground">Katacoda</a></li>
<li><a href="http://labs.play-with-k8s.com/">玩转 Kubernetes</a></li>
</ul>
<p>您的 Kubernetes 服务器版本必须不低于版本 v1.14. 要获知版本信息，请输入 <code>kubectl version</code>.</p>
<h2 id="启动-Redis-数据库">1.3. 启动 Redis 数据库</h2><p>留言板应用程序使用 Redis 存储数据。</p>
<h3 id="创建-Redis-Deployment">1.3.1. 创建 Redis Deployment</h3><p>下面包含的清单文件指定了一个 Deployment 控制器，该控制器运行一个 Redis Pod 副本。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh/examples/application/guestbook/redis-leader-deployment.yaml"><code>application/guestbook/redis-leader-deployment.yaml</code> </a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOURCE: https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-leader</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">leader</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">leader</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">leader</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&quot;docker.io/redis:6.0.5&quot;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>在下载清单文件的目录中启动终端窗口。</p>
</li>
<li><p>从 <code>redis-leader-deployment.yaml</code> 文件中应用 Redis Deployment：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/guestbook/redis-leader-deployment.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Pod 列表以验证 Redis Pod 是否正在运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>响应应该与此类似：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">redis-leader-fb76b4755-xjr2n   1/1     Running   0          13s</span><br></pre></td></tr></table></figure></li>
<li><p>运行以下命令查看 Redis Deployment 中的日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs -f deployment/redis-leader</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建-Redis-领导者服务">1.3.2. 创建 Redis 领导者服务</h3><p>留言板应用程序需要往 Redis 中写数据。因此，需要创建 <a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">Service</a> 来转发 Redis Pod 的流量。Service 定义了访问 Pod 的策略。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh/examples/application/guestbook/redis-leader-service.yaml"><code>application/guestbook/redis-leader-service.yaml</code> </a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOURCE: https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-leader</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">leader</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">leader</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>使用下面的 <code>redis-leader-service.yaml</code> 文件创建 Redis的服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/guestbook/redis-leader-service.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>查询服务列表验证 Redis 服务是否正在运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get service</span><br></pre></td></tr></table></figure>

<p>响应应该与此类似：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME           TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP    1m</span><br><span class="line">redis-leader   ClusterIP   10.103.78.24 &lt;none&gt;        6379/TCP   16s</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p><strong>说明：</strong> 这个清单文件创建了一个名为 <code>redis-leader</code> 的 Service，其中包含一组 与前面定义的标签匹配的标签，因此服务将网络流量路由到 Redis Pod 上。</p>
</blockquote>
<h3 id="设置-Redis-跟随者">1.3.3. 设置 Redis 跟随者</h3><p>尽管 Redis 领导者只有一个 Pod，你可以通过添加若干 Redis 跟随者来将其配置为高可用状态， 以满足流量需求。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh/examples/application/guestbook/redis-follower-deployment.yaml"><code>application/guestbook/redis-follower-deployment.yaml</code> </a><img src="https://d33wubrfki0l68.cloudfront.net/0901162ab78eb4ff2e9e5dc8b17c3824befc91a6/44ccd/images/copycode.svg" alt="Copy application/guestbook/redis-follower-deployment.yaml to clipboard"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOURCE: https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-follower</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">follower</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">follower</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">follower</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">heyuze/gb-redis-follower:v2</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里image官方的镜像拉取不到，我将官方镜像放到我的docker镜像仓库中，如果这里想使用官方的路径，可以将我的镜像拉取到本地后使用如下命令修改：</p>
<p>docker tag heyuze/gb-redis-follower:v2 gcr.io/google_samples/gb-redis-follower:v2</p>
</blockquote>
<ol>
<li><p>应用下面的 <code>redis-follower-deployment.yaml</code> 文件创建 Redis Deployment：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/guestbook/redis-follower-deployment.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>通过查询 Pods 列表，验证两个 Redis 跟随者副本在运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>响应应该类似于这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">redis-follower-dddfbdcc9-82sfr   1/1     Running   0          37s</span><br><span class="line">redis-follower-dddfbdcc9-qrt5k   1/1     Running   0          38s</span><br><span class="line">redis-leader-fb76b4755-xjr2n     1/1     Running   0          11m</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建-Redis-跟随者服务">1.3.4. 创建 Redis 跟随者服务</h3><p>Guestbook 应用需要与 Redis 跟随者通信以读取数据。 为了让 Redis 跟随者可被发现，你必须创建另一个 <a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">Service</a>。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh/examples/application/guestbook/redis-follower-service.yaml"><code>application/guestbook/redis-follower-service.yaml</code> </a><img src="https://d33wubrfki0l68.cloudfront.net/0901162ab78eb4ff2e9e5dc8b17c3824befc91a6/44ccd/images/copycode.svg" alt="Copy application/guestbook/redis-follower-service.yaml to clipboard"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOURCE: https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-follower</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">follower</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># the port that this service should serve on</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">follower</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>应用如下所示 <code>redis-follower-service.yaml</code> 文件中的 Redis Service：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/guestbook/redis-follower-service.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Service 列表，验证 Redis 服务在运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get service</span><br></pre></td></tr></table></figure>

<p>响应应该类似于这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    3d19h</span><br><span class="line">redis-follower   ClusterIP   10.110.162.42   &lt;none&gt;        6379/TCP   9s</span><br><span class="line">redis-leader     ClusterIP   10.103.78.24    &lt;none&gt;        6379/TCP   6m10s</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p><strong>说明：</strong></p>
<p>清单文件创建了一个名为 <code>redis-follower</code> 的 Service，该 Service 具有一些与之前所定义的标签相匹配的标签，因此该 Service 能够将网络流量 路由到 Redis Pod 之上。</p>
</blockquote>
<h2 id="设置并公开留言板前端">1.4. 设置并公开留言板前端</h2><p>现在你有了一个为 Guestbook 应用配置的 Redis 存储处于运行状态， 接下来可以启动 Guestbook 的 Web 服务器了。 与 Redis 跟随者类似，前端也是使用 Kubernetes Deployment 来部署的。</p>
<p>Guestbook 应用使用 PHP 前端。该前端被配置成与后端的 Redis 跟随者或者 领导者服务通信，具体选择哪个服务取决于请求是读操作还是写操作。 前端对外暴露一个 JSON 接口，并提供基于 jQuery-Ajax 的用户体验。</p>
<h3 id="创建-Guestbook-前端-Deployment">1.4.1. 创建 Guestbook 前端 Deployment</h3><p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh/examples/application/guestbook/frontend-deployment.yaml"><code>application/guestbook/frontend-deployment.yaml</code> </a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOURCE: https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">guestbook</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">guestbook</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php-redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gcr.io/google_samples/gb-frontend:v5</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GET_HOSTS_FROM</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;dns&quot;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里也是image官方的镜像拉取不到，我将官方镜像放到我的docker镜像仓库中，如果这里想使用官方的路径，可以将我的镜像拉取到本地后使用如下命令修改：</p>
<p>docker tag heyuze/gb-frontend:v5 gcr.io/google_samples/gb-frontend:v5</p>
</blockquote>
<ol>
<li><p>应用来自 <code>frontend-deployment.yaml</code> 文件的前端 Deployment：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/guestbook/frontend-deployment.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Pod 列表，验证三个前端副本正在运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods -l app=guestbook -l tier=frontend</span><br></pre></td></tr></table></figure>

<p>响应应该与此类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-85595f5bf9-5tqhb   1/1     Running   0          47s</span><br><span class="line">frontend-85595f5bf9-qbzwm   1/1     Running   0          47s</span><br><span class="line">frontend-85595f5bf9-zchwc   1/1     Running   0          47s</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建前端服务">1.4.2. 创建前端服务</h3><p>应用的 <code>Redis</code> 服务只能在 Kubernetes 集群中访问，因为服务的默认类型是 <a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/#publishing-services-service-types">ClusterIP</a>。 <code>ClusterIP</code> 为服务指向的 Pod 集提供一个 IP 地址。这个 IP 地址只能在集群中访问。</p>
<p>如果你希望访客能够访问你的 Guestbook，你必须将前端服务配置为外部可见的， 以便客户端可以从 Kubernetes 集群之外请求服务。 然而即便使用了 <code>ClusterIP</code>，Kubernetes 用户仍可以通过 <code>kubectl port-forward</code> 访问服务。</p>
<blockquote>
<p><strong>说明：</strong> 一些云提供商，如 Google Compute Engine 或 Google Kubernetes Engine， 支持外部负载均衡器。如果你的云提供商支持负载均衡器，并且你希望使用它， 只需取消注释 <code>type: LoadBalancer</code>。</p>
</blockquote>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh/examples/application/guestbook/frontend-service.yaml"><code>application/guestbook/frontend-service.yaml</code> </a><img src="https://d33wubrfki0l68.cloudfront.net/0901162ab78eb4ff2e9e5dc8b17c3824befc91a6/44ccd/images/copycode.svg" alt="Copy application/guestbook/frontend-service.yaml to clipboard"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOURCE: https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">guestbook</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># if your cluster supports it, uncomment the following to automatically create</span></span><br><span class="line">  <span class="comment"># an external load-balanced IP for the frontend service.</span></span><br><span class="line">  <span class="comment"># type: LoadBalancer</span></span><br><span class="line">  <span class="comment">#type: LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># the port that this service should serve on</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">guestbook</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>应用来自 <code>frontend-service.yaml</code> 文件中的前端服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/guestbook/frontend-service.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Service 列表以验证前端服务正在运行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get services</span><br></pre></td></tr></table></figure>

<p>响应应该与此类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">frontend         ClusterIP   10.97.28.230    &lt;none&gt;        80/TCP     19s</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    3d19h</span><br><span class="line">redis-follower   ClusterIP   10.110.162.42   &lt;none&gt;        6379/TCP   5m48s</span><br><span class="line">redis-leader     ClusterIP   10.103.78.24    &lt;none&gt;        6379/TCP   11m</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="通过-kubectl-port-forward-查看前端服务">1.4.3. 通过 kubectl port-forward 查看前端服务</h3><ol>
<li><p>运行以下命令将本机的 <code>8080</code> 端口转发到服务的 <code>80</code> 端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl port-forward svc/frontend 8080:80</span><br></pre></td></tr></table></figure>

<p>响应应该与此类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Forwarding from 127.0.0.1:8080 -&gt; 80</span><br><span class="line">Forwarding from [::1]:8080 -&gt; 80</span><br></pre></td></tr></table></figure></li>
<li><p>在浏览器中加载 <a href="http://localhost:8080/">http://localhost:8080</a> 页面以查看 Guestbook。</p>
</li>
</ol>
<h3 id="通过-LoadBalancer-查看前端服务">1.4.4. 通过 LoadBalancer 查看前端服务</h3><p>如果你部署了 <code>frontend-service.yaml</code>，需要找到用来查看 Guestbook 的 IP 地址。</p>
<ol>
<li><p>运行以下命令以获取前端服务的 IP 地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get service frontend</span><br></pre></td></tr></table></figure>

<p>响应应该与此类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME       TYPE           CLUSTER-IP      EXTERNAL-IP        PORT(S)        AGE</span><br><span class="line">frontend   LoadBalancer   10.51.242.136   109.197.92.229     80:32372/TCP   1m</span><br></pre></td></tr></table></figure></li>
<li><p>复制这里的外部 IP 地址，然后在浏览器中加载页面以查看留言板。</p>
</li>
</ol>
<blockquote>
<p><strong>说明：</strong></p>
<p>尝试通过输入消息并点击 Submit 来添加一些留言板条目。 你所输入的消息会在前端显示。这一消息表明数据被通过你 之前所创建的 Service 添加到 Redis 存储中。</p>
</blockquote>
<h2 id="扩展-Web-前端">1.5. 扩展 Web 前端</h2><p>你可以根据需要执行伸缩操作，这是因为服务器本身被定义为使用一个 Deployment 控制器的 Service。</p>
<ol>
<li><p>运行以下命令扩展前端 Pod 的数量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment frontend --replicas=5</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Pod 列表验证正在运行的前端 Pod 的数量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>响应应该类似于这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-85595f5bf9-5df5m        1/1     Running   0          83s</span><br><span class="line">frontend-85595f5bf9-7zmg5        1/1     Running   0          83s</span><br><span class="line">frontend-85595f5bf9-cpskg        1/1     Running   0          15m</span><br><span class="line">frontend-85595f5bf9-l2l54        1/1     Running   0          14m</span><br><span class="line">frontend-85595f5bf9-l9c8z        1/1     Running   0          14m</span><br><span class="line">redis-follower-dddfbdcc9-82sfr   1/1     Running   0          97m</span><br><span class="line">redis-follower-dddfbdcc9-qrt5k   1/1     Running   0          97m</span><br><span class="line">redis-leader-fb76b4755-xjr2n     1/1     Running   0          108m</span><br></pre></td></tr></table></figure></li>
<li><p>运行以下命令缩小前端 Pod 的数量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment frontend --replicas=2</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Pod 列表验证正在运行的前端 Pod 的数量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>响应应该类似于这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-85595f5bf9-cpskg        1/1     Running   0          16m</span><br><span class="line">frontend-85595f5bf9-l9c8z        1/1     Running   0          15m</span><br><span class="line">redis-follower-dddfbdcc9-82sfr   1/1     Running   0          98m</span><br><span class="line">redis-follower-dddfbdcc9-qrt5k   1/1     Running   0          98m</span><br><span class="line">redis-leader-fb76b4755-xjr2n     1/1     Running   0          109m</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="清理现场">1.6. 清理现场</h2><p>删除 Deployments 和服务还会删除正在运行的 Pod。 使用标签用一个命令删除多个资源。</p>
<ol>
<li><p>运行以下命令以删除所有 Pod，Deployments 和 Services。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete deployment -l app=redis</span><br><span class="line">kubectl delete service -l app=redis</span><br><span class="line">kubectl delete deployment frontend</span><br><span class="line">kubectl delete service frontend</span><br></pre></td></tr></table></figure>

<p>响应应该是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deployment.apps &quot;redis-follower&quot; deleted</span><br><span class="line">deployment.apps &quot;redis-leader&quot; deleted</span><br><span class="line">deployment.apps &quot;frontend&quot; deleted</span><br><span class="line">service &quot;frontend&quot; deleted</span><br></pre></td></tr></table></figure></li>
<li><p>查询 Pod 列表，确认没有 Pod 在运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>响应应该是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No resources found in default namespace.</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="接下来">1.7. 接下来</h2><ul>
<li>完成 <a href="https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/">Kubernetes 基础</a> 交互式教程</li>
<li>使用 Kubernetes 创建一个博客，使用 <a href="https://kubernetes.io/zh/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/#visit-your-new-wordpress-blog">MySQL 和 Wordpress 的持久卷</a></li>
<li>进一步阅读<a href="https://kubernetes.io/zh/docs/concepts/services-networking/connect-applications-service/">连接应用程序</a></li>
<li>进一步阅读<a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/manage-deployment/#using-labels-effectively">管理资源</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo下Next博客配置</title>
    <url>/p/40150.html</url>
    <content><![CDATA[<p>本文介绍Next主题相关的一些配置</p>
<p><escape><span id="more"></span></escape></p>
<h1 id="常用命令">1. 常用命令</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;postName&quot;</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;pageName&quot;</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="meta">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo help  <span class="meta">#查看帮助</span></span><br><span class="line">hexo version  <span class="meta">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<h1 id="live2d看板娘">2. live2d看板娘</h1><blockquote>
<p><a href="https://github.com/xiazeyu/live2d-widget-models">GitHub - xiazeyu/live2d-widget-models: The model library for live2d-widget.js</a></p>
</blockquote>
<p>安装模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>安装模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure>

<p>所有模型列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>

<p>在主目录下新建一个live2d_models文件夹，将node_modules文件夹下live2d-widget-model-hibiki复制到live2d_models文件夹中</p>
<p><img src="https://cdn.jsdelivr.net/gh/heyonggs/images@master/wp/2021/hexo/202109231140681.png"></p>
<p>在主配置文件_config.yml添加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看板娘参数配置</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hibiki   #下载模型参数</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>

<p>接着运行hexo s查看效果</p>
<h1 id="hexo的next配置版权信息">3. hexo的next配置版权信息</h1><p>在每篇文章末尾默认增加文章作者、链接以及版权信息，是部分博主所需要的，而Hexo的next（v7.1.0）主题默认就集成了该功能，只需要在设置中启用即可。配置方式简要描述，实际效果与下面信息类似。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本文作者： 何宇泽</span><br><span class="line">本文链接： https://heyonggs.github.io</span><br><span class="line">版权声明： 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure>

<p>配置步骤</p>
<p>修改next主题的配置文件（./themes/next/_config.yml），搜索到<code>creative_commons:</code>标签， </p>
<ul>
<li>sidebar参数表示在侧边栏有一个版权的图片链接，</li>
<li>post参数表示在每一篇文章末尾自动增加本文作者、本文链接、版权声明三个信息，</li>
<li>language参数表示点击链接后显示的版权信息的语言。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language: deed.zh</span><br></pre></td></tr></table></figure>

<p>如果想个性化配置版权信息，可修改配置文件(./themes/next/layout/_partials/post/post-copyright.swig)，如果想修改显示的样式可修改配置文件(./themes/next/source/css/_common/components/post/post-copyright.styl) 。</p>
<h1 id="修改文章底部的那个带-号的标签">4. 修改文章底部的那个带#号的标签</h1><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code> &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">  &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">     &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">    &#123;% for tag in post.tags %&#125;</span><br><span class="line">       &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h1 id="右上角添加fork-me-on-github">5. 右上角添加fork me on github</h1><p>在主配置文件中打开github_banner配置，permalink修改为自己的github地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https://github.com/youname</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>



<h1 id="Hexo为标题自动添加序号">6. Hexo为标题自动添加序号</h1><p>在 Hexo 中，使用了一个 hexo 的插件， Hexo 根目录执行下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-heading-index --save</span><br></pre></td></tr></table></figure>

<p>然后在 Hexo 根目录的 _config.yml 最后加上下面的配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">heading_index:</span><br><span class="line">  enable: true</span><br><span class="line">  index_styles: &quot;&#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125;&quot;</span><br><span class="line">  connector: &quot;.&quot;</span><br><span class="line">  global_prefix: &quot;&quot;</span><br><span class="line">  global_suffix: &quot;. &quot;</span><br></pre></td></tr></table></figure>



<h1 id="hexo-取消“文章目录”的自动编号">7. hexo 取消“文章目录”的自动编号</h1><p>修改主题配置文件那里的<code>number</code>为<code>false</code></p>
<p>themes/next/_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: false</span><br></pre></td></tr></table></figure>



<h1 id="短地址">8. 短地址</h1><p>每次从博客分享文章给别人都很苦恼，Hexo 默认生成的链接太长了，而且一旦文章名字改变，链接也跟着改变。有没有什么方法让地址尽量短小精悍，同时永久化呢？</p>
<p>感谢 <a href="https://github.com/rozbo/hexo-abbrlink">rozbo/hexo-abbrlink</a>，完美解决此痛点。</p>
<p>使用方法也很简单：</p>
<ol>
<li>在 Hexo 博客根目录，执行 <code>npm install hexo-abbrlink --save</code></li>
<li>在主配置文件 <code>_config.yml</code> 写入</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更改 permalink 值</span><br><span class="line">permalink: p/:abbrlink.html </span><br></pre></td></tr></table></figure>



<h1 id="自动部署hexo博客到阿里云服务器">9. 自动部署hexo博客到阿里云服务器</h1><blockquote>
<p><a href="https://blog.csdn.net/weixin_33790053/article/details/91366365">https://blog.csdn.net/weixin_33790053/article/details/91366365</a></p>
</blockquote>
<p>之前博客是托管在GitHub Page，访问速度不太乐观，后来买了台阿里云ECS，把博客迁了过来，下面介绍如何将博客直接推送到阿里云ECS(CentOS系统)，实现自动部署。</p>
<h2 id="环境">9.1. 环境</h2><ol>
<li>博客网站在服务器上已经搭建好并且可以正常访问；</li>
<li>服务器上已经安装git；</li>
<li>本地hexo能够正常运行。</li>
</ol>
<h2 id="思路">9.2. 思路</h2><p>在阿里云服务器上搭建git仓库，本地博客目录下运行<code>hexo g -d</code>生成静态文件，并提交到git仓库，从而触发git hook，最后再执行bash命令将文件拷贝到博客网站目录。</p>
<h2 id="创建仓库">9.3. 创建仓库</h2><p>在阿里云服务器上创建git仓库，注意不要漏掉<code>--bare</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /www/blog.git &amp;&amp; <span class="built_in">cd</span> /www/blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>

<h2 id="Hexo配置">9.4. Hexo配置</h2><p>修改本地博客目录下的<code>_config.yml</code>配置，其中<code>xx.xxx.xx.xxx</code>是你的服务器ip地址，<code>/www/blog.git</code>是你上一步创建的git仓库路径，<code>master</code>是分支。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  <span class="attr">message</span>: update</span><br><span class="line">  <span class="attr">repo</span>: root@xx.xxx.xx.xxx:<span class="regexp">/www/</span>blog.git,master</span><br></pre></td></tr></table></figure>

<h2 id="插件安装">9.5. 插件安装</h2><p>此插件的作用是执行deploy时，将hexo生成的静态文件提交到<code>_config.yml</code>配置中的<code>deploy.repo</code>地址，即<code>root@xx.xxx.xx.xxx:/www/blog.git,master</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="自动部署">9.6. 自动部署</h2><p>本地的deploy命令只是把静态文件提交到git仓库，既然有git hooks，那么我们可以在有文件提交上来时，再将文件拷贝到博客网站目录。 进入到git仓库hooks目录，并创建钩子<code>post-receive</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/blog.git/hooks</span><br><span class="line">touch post-receive</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure>

<p>然后输入下面脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -l</span></span><br><span class="line">GIT_REPO=/www/blog.git</span><br><span class="line">TMP_GIT_CLONE=/www/tmp/blog</span><br><span class="line">PUBLIC_WWW=/usr/share/nginx/html/</span><br><span class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>/www/blog.git</code>为仓库路径，<code>/www/blog</code>为你的博客网站路径，<code>/www/tmp/blog</code>是临时目录，git会先将文件拉到临时目录，然后再将所有文件拷贝到博客网站目录<code>/www/blog</code>。</p>
<p>更改目录权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br><span class="line">mkdir -p /www/tmp/blog</span><br><span class="line">chmod 777 -R /usr/share/nginx/html/</span><br><span class="line">chmod 777 -R /www/blo</span><br></pre></td></tr></table></figure>

<h2 id="运行">9.7. 运行</h2><p>完成上述步骤之后，就可以测试一下了，在本地博客目录下运行<code>hexo g -d</code>，此时可能还需要输入服务器密码，最后输出以下结果说明部署成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure>



<h1 id="修改主题页面布局为圆角">10. 修改主题页面布局为圆角</h1><p>打开文件，路径：\themes\next\source\css_variables\Gemini.styl ，添加以下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改主题页面布局为圆角</span></span><br><span class="line"><span class="variable">$border</span>-radius-inner = <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="variable">$border</span>-radius = <span class="number">15px</span>;</span><br></pre></td></tr></table></figure>



<h1 id="增加-canvas-粒子时钟">11. 增加 canvas 粒子时钟</h1><blockquote>
<p><a href="https://tding.top/archives/dd68b70.html">https://tding.top/archives/dd68b70.html</a></p>
</blockquote>
<p>在 <code>/themes/next/layout/_custom/</code> 目录下，新建 <code>clock.swig</code> 文件，内容如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div style<span class="operator">=</span><span class="string">&quot;&quot;</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>canvas id<span class="operator">=</span><span class="string">&quot;canvas&quot;</span> style<span class="operator">=</span><span class="string">&quot;width:60%;&quot;</span><span class="operator">&gt;</span>当前浏览器不支持canvas，请更换浏览器后再试<span class="operator">&lt;/</span>canvas<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>script<span class="operator">&gt;</span></span><br><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> digit<span class="operator">=</span></span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//0</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        ],<span class="comment">//1</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        ],<span class="comment">//2</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//3</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        ],<span class="comment">//4</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//5</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//6</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//7</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//8</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ],<span class="comment">//9</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ]<span class="comment">//:</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas <span class="operator">=</span> document.getElementById(&#x27;canvas&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(canvas.getContext)&#123;</span><br><span class="line">    <span class="keyword">var</span> cxt <span class="operator">=</span> canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">    <span class="comment">//声明canvas的宽高</span></span><br><span class="line">    <span class="keyword">var</span> <span class="type">H</span> <span class="operator">=</span> <span class="number">100</span>,<span class="type">W</span> <span class="operator">=</span> <span class="number">700</span>;</span><br><span class="line">    canvas.height <span class="operator">=</span> <span class="type">H</span>;</span><br><span class="line">    canvas.width <span class="operator">=</span> <span class="type">W</span>;</span><br><span class="line">    cxt.fillStyle <span class="operator">=</span> &#x27;#f00&#x27;;</span><br><span class="line">    cxt.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储时间数据</span></span><br><span class="line">    <span class="keyword">var</span> data <span class="operator">=</span> [];</span><br><span class="line">    <span class="comment">//存储运动的小球</span></span><br><span class="line">    <span class="keyword">var</span> balls <span class="operator">=</span> [];</span><br><span class="line">    <span class="comment">//设置粒子半径</span></span><br><span class="line">    <span class="keyword">var</span> <span class="type">R</span> <span class="operator">=</span> canvas.height<span class="operator">/</span><span class="number">20</span><span class="operator">-</span><span class="number">1</span>;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        <span class="keyword">var</span> temp <span class="operator">=</span> <span class="operator">/</span>(\d)(\d):(\d)(\d):(\d)(\d)<span class="operator">/</span>.exec(new <span class="type">Date</span>());</span><br><span class="line">        <span class="comment">//存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span></span><br><span class="line">        data.push(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*生成点阵数字*/</span></span><br><span class="line">    function renderDigit(index,num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> digit[num].length; i<span class="operator">++</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="operator">=</span> <span class="number">0</span>; j <span class="operator">&lt;</span> digit[num][i].length; j<span class="operator">++</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(digit[num][i][j] <span class="operator">==</span> <span class="number">1</span>)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line">                    cxt.arc(<span class="number">14</span><span class="operator">*</span>(<span class="type">R</span><span class="operator">+</span><span class="number">2</span>)<span class="operator">*</span>index <span class="operator">+</span> j<span class="operator">*</span><span class="number">2</span><span class="operator">*</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">+</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>),i<span class="operator">*</span><span class="number">2</span><span class="operator">*</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">+</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>),<span class="type">R</span>,<span class="number">0</span>,<span class="number">2</span><span class="operator">*</span><span class="type">Math</span>.<span class="type">PI</span>);</span><br><span class="line">                    cxt.closePath();</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*更新时钟*/</span></span><br><span class="line">    function updateDigitTime()&#123;</span><br><span class="line">        <span class="keyword">var</span> changeNumArray <span class="operator">=</span> [];</span><br><span class="line">        <span class="keyword">var</span> temp <span class="operator">=</span> <span class="operator">/</span>(\d)(\d):(\d)(\d):(\d)(\d)<span class="operator">/</span>.exec(new <span class="type">Date</span>());</span><br><span class="line">        <span class="keyword">var</span> <span class="type">NewData</span> <span class="operator">=</span> [];</span><br><span class="line">        <span class="type">NewData</span>.push(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> data.length<span class="operator">-</span><span class="number">1</span>; i <span class="operator">&gt;=</span><span class="number">0</span> ; i<span class="operator">--</span>)&#123;</span><br><span class="line">            <span class="comment">//时间发生变化</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="type">NewData</span>[i] <span class="operator">!==</span> data[i])&#123;</span><br><span class="line">                <span class="comment">//将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span></span><br><span class="line">                changeNumArray.push(i<span class="operator">+</span>&#x27;<span class="keyword">_</span>&#x27;<span class="operator">+</span>(<span class="type">Number</span>(data[i])<span class="operator">+</span><span class="number">1</span>)<span class="operator">%</span><span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加小球</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span>; i<span class="operator">&lt;</span> changeNumArray.length; i<span class="operator">++</span>)&#123;</span><br><span class="line">            addBalls.apply(this,changeNumArray[i].split(&#x27;<span class="keyword">_</span>&#x27;));</span><br><span class="line">        &#125;</span><br><span class="line">        data <span class="operator">=</span> <span class="type">NewData</span>.concat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*更新小球状态*/</span></span><br><span class="line">    function updateBalls()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> balls.length; i<span class="operator">++</span>)&#123;</span><br><span class="line">            balls[i].stepY <span class="operator">+=</span> balls[i].disY;</span><br><span class="line">            balls[i].x <span class="operator">+=</span> balls[i].stepX;</span><br><span class="line">            balls[i].y <span class="operator">+=</span> balls[i].stepY;</span><br><span class="line">            <span class="keyword">if</span>(balls[i].x <span class="operator">&gt;</span> <span class="type">W</span> <span class="operator">+</span> <span class="type">R</span> <span class="operator">||</span> balls[i].y <span class="operator">&gt;</span> <span class="type">H</span> <span class="operator">+</span> <span class="type">R</span>)&#123;</span><br><span class="line">                balls.splice(i,<span class="number">1</span>);</span><br><span class="line">                i<span class="operator">--</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*增加要运动的小球*/</span></span><br><span class="line">    function addBalls(index,num)&#123;</span><br><span class="line">        <span class="keyword">var</span> numArray <span class="operator">=</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">var</span> colorArray <span class="operator">=</span>  [<span class="string">&quot;#3BE&quot;</span>,<span class="string">&quot;#09C&quot;</span>,<span class="string">&quot;#A6C&quot;</span>,<span class="string">&quot;#93C&quot;</span>,<span class="string">&quot;#9C0&quot;</span>,<span class="string">&quot;#690&quot;</span>,<span class="string">&quot;#FB3&quot;</span>,<span class="string">&quot;#F80&quot;</span>,<span class="string">&quot;#F44&quot;</span>,<span class="string">&quot;#C00&quot;</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> digit[num].length; i<span class="operator">++</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="operator">=</span> <span class="number">0</span>; j <span class="operator">&lt;</span> digit[num][i].length; j<span class="operator">++</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(digit[num][i][j] <span class="operator">==</span> <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> ball <span class="operator">=</span> &#123;</span><br><span class="line">                        x:<span class="number">14</span><span class="operator">*</span>(<span class="type">R</span><span class="operator">+</span><span class="number">2</span>)<span class="operator">*</span>index <span class="operator">+</span> j<span class="operator">*</span><span class="number">2</span><span class="operator">*</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">+</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>),</span><br><span class="line">                        y:i<span class="operator">*</span><span class="number">2</span><span class="operator">*</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">+</span>(<span class="type">R</span><span class="operator">+</span><span class="number">1</span>),</span><br><span class="line">                        stepX:<span class="type">Math</span>.floor(<span class="type">Math</span>.random() <span class="operator">*</span> <span class="number">4</span> <span class="operator">-</span><span class="number">2</span>),</span><br><span class="line">                        stepY:<span class="operator">-</span><span class="number">2</span><span class="operator">*</span>numArray[<span class="type">Math</span>.floor(<span class="type">Math</span>.random()<span class="operator">*</span>numArray.length)],</span><br><span class="line">                        color:colorArray[<span class="type">Math</span>.floor(<span class="type">Math</span>.random()<span class="operator">*</span>colorArray.length)],</span><br><span class="line">                        disY:<span class="number">1</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*渲染*/</span></span><br><span class="line">    function render()&#123;</span><br><span class="line">        <span class="comment">//重置画布宽度，达到清空画布的效果</span></span><br><span class="line">        canvas.height <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//渲染时钟</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> data.length; i<span class="operator">++</span>)&#123;</span><br><span class="line">            renderDigit(i,data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//渲染小球</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> balls.length; i<span class="operator">++</span>)&#123;</span><br><span class="line">            cxt.beginPath();</span><br><span class="line">            cxt.arc(balls[i].x,balls[i].y,<span class="type">R</span>,<span class="number">0</span>,<span class="number">2</span><span class="operator">*</span><span class="type">Math</span>.<span class="type">PI</span>);</span><br><span class="line">            cxt.fillStyle <span class="operator">=</span> balls[i].color;</span><br><span class="line">            cxt.closePath();</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearInterval(oTimer);</span><br><span class="line">    <span class="keyword">var</span> oTimer <span class="operator">=</span> setInterval(function()&#123;</span><br><span class="line">        <span class="comment">//更新时钟</span></span><br><span class="line">        updateDigitTime();</span><br><span class="line">        <span class="comment">//更新小球状态</span></span><br><span class="line">        updateBalls();</span><br><span class="line">        <span class="comment">//渲染</span></span><br><span class="line">        render();</span><br><span class="line">    &#125;,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>/themes/next/layout/_custom/sidebar.swig</code> 中引入：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;<span class="operator">%</span> include &#x27;<span class="operator">./</span>clock.swig&#x27; <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>/themes/next/layout/_macro/sidebar.swig</code> 中引入：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">      <span class="operator">&lt;</span>div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">site</span>-<span class="title">overview</span>-<span class="title">wrap</span> <span class="title">sidebar</span>-<span class="title">panel</span></span>&#123;<span class="operator">%</span> <span class="keyword">if</span> not display_toc or toc(page.content).length <span class="operator">&lt;=</span> <span class="number">1</span> <span class="operator">%</span>&#125; sidebar<span class="operator">-</span>panel<span class="operator">-</span>active&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;</span>site<span class="operator">-</span>overview<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">          ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          &#123;% if theme.recent_posts %&#125;</span></span><br><span class="line"><span class="string">              &lt;div class=&quot;</span>links<span class="operator">-</span>of<span class="operator">-</span>blogroll motion<span class="operator">-</span>element &#123;&#123; <span class="string">&quot;links-of-blogroll-&quot;</span> <span class="operator">+</span> theme.recent_posts_layout  &#125;&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;</span>links<span class="operator">-</span>of<span class="operator">-</span>blogroll<span class="operator">-</span>title<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;!-- modify icon to fire by szw --&gt;</span></span><br><span class="line"><span class="string">                  &lt;i class=&quot;</span>fa fa<span class="operator">-</span>history fa<span class="operator">-</span>&#123;&#123; theme.recent_posts_icon <span class="operator">|</span> lower &#125;&#125;<span class="string">&quot; aria-hidden=&quot;</span><span class="literal">true</span><span class="string">&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">                  &#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;ul class=&quot;</span>links<span class="operator">-</span>of<span class="operator">-</span>blogroll<span class="operator">-</span>list<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                  &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;</span></span><br><span class="line"><span class="string">                  &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;</span></span><br><span class="line"><span class="string">                      &lt;a href=&quot;</span>&#123;&#123; url_for(post.path) &#125;&#125;<span class="string">&quot; title=&quot;</span>&#123;&#123; post.title &#125;&#125;<span class="string">&quot; target=&quot;</span>_blank<span class="string">&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;/li&gt;</span></span><br><span class="line"><span class="string">                  &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &#123;% endif %&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+         &#123;% if theme.custom_file_path.sidebar %&#125;</span></span><br><span class="line"><span class="string">+           &#123;% set custom_sidebar = &#x27;../../../../&#x27; + theme.custom_file_path.sidebar %&#125;</span></span><br><span class="line"><span class="string">+         &#123;% else %&#125;</span></span><br><span class="line"><span class="string">+           &#123;% set custom_sidebar = &#x27;../_custom/sidebar.swig&#x27; %&#125;</span></span><br><span class="line"><span class="string">+         &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">+         &#123;% include custom_sidebar %&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我放在到顶部按钮上面</p>
<p>canvas 粒子时钟样式</p>
<p>在 <code>/themes/next/source/css/_custom/custom.styl</code> 添加：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 粒子时钟样式</span></span><br><span class="line"><span class="selector-class">.site-overview</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canvas<span class="selector-id">#canvas</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：另一款样式：<a href="https://www.html5tricks.com/html5-canvas-dance-time.html">https://www.html5tricks.com/html5-canvas-dance-time.html</a></p>
</blockquote>
<h1 id="文章评分功能">12. 文章评分功能</h1><blockquote>
<p>widgetpack：<a href="https://widgetpack.com/">https://widgetpack.com/</a></p>
</blockquote>
<p>NexT主题中已经集成了widgetpack的星级评分功能，只需注册账号后，修改主题配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Star rating support to each article.</span></span><br><span class="line"><span class="comment"># To get your ID visit https://widgetpack.com</span></span><br><span class="line"><span class="attr">rating:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span>  <span class="string">your</span> <span class="string">id</span>  <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line">  <span class="attr">color:</span>  <span class="string">ff9800</span></span><br></pre></td></tr></table></figure>



<h1 id="网站运行时间">13. 网站运行时间</h1><p>打开<code>.\themes\next\layout\_partials\footer.swig</code>并在最后面添加下列代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>span id<span class="operator">=</span><span class="string">&quot;timeDate&quot;</span><span class="operator">&gt;</span>载入天数<span class="operator">...&lt;/</span>span<span class="operator">&gt;&lt;</span>span id<span class="operator">=</span><span class="string">&quot;times&quot;</span><span class="operator">&gt;</span>载入时分秒<span class="operator">...&lt;/</span>span<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>script<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">var</span> now <span class="operator">=</span> new <span class="type">Date</span>();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        <span class="keyword">var</span> grt<span class="operator">=</span> new <span class="type">Date</span>(<span class="string">&quot;03/04/2015 00:00:00&quot;</span>);</span><br><span class="line">        now.setTime(now.getTime()<span class="operator">+</span><span class="number">250</span>);</span><br><span class="line">        days <span class="operator">=</span> (now <span class="operator">-</span> grt ) <span class="operator">/</span> <span class="number">1000</span> <span class="operator">/</span> <span class="number">60</span> <span class="operator">/</span> <span class="number">60</span> <span class="operator">/</span> <span class="number">24</span>; dnum <span class="operator">=</span> <span class="type">Math</span>.floor(days);</span><br><span class="line">        hours <span class="operator">=</span> (now <span class="operator">-</span> grt ) <span class="operator">/</span> <span class="number">1000</span> <span class="operator">/</span> <span class="number">60</span> <span class="operator">/</span> <span class="number">60</span> <span class="operator">-</span> (<span class="number">24</span> <span class="operator">*</span> dnum); hnum <span class="operator">=</span> <span class="type">Math</span>.floor(hours);</span><br><span class="line">        <span class="keyword">if</span>(<span class="type">String</span>(hnum).length <span class="operator">==</span><span class="number">1</span> )&#123;hnum <span class="operator">=</span> <span class="string">&quot;0&quot;</span> <span class="operator">+</span> hnum;&#125; minutes <span class="operator">=</span> (now <span class="operator">-</span> grt ) <span class="operator">/</span> <span class="number">1000</span> <span class="operator">/</span><span class="number">60</span> <span class="operator">-</span> (<span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> dnum) <span class="operator">-</span> (<span class="number">60</span> <span class="operator">*</span> hnum);</span><br><span class="line">        mnum <span class="operator">=</span> <span class="type">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="type">String</span>(mnum).length <span class="operator">==</span><span class="number">1</span> )&#123;mnum <span class="operator">=</span> <span class="string">&quot;0&quot;</span> <span class="operator">+</span> mnum;&#125;</span><br><span class="line">        seconds <span class="operator">=</span> (now <span class="operator">-</span> grt ) <span class="operator">/</span> <span class="number">1000</span> <span class="operator">-</span> (<span class="number">24</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> dnum) <span class="operator">-</span> (<span class="number">60</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> hnum) <span class="operator">-</span> (<span class="number">60</span> <span class="operator">*</span> mnum);</span><br><span class="line">        snum <span class="operator">=</span> <span class="type">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="type">String</span>(snum).length <span class="operator">==</span><span class="number">1</span> )&#123;snum <span class="operator">=</span> <span class="string">&quot;0&quot;</span> <span class="operator">+</span> snum;&#125;</span><br><span class="line">        document.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML <span class="operator">=</span> <span class="string">&quot;本站已安全运行 &quot;</span><span class="operator">+</span>dnum<span class="operator">+</span><span class="string">&quot; 天 &quot;</span>;</span><br><span class="line">        document.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML <span class="operator">=</span> hnum <span class="operator">+</span> <span class="string">&quot; 小时 &quot;</span> <span class="operator">+</span> mnum <span class="operator">+</span> <span class="string">&quot; 分 &quot;</span> <span class="operator">+</span> snum <span class="operator">+</span> <span class="string">&quot; 秒&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span><br><span class="line"><span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="阅读全文按钮开启">14. 阅读全文按钮开启</h1><p>我们首先找到在next主题下的<code>_config.yml</code>代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommand.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将false修改为true即可，length是显示摘要的长度。</p>
<p>如过需要自动控制可在文章中输入<!-- more -->来控制，不生效可用<escape><!-- more --></escape>来控制。</p>
</blockquote>
<h1 id="配置实时聊天">15. 配置实时聊天</h1><blockquote>
<p><a href="https://www.tidiochat.com/">https://www.tidiochat.com</a></p>
</blockquote>
<p>一个实时聊天客服系统tidio</p>
<p>首先需要去tidio官网注册一个账户，注册地址：<a href="https://www.tidio.com/panel/register">https://www.tidio.com/panel/register</a></p>
<p>注册后填好网站，然后获取Public Key，获取地址：<a href="https://www.tidiochat.com/panel/settings/developer">https://www.tidiochat.com/panel/settings/developer</a></p>
<p>我们首先找到在next主题下的<code>_config.yml</code>代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">key:</span> </span><br></pre></td></tr></table></figure>

<p>将enable修改为true，然后输入tidio控制台获取的key</p>
<h1 id="设置头像圆角及旋转">16. 设置头像圆角及旋转</h1><p>将头像图片放入目录：/themes/next/source/images</p>
<p>重命名为：avatar.[格式]</p>
<p>找到next主题配置文件<code>_config.yml</code>下的代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>url：头像图片路径</p>
<p>rounded：头像显示圆圈配置</p>
<p>rotated：头像随鼠标旋转</p>
</blockquote>
<h1 id="设置背景彩带">17. 设置背景彩带</h1><blockquote>
<p><a href="https://github.com/theme-next/theme-next-canvas-ribbon">https://github.com/theme-next/theme-next-canvas-ribbon</a></p>
<p><a href="https://github.com/zproo/canvas-ribbon">https://github.com/zproo/canvas-ribbon</a></p>
</blockquote>
<h2 id="方法一">17.1. 方法一</h2><p>转到 NexT 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  crowdin.yml  docs  gulpfile.js  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class="built_in">source</span></span><br></pre></td></tr></table></figure>

<p>获取模块</p>
<p>将模块安装到 source/lib 目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon <span class="built_in">source</span>/lib/canvas-ribbon</span><br></pre></td></tr></table></figure>

<p>设置</p>
<p>在 NexT _config.yml 文件中启用模块：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">90</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>自定义背景彩带的宽度、透明度和z-index属性</p>
<blockquote>
<ul>
<li><strong><code>size</code></strong>: 彩带宽度, 默认: <strong><code>90</code></strong>.</li>
<li><strong><code>alpha</code></strong>: 彩带透明度, 默认: <strong><code>0.6</code></strong>.</li>
<li><strong><code>zIndex</code></strong>: 彩带html标签的z-index属性, 默认: <strong><code>-1</code></strong>.</li>
</ul>
</blockquote>
<h2 id="方法二">17.2. 方法二</h2><p>使用CDN的方式，在 NexT _config.yml 文件中启用canvas_ribbon链接：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">canvas_ribbon:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-ribbon@1/canvas-ribbon.js</span></span><br></pre></td></tr></table></figure>

<p>在 NexT _config.yml 文件中启用模块：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>



<h1 id="添加动态背景">18. 添加动态背景</h1><blockquote>
<p><a href="https://github.com/theme-next/theme-next-canvas-nest">https://github.com/theme-next/theme-next-canvas-nest</a></p>
</blockquote>
<p>在主题文件夹下 next/layout/_partials/footer.swig文件最后面添加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>script color<span class="operator">=</span><span class="string">&quot;0,0,255&quot;</span> opacity<span class="operator">=</span><span class="string">&quot;0.5&quot;</span> zIndex<span class="operator">=</span><span class="string">&quot;-1&quot;</span> count<span class="operator">=</span><span class="string">&quot;99&quot;</span> src<span class="operator">=</span><span class="string">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="设置代码块样式">19. 设置代码块样式</h1><p>代码块的行号显示在上面已经介绍了，位于站点配置文件，对于代码块的主题我么还能设置其背景，增加复制按钮等，可修改主题配置文件如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>



<h1 id="修改文章链接样式">20. 修改文章链接样式</h1><p>修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章内链接文本样式</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="鼠标点击特效">21. 鼠标点击特效</h1><p>下面是四个比较常用的鼠标点击特效脚本，我们可以把它们放置在 themes\next\source\js\cursor\ 目录下，创建fireworks.js文件：</p>
<p>礼花特效代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; origin, speed, color, angle, context &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.position = &#123; ...this.origin &#125;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">    <span class="built_in">this</span>.speed = speed</span><br><span class="line">    <span class="built_in">this</span>.angle = angle</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.context.fillStyle = <span class="built_in">this</span>.color</span><br><span class="line">    <span class="built_in">this</span>.context.beginPath()</span><br><span class="line">    <span class="built_in">this</span>.context.arc(<span class="built_in">this</span>.position.x, <span class="built_in">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.position.x = (<span class="built_in">Math</span>.sin(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.x</span><br><span class="line">    <span class="built_in">this</span>.position.y = (<span class="built_in">Math</span>.cos(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.y + (<span class="built_in">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="built_in">this</span>.area = area</span><br><span class="line">    <span class="built_in">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomArray</span>(<span class="params">range</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="built_in">Math</span>.floor(length * <span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomRange</span>(<span class="params">start, end</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="built_in">Math</span>.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circleCount; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">        <span class="attr">context</span>: <span class="built_in">this</span>.context,</span><br><span class="line">        <span class="attr">origin</span>: <span class="built_in">this</span>.origin,</span><br><span class="line">        <span class="attr">color</span>: <span class="built_in">this</span>.randomColor(),</span><br><span class="line">        <span class="attr">angle</span>: <span class="built_in">this</span>.randomRange(<span class="built_in">Math</span>.PI - <span class="number">1</span>, <span class="built_in">Math</span>.PI + <span class="number">1</span>),</span><br><span class="line">        <span class="attr">speed</span>: <span class="built_in">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="built_in">this</span>.area.width || circle.position.y &gt; <span class="built_in">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function"><span class="params">circle</span> =&gt;</span> circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computerCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext = <span class="built_in">this</span>.computerCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderContext = <span class="built_in">this</span>.renderCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.globalWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">    <span class="built_in">this</span>.globalHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleMouseDown</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> Boom(&#123;</span><br><span class="line">      <span class="attr">origin</span>: &#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;,</span><br><span class="line">      <span class="attr">context</span>: <span class="built_in">this</span>.computerContext,</span><br><span class="line">      <span class="attr">area</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="built_in">this</span>.globalWidth,</span><br><span class="line">        <span class="attr">height</span>: <span class="built_in">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    <span class="built_in">this</span>.booms.push(boom)</span><br><span class="line">    <span class="built_in">this</span>.running || <span class="built_in">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handlePageHide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.pointerEvents = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="built_in">this</span>.renderCanvas.width = <span class="built_in">this</span>.computerCanvas.width = <span class="built_in">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="built_in">this</span>.renderCanvas.height = <span class="built_in">this</span>.computerCanvas.height = <span class="built_in">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(<span class="built_in">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="built_in">this</span>.handleMouseDown.bind(<span class="built_in">this</span>))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="built_in">this</span>.handlePageHide.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="built_in">this</span>.run.bind(<span class="built_in">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms.forEach(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.drawImage(<span class="built_in">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>

<p>爆炸特效：</p>
<p>explosion.min.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length-<span class="number">1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">.1</span>,a.alpha=<span class="number">.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)e.animatables[t].target.draw()&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)n.push(createParticule(e,t));anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浮出爱心特效</p>
<p>love.min.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX-<span class="number">5</span>,<span class="attr">y</span>:e.clientY-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浮出文字特效</p>
<p>text.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;喜欢我&quot;</span>, <span class="string">&quot;不喜欢我&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">    y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      <span class="string">&quot;z-index&quot;</span>: <span class="number">99999</span>,</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: y - <span class="number">28</span>,</span><br><span class="line">      <span class="string">&quot;left&quot;</span>: x - a[a_idx].length * <span class="number">8</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">      <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff7a45&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">      <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">1500</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们在主题自定义布局文件 <code>themes\next\layout\_custom\custom.swig</code> 中添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> theme.cursor_effect <span class="operator">==</span> <span class="string">&quot;fireworks&quot;</span> <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script <span class="keyword">async</span> src<span class="operator">=</span><span class="string">&quot;/js/cursor/fireworks.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> elseif theme.cursor_effect <span class="operator">==</span> <span class="string">&quot;explosion&quot;</span> <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>canvas <span class="class"><span class="keyword">class</span>=&quot;<span class="title">fireworks</span>&quot; <span class="title">style</span>=&quot;<span class="title">position</span>: <span class="title">fixed</span>;<span class="title">left</span>: 0;<span class="title">top</span>: 0;<span class="title">z</span>-<span class="title">index</span>: 1; <span class="title">pointer</span>-<span class="title">events</span>: <span class="title">none</span>;&quot; &gt;&lt;/<span class="title">canvas</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">script</span> <span class="title">src</span>=&quot;//<span class="title">cdn</span>.<span class="title">bootcss</span>.<span class="title">com</span>/<span class="title">animejs</span>/2.2.0/<span class="title">anime</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">script</span> <span class="title">async</span> <span class="title">src</span>=&quot;/<span class="title">js</span>/<span class="title">cursor</span>/<span class="title">explosion</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;<span class="operator">%</span> elseif theme.cursor_effect <span class="operator">==</span> <span class="string">&quot;love&quot;</span> <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script <span class="keyword">async</span> src<span class="operator">=</span><span class="string">&quot;/js/cursor/love.min.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> elseif theme.cursor_effect <span class="operator">==</span> <span class="string">&quot;text&quot;</span> <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script <span class="keyword">async</span> src<span class="operator">=</span><span class="string">&quot;/js/cursor/text.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>custom.swig</code> 文件不存在，我们可以手动新建这个文件并在布局页面 <code>themes\next\layout\_layout.swig</code> 中 body 末尾引入：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">      <span class="operator">...</span></span><br><span class="line">      &#123;<span class="operator">%</span> include &#x27;_third<span class="operator">-</span>party<span class="operator">/</span>exturl.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> include &#x27;_third<span class="operator">-</span>party<span class="operator">/</span>bookmark.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> include &#x27;_third<span class="operator">-</span>party<span class="operator">/</span>copy<span class="operator">-</span>code.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span>     &#123;<span class="operator">%</span> include &#x27;_custom<span class="operator">/</span>custom.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;/</span>body<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;/</span>html<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>

<p>这样即可在配置文件中一键快速切换鼠标点击特效。</p>
<h1 id="打字特效">22. 打字特效</h1><p>我们需要添加下面这个脚本 <code>activate-power-mode.min.js</code>，然后放置在 <code>themes\next\source\js\</code> 目录下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">webpackUniversalModuleDefinition</span>(<span class="params">root,factory</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span>===<span class="string">&#x27;object&#x27;</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">module</span>===<span class="string">&#x27;object&#x27;</span>)<span class="built_in">module</span>.exports=factory();<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define===<span class="string">&#x27;function&#x27;</span>&amp;&amp;define.amd)define([],factory);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span>===<span class="string">&#x27;object&#x27;</span>)<span class="built_in">exports</span>[<span class="string">&quot;POWERMODE&quot;</span>]=factory();<span class="keyword">else</span> root[<span class="string">&quot;POWERMODE&quot;</span>]=factory()&#125;)(<span class="built_in">this</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>)</span>&#123;<span class="keyword">var</span> installedModules=&#123;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>)</span>&#123;<span class="keyword">if</span>(installedModules[moduleId])<span class="keyword">return</span> installedModules[moduleId].exports;<span class="keyword">var</span> <span class="built_in">module</span>=installedModules[moduleId]=&#123;<span class="attr">exports</span>:&#123;&#125;,<span class="attr">id</span>:moduleId,<span class="attr">loaded</span>:<span class="literal">false</span>&#125;;modules[moduleId].call(<span class="built_in">module</span>.exports,<span class="built_in">module</span>,<span class="built_in">module</span>.exports,__webpack_require__);<span class="built_in">module</span>.loaded=<span class="literal">true</span>;<span class="keyword">return</span> <span class="built_in">module</span>.exports&#125;__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p=<span class="string">&quot;&quot;</span>;<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>)&#125;)([<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>,<span class="built_in">exports</span>,__webpack_require__</span>)</span>&#123;<span class="string">&#x27;use strict&#x27;</span>;<span class="keyword">var</span> canvas=<span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);canvas.width=<span class="built_in">window</span>.innerWidth;canvas.height=<span class="built_in">window</span>.innerHeight;canvas.style.cssText=<span class="string">&#x27;position:fixed;top:0;left:0;pointer-events:none;z-index:999999&#x27;</span>;<span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvas.width=<span class="built_in">window</span>.innerWidth;canvas.height=<span class="built_in">window</span>.innerHeight&#125;);<span class="built_in">document</span>.body.appendChild(canvas);<span class="keyword">var</span> context=canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);<span class="keyword">var</span> particles=[];<span class="keyword">var</span> particlePointer=<span class="number">0</span>;POWERMODE.shake=<span class="literal">true</span>;<span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.random()*(max-min)+min&#125;<span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params">el</span>)</span>&#123;<span class="keyword">if</span>(POWERMODE.colorful)&#123;<span class="keyword">var</span> u=getRandom(<span class="number">0</span>,<span class="number">360</span>);<span class="keyword">return</span><span class="string">&#x27;hsla(&#x27;</span>+getRandom(u-<span class="number">10</span>,u+<span class="number">10</span>)+<span class="string">&#x27;, 100%, &#x27;</span>+getRandom(<span class="number">50</span>,<span class="number">80</span>)+<span class="string">&#x27;%, &#x27;</span>+<span class="number">1</span>+<span class="string">&#x27;)&#x27;</span>&#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(el).color&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">getCaret</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> el=<span class="built_in">document</span>.activeElement;<span class="keyword">var</span> bcr;<span class="keyword">if</span>(el.tagName===<span class="string">&#x27;TEXTAREA&#x27;</span>||(el.tagName===<span class="string">&#x27;INPUT&#x27;</span>&amp;&amp;el.getAttribute(<span class="string">&#x27;type&#x27;</span>)===<span class="string">&#x27;text&#x27;</span>))&#123;<span class="keyword">var</span> offset=__webpack_require__(<span class="number">1</span>)(el,el.selectionStart);bcr=el.getBoundingClientRect();<span class="keyword">return</span>&#123;<span class="attr">x</span>:offset.left+bcr.left,<span class="attr">y</span>:offset.top+bcr.top,<span class="attr">color</span>:getColor(el)&#125;&#125;<span class="keyword">var</span> selection=<span class="built_in">window</span>.getSelection();<span class="keyword">if</span>(selection.rangeCount)&#123;<span class="keyword">var</span> range=selection.getRangeAt(<span class="number">0</span>);<span class="keyword">var</span> startNode=range.startContainer;<span class="keyword">if</span>(startNode.nodeType===<span class="built_in">document</span>.TEXT_NODE)&#123;startNode=startNode.parentNode&#125;bcr=range.getBoundingClientRect();<span class="keyword">return</span>&#123;<span class="attr">x</span>:bcr.left,<span class="attr">y</span>:bcr.top,<span class="attr">color</span>:getColor(startNode)&#125;&#125;<span class="keyword">return</span>&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">color</span>:<span class="string">&#x27;transparent&#x27;</span>&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticle</span>(<span class="params">x,y,color</span>)</span>&#123;<span class="keyword">return</span>&#123;<span class="attr">x</span>:x,<span class="attr">y</span>:y,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:color,<span class="attr">velocity</span>:&#123;<span class="attr">x</span>:-<span class="number">1</span>+<span class="built_in">Math</span>.random()*<span class="number">2</span>,<span class="attr">y</span>:-<span class="number">3.5</span>+<span class="built_in">Math</span>.random()*<span class="number">2</span>&#125;&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">POWERMODE</span>(<span class="params"></span>)</span>&#123;&#123;<span class="keyword">var</span> caret=getCaret();<span class="keyword">var</span> numParticles=<span class="number">5</span>+<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">10</span>);<span class="keyword">while</span>(numParticles--)&#123;particles[particlePointer]=createParticle(caret.x,caret.y,caret.color);particlePointer=(particlePointer+<span class="number">1</span>)%<span class="number">500</span>&#125;&#125;&#123;<span class="keyword">if</span>(POWERMODE.shake)&#123;<span class="keyword">var</span> intensity=<span class="number">1</span>+<span class="number">2</span>*<span class="built_in">Math</span>.random();<span class="keyword">var</span> x=intensity*(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>?-<span class="number">1</span>:<span class="number">1</span>);<span class="keyword">var</span> y=intensity*(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>?-<span class="number">1</span>:<span class="number">1</span>);<span class="built_in">document</span>.body.style.marginLeft=x+<span class="string">&#x27;px&#x27;</span>;<span class="built_in">document</span>.body.style.marginTop=y+<span class="string">&#x27;px&#x27;</span>;<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.body.style.marginLeft=<span class="string">&#x27;&#x27;</span>;<span class="built_in">document</span>.body.style.marginTop=<span class="string">&#x27;&#x27;</span>&#125;,<span class="number">75</span>)&#125;&#125;&#125;;POWERMODE.colorful=<span class="literal">false</span>;<span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>)</span>&#123;requestAnimationFrame(loop);context.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;particles.length;++i)&#123;<span class="keyword">var</span> particle=particles[i];<span class="keyword">if</span>(particle.alpha&lt;=<span class="number">0.1</span>)<span class="keyword">continue</span>;particle.velocity.y+=<span class="number">0.075</span>;particle.x+=particle.velocity.x;particle.y+=particle.velocity.y;particle.alpha*=<span class="number">0.96</span>;context.globalAlpha=particle.alpha;context.fillStyle=particle.color;context.fillRect(<span class="built_in">Math</span>.round(particle.x-<span class="number">1.5</span>),<span class="built_in">Math</span>.round(particle.y-<span class="number">1.5</span>),<span class="number">3</span>,<span class="number">3</span>)&#125;&#125;requestAnimationFrame(loop);<span class="built_in">module</span>.exports=POWERMODE&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>,<span class="built_in">exports</span></span>)</span>&#123;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> properties=[<span class="string">&#x27;direction&#x27;</span>,<span class="string">&#x27;boxSizing&#x27;</span>,<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;height&#x27;</span>,<span class="string">&#x27;overflowX&#x27;</span>,<span class="string">&#x27;overflowY&#x27;</span>,<span class="string">&#x27;borderTopWidth&#x27;</span>,<span class="string">&#x27;borderRightWidth&#x27;</span>,<span class="string">&#x27;borderBottomWidth&#x27;</span>,<span class="string">&#x27;borderLeftWidth&#x27;</span>,<span class="string">&#x27;borderStyle&#x27;</span>,<span class="string">&#x27;paddingTop&#x27;</span>,<span class="string">&#x27;paddingRight&#x27;</span>,<span class="string">&#x27;paddingBottom&#x27;</span>,<span class="string">&#x27;paddingLeft&#x27;</span>,<span class="string">&#x27;fontStyle&#x27;</span>,<span class="string">&#x27;fontVariant&#x27;</span>,<span class="string">&#x27;fontWeight&#x27;</span>,<span class="string">&#x27;fontStretch&#x27;</span>,<span class="string">&#x27;fontSize&#x27;</span>,<span class="string">&#x27;fontSizeAdjust&#x27;</span>,<span class="string">&#x27;lineHeight&#x27;</span>,<span class="string">&#x27;fontFamily&#x27;</span>,<span class="string">&#x27;textAlign&#x27;</span>,<span class="string">&#x27;textTransform&#x27;</span>,<span class="string">&#x27;textIndent&#x27;</span>,<span class="string">&#x27;textDecoration&#x27;</span>,<span class="string">&#x27;letterSpacing&#x27;</span>,<span class="string">&#x27;wordSpacing&#x27;</span>,<span class="string">&#x27;tabSize&#x27;</span>,<span class="string">&#x27;MozTabSize&#x27;</span>];<span class="keyword">var</span> isFirefox=<span class="built_in">window</span>.mozInnerScreenX!=<span class="literal">null</span>;<span class="function"><span class="keyword">function</span> <span class="title">getCaretCoordinates</span>(<span class="params">element,position,options</span>)</span>&#123;<span class="keyword">var</span> debug=options&amp;&amp;options.debug||<span class="literal">false</span>;<span class="keyword">if</span>(debug)&#123;<span class="keyword">var</span> el=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#input-textarea-caret-position-mirror-div&#x27;</span>);<span class="keyword">if</span>(el)&#123;el.parentNode.removeChild(el)&#125;&#125;<span class="keyword">var</span> div=<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);div.id=<span class="string">&#x27;input-textarea-caret-position-mirror-div&#x27;</span>;<span class="built_in">document</span>.body.appendChild(div);<span class="keyword">var</span> style=div.style;<span class="keyword">var</span> computed=<span class="built_in">window</span>.getComputedStyle?getComputedStyle(element):element.currentStyle;style.whiteSpace=<span class="string">&#x27;pre-wrap&#x27;</span>;<span class="keyword">if</span>(element.nodeName!==<span class="string">&#x27;INPUT&#x27;</span>)style.wordWrap=<span class="string">&#x27;break-word&#x27;</span>;style.position=<span class="string">&#x27;absolute&#x27;</span>;<span class="keyword">if</span>(!debug)style.visibility=<span class="string">&#x27;hidden&#x27;</span>;properties.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">prop</span>)</span>&#123;style[prop]=computed[prop]&#125;);<span class="keyword">if</span>(isFirefox)&#123;<span class="keyword">if</span>(element.scrollHeight&gt;<span class="built_in">parseInt</span>(computed.height))style.overflowY=<span class="string">&#x27;scroll&#x27;</span>&#125;<span class="keyword">else</span>&#123;style.overflow=<span class="string">&#x27;hidden&#x27;</span>&#125;div.textContent=element.value.substring(<span class="number">0</span>,position);<span class="keyword">if</span>(element.nodeName===<span class="string">&#x27;INPUT&#x27;</span>)div.textContent=div.textContent.replace(<span class="regexp">/\s/g</span>,<span class="string">&quot;\u00a0&quot;</span>);<span class="keyword">var</span> span=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);span.textContent=element.value.substring(position)||<span class="string">&#x27;.&#x27;</span>;div.appendChild(span);<span class="keyword">var</span> coordinates=&#123;<span class="attr">top</span>:span.offsetTop+<span class="built_in">parseInt</span>(computed[<span class="string">&#x27;borderTopWidth&#x27;</span>]),<span class="attr">left</span>:span.offsetLeft+<span class="built_in">parseInt</span>(computed[<span class="string">&#x27;borderLeftWidth&#x27;</span>])&#125;;<span class="keyword">if</span>(debug)&#123;span.style.backgroundColor=<span class="string">&#x27;#aaa&#x27;</span>&#125;<span class="keyword">else</span>&#123;<span class="built_in">document</span>.body.removeChild(div)&#125;<span class="keyword">return</span> coordinates&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">module</span>!=<span class="string">&quot;undefined&quot;</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">module</span>.exports!=<span class="string">&quot;undefined&quot;</span>)&#123;<span class="built_in">module</span>.exports=getCaretCoordinates&#125;<span class="keyword">else</span>&#123;<span class="built_in">window</span>.getCaretCoordinates=getCaretCoordinates&#125;&#125;())&#125;])&#125;);</span><br></pre></td></tr></table></figure>

<p>在主题自定义布局文件 <code>themes\next\layout\_custom\custom.swig</code> 中添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> theme.typing_effect <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script src<span class="operator">=</span><span class="string">&quot;/js/activate-power-mode.min.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>script<span class="operator">&gt;</span></span><br><span class="line">    <span class="type">POWERMODE</span>.colorful <span class="operator">=</span> &#123;&#123; theme.typing_effect.colorful &#125;&#125;;</span><br><span class="line">    <span class="type">POWERMODE</span>.shake <span class="operator">=</span> &#123;&#123; theme.typing_effect.shake &#125;&#125;;</span><br><span class="line">    document.body.addEventListener(&#x27;input&#x27;, <span class="type">POWERMODE</span>);</span><br><span class="line">  <span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>custom.swig</code> 文件不存在，我们可以手动新建这个文件并在布局页面 <code>themes\next\layout\_layout.swig</code> 中 body 末尾引入：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">      <span class="operator">...</span></span><br><span class="line">      &#123;<span class="operator">%</span> include &#x27;_third<span class="operator">-</span>party<span class="operator">/</span>exturl.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> include &#x27;_third<span class="operator">-</span>party<span class="operator">/</span>bookmark.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> include &#x27;_third<span class="operator">-</span>party<span class="operator">/</span>copy<span class="operator">-</span>code.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span>     &#123;<span class="operator">%</span> include &#x27;_custom<span class="operator">/</span>custom.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;/</span>body<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;/</span>html<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们在主题配置文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># typing effect</span></span><br><span class="line"><span class="attr">typing_effect:</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span>  <span class="comment"># 礼花特效</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">false</span>  <span class="comment"># 震动特效</span></span><br></pre></td></tr></table></figure>

<p>这样即可在配置文件中一键快速切换打字特效。</p>
<p>参考：</p>
<blockquote>
<p><a href="https://tding.top/archives/58cff12b.html">https://tding.top/archives/58cff12b.html</a></p>
<p><a href="https://blog.csdn.net/qq_40590778/article/details/104662040">https://blog.csdn.net/qq_40590778/article/details/104662040</a></p>
</blockquote>
<h1 id="字体调整">23. 字体调整</h1><p>Next主题自带的字体是较大的，我这里给出了一个比较合适的方案：<br>1.打开/blog/themes/next/source/css/_variables/base.styl文件，查找<strong>Font size</strong>字段，将**$font-size-large**参数由1.125em改为1.0em</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Font size</span></span><br><span class="line"><span class="variable">$font</span>-size-base           = (hexo-config(<span class="string">&#x27;font.enable&#x27;</span>) and hexo-config(<span class="string">&#x27;font.global.size&#x27;</span>) is <span class="selector-tag">a</span> <span class="string">&#x27;unit&#x27;</span>) ? unit(hexo-config(<span class="string">&#x27;font.global.size&#x27;</span>), em) : <span class="number">1em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-smallest       = .<span class="number">75em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-smaller        = .<span class="number">8125em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-small          = .<span class="number">875em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-medium         = <span class="number">1em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-large          = <span class="number">1.0em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-larger         = <span class="number">1.25em</span>;</span><br><span class="line"><span class="variable">$font</span>-size-largest        = <span class="number">1.5em</span>;</span><br></pre></td></tr></table></figure>

<p>2.打开/blog/themes/next/_config.yml文件，查找<strong>Font Settings</strong>字段并修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Find fonts on Google Fonts (https://fonts.google.com)</span></span><br><span class="line"><span class="comment"># All fonts set here will have the following styles:</span></span><br><span class="line"><span class="comment">#   light | light italic | normal | normal italic | bold | bold italic</span></span><br><span class="line"><span class="comment"># Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Web Safe fonts are recommended for `global` (and `title`):</span></span><br><span class="line"><span class="comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.loli.net (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">0.8125</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br></pre></td></tr></table></figure>

<h1 id="修改代码块复制时背景颜色">24. 修改代码块复制时背景颜色</h1><p>next/source/css/scaffolding/highlight/theme.styl中修改$highlight-selection的颜色</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$highlight</span>-selection    = <span class="number">#154487</span>;</span><br></pre></td></tr></table></figure>

<h1 id="字体相关配置">25. 字体相关配置</h1><p>主题配置文件 <code>_config.yml</code> 里与字体相关的配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># CDN</span></span><br><span class="line">  <span class="attr">host:</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># external: 控制是否使用 CDN。</span></span><br><span class="line">  <span class="comment"># family: 字体样式。</span></span><br><span class="line">  <span class="comment"># size: 字体大小。默认为 1（16px）。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="comment"># 全局配置，覆盖 &lt;body&gt; 标签里所有元素</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> </span><br><span class="line">    <span class="attr">size:</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="comment"># 博客名字那儿</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> </span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="comment"># 注意这是文章里的标题，而不是侧边栏的 toc</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="comment">#Roboto Mono</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="comment"># 正文</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="comment"># 代码块</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> </span><br></pre></td></tr></table></figure>

<p>挑选并配置字体</p>
<p><a href="https://fonts.google.com/">Google Fonts</a> 挑选一款字体，在配置里的 <code>family</code> 处添加即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Noto Serif SC </span><br><span class="line">    size:</span><br></pre></td></tr></table></figure>

<p>如此配置之后，基于 hexo-next-theme 的博客就会全局使用「思源宋体」。</p>
<p>同理，配置代码块的字体也只需要挑选并覆盖相应配置即可。如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"># ……</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: Roboto Mono</span><br><span class="line">    size:</span><br></pre></td></tr></table></figure>

<p>googleapis</p>
<p><a href="https://sb.sb/blog/css-cdn/">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a></p>
<p>国内访问<code>fonts.googleapis.com</code> 不太稳定，有时候很慢，用上面帖子里提供的 CDN，Next 的配置就可以这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line">  host: //fonts.loli.net</span><br></pre></td></tr></table></figure>

<p>配置之后如果还有加载googleapis字体的地方全局替换即可。</p>
<p>参考</p>
<blockquote>
<p><a href="https://www.liaofuzhan.com/posts/2114475547.html">https://www.liaofuzhan.com/posts/2114475547.html</a></p>
<p><a href="https://tding.top/archives/2bd6d82.html">https://tding.top/archives/2bd6d82.html</a></p>
<p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p>
<p><a href="https://blog.csdn.net/weixin_44815733/article/details/88817220">https://blog.csdn.net/weixin_44815733/article/details/88817220</a></p>
<p><a href="https://blog.csdn.net/weixin_43971764/article/details/96754325">https://blog.csdn.net/weixin_43971764/article/details/96754325</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维工具-Ansible</title>
    <url>/p/28124.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Ansible详解">1. Ansible详解</h1><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。<br>　　ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远<br>程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。是每位运维工程师必须掌握的技能之一。</p>
<p>ansible特点</p>
<ol>
<li>部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</li>
<li>默认使用SSH协议对设备进行管理；</li>
<li>有大量常规运维操作模块，可实现日常绝大部分操作；</li>
<li>配置简单、功能强大、扩展性强；</li>
<li>支持API及自定义模块，可通过Python轻松扩展；</li>
<li>通过Playbooks来定制强大的配置、状态管理；</li>
<li>轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</li>
<li>提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</li>
</ol>
<h2 id="ansible的主要模块">1.1. ansible的主要模块</h2><blockquote>
<p><code>Ansible</code>：Ansible核心程序。<br><code>HostInventory</code>：记录由Ansible管理的主机信息，包括端口、密码、ip等。<br><code>Playbooks</code>：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。<br><code>CoreModules</code>：<strong>核心模块</strong>，主要操作是通过调用核心模块来完成管理任务。<br><code>CustomModules</code>：自定义模块，完成核心模块无法完成的功能，支持多种语言。<br><code>ConnectionPlugins</code>：连接插件，Ansible和Host通信使用</p>
</blockquote>
<h2 id="ansible安装">1.2. ansible安装</h2><p>ansible安装常用几种方式，<code>yum安装</code>，<code>apt</code>和<code>pip程序安装</code>。</p>
<h3 id="yum安装">1.2.1. yum安装</h3><p>yum 安装是我们很熟悉的安装方式了。我们需要先安装一个<code>epel-release</code>包，然后再安装我们的 ansible 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ansible –y</span><br></pre></td></tr></table></figure>

<h3 id="pip安装">1.2.2. pip安装</h3><p>首先，我们需要安装一个<code>python-pip</code>包，安装完成以后，则直接使用<code>pip</code>命令来安装我们的包，具体操作过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python-pip</span><br><span class="line">pip install ansible</span><br></pre></td></tr></table></figure>

<h3 id="apt（Ubuntu）安装">1.2.3. apt（Ubuntu）安装</h3><p>配置PPA及安装ansible,执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install software-properties-common</span><br><span class="line">$ sudo apt-add-repository ppa:ansible/ansible</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ansible</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在早期Ubuntu发行版中, “software-properties-common” 名为 “python-software-properties”.</p>
</blockquote>
<h2 id="ansible-配置公私钥">1.3. ansible 配置公私钥</h2><p>上面我们已经提到过 ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.生成私钥</span></span><br><span class="line">[root@server ~]# ssh-keygen </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.向主机分发私钥</span></span><br><span class="line">[root@mgmt2 ~]# ssh-copy-id root@192.168.101.201</span><br><span class="line">[root@mgmt2 ~]# ssh-copy-id root@192.168.101.202</span><br><span class="line">[root@mgmt2 ~]# ssh-copy-id root@192.168.101.203</span><br></pre></td></tr></table></figure>

<p>这样就实现了无密码登陆</p>
<p>通过for循环批量配置ssh密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.生成私钥</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ssh-keygen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.向主机批量分发私钥</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># for i in node1 node2 node3 node4 node5</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	ssh-copy-id   <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>注意：如果出现如下报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash: ssh-copy-id: command not found</span><br></pre></td></tr></table></figure>

<p>我们需要安装一个包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install openssh-clientsansible</span><br></pre></td></tr></table></figure>

<p>再次执行即可</p>
<h2 id="ansible配置文件">1.4. ansible配置文件</h2><ul>
<li>安装目录如下(yum安装)：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">配置文件目录：/etc/ansible/</span><br><span class="line">执行文件目录：/usr/bin/</span><br><span class="line">Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/</span><br><span class="line">Help文档目录：/usr/share/doc/ansible-X.X.X/</span><br><span class="line">Man文档目录：/usr/share/man/man1/</span><br></pre></td></tr></table></figure>

<ul>
<li>ansible配置文件查找顺序</li>
</ul>
<p>ansible与我们其他的服务在这一点上有很大不同，这里的配置文件查找是从多个地方找的，顺序如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 首先检测ANSIBLE_CONFIG变量定义的配置文件</span><br><span class="line">2. 其次检查当前目录下的./ansible.cfg文件</span><br><span class="line">3. 再次检查当前用户家目录下 ~/ansible.cfg 文件</span><br><span class="line">4. 最后检查 /etc/ansible/ansible.cfg 文件</span><br></pre></td></tr></table></figure>

<ul>
<li>ansible配置文件</li>
</ul>
<p>ansible 的配置文件为<code>/etc/ansible/ansible.cfg</code>，ansible 有许多参数，下面我们列出一些常见的参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inventory = /etc/ansible/hosts		<span class="comment">#这个参数表示资源清单inventory文件的位置</span></span><br><span class="line">library = /usr/share/ansible		<span class="comment">#指向存放Ansible模块的目录，支持多个目录方式，只要用冒号（：）隔开就可以</span></span><br><span class="line">forks = 5		<span class="comment">#并发连接数，默认为5</span></span><br><span class="line">sudo_user = root		<span class="comment">#设置默认执行命令的用户</span></span><br><span class="line">remote_port = 22		<span class="comment">#指定连接被管节点的管理端口，默认为22端口，建议修改，能够更加安全</span></span><br><span class="line">host_key_checking = False		<span class="comment">#设置是否检查SSH主机的密钥，值为True/False。关闭后第一次连接不会提示配置实例</span></span><br><span class="line">timeout = 60		<span class="comment">#设置SSH连接的超时时间，单位为秒</span></span><br><span class="line">log_path = /var/<span class="built_in">log</span>/ansible.log		<span class="comment">#指定一个存储ansible日志的文件（默认不记录日志）</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ansible主机清单</li>
</ul>
<p>在配置文件中，我们提到了资源清单，这个清单就是我们的主机清单，里面保存的是一些 ansible 需要连接管理的主机列表。我们可以来看看他的定义方式：</p>
<p>vim /etc/ansible/hosts</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、 直接指明主机地址或主机名：</span><br><span class="line">	<span class="comment">## green.example.com#</span></span><br><span class="line">	<span class="comment"># blue.example.com#</span></span><br><span class="line">	<span class="comment"># 192.168.1.1</span></span><br><span class="line">	<span class="comment"># 192.168.1.10</span></span><br><span class="line">2、 定义一个主机组[组名]把地址或主机名加进去</span><br><span class="line">	[k8s]</span><br><span class="line">	192.168.101.201</span><br><span class="line">	192.168.101.202</span><br><span class="line">	192.168.101.203</span><br></pre></td></tr></table></figure>

<h2 id="ansible常用命令">1.5. ansible常用命令</h2><ul>
<li><strong>ansible命令集</strong></li>
</ul>
<blockquote>
<p><code>/usr/bin/ansible</code>　　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行<br><code>/usr/bin/ansible-doc</code> 　Ansible 模块功能查看工具<br><code>/usr/bin/ansible-galaxy</code>　　下载/上传优秀代码或Roles模块 的官网平台，基于网络的<br><code>/usr/bin/ansible-playbook</code>　　Ansible 定制自动化的任务集编排工具<br><code>/usr/bin/ansible-pull</code>　　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高）<br><code>/usr/bin/ansible-vault</code>　　Ansible 文件加密工具<br><code>/usr/bin/ansible-console</code>　　Ansible基于Linux Consoble界面可与用户交互的命令执行工具</p>
</blockquote>
<p>其中，我们比较常用的是<code>/usr/bin/ansible</code>和<code>/usr/bin/ansible-playbook</code>。</p>
<ul>
<li><strong>ansible-doc命令</strong></li>
</ul>
<p>ansible-doc 命令常用于获取模块信息及其使用帮助，一般用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-doc -l				<span class="comment">#获取全部模块的信息</span></span><br><span class="line">ansible-doc -s MOD_NAME		<span class="comment">#获取指定模块的使用帮助</span></span><br></pre></td></tr></table></figure>

<p>我们也可以查看一下ansible-doc的全部用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># ansible-doc</span></span><br><span class="line">Usage: ansible-doc [options] [module...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span>　　<span class="comment"># 显示命令参数API文档</span></span><br><span class="line">  -l, --list            List available modules　　<span class="comment">#列出可用的模块</span></span><br><span class="line">  -M MODULE_PATH, --module-path=MODULE_PATH　　<span class="comment">#指定模块的路径</span></span><br><span class="line">                        specify path(s) to module library (default=None)</span><br><span class="line">  -s, --snippet         Show playbook snippet <span class="keyword">for</span> specified module(s)　　<span class="comment">#显示playbook制定模块的用法</span></span><br><span class="line">  -v, --verbose         verbose mode (-vvv <span class="keyword">for</span> more, -vvvv to <span class="built_in">enable</span>　　<span class="comment"># 显示ansible-doc的版本号查看模块列表：</span></span><br><span class="line">                        connection debugging)</span><br><span class="line">  --version             show program<span class="string">&#x27;s version number and exit</span></span><br></pre></td></tr></table></figure>

<p>我们可以来看一下，以mysql相关的为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># ansible-doc -l |grep mysql</span></span><br><span class="line">mysql_db                           Add or remove MySQL databases from a remote...</span><br><span class="line">mysql_replication                  Manage MySQL replication                   </span><br><span class="line">mysql_user                         Adds or removes a user from a MySQL databas...</span><br><span class="line">mysql_variables                    Manage MySQL global variables      </span><br><span class="line">[root@master ~]<span class="comment"># ansible-doc -s mysql_user</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ansible详解</strong></li>
</ul>
<p>命令的具体格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</span><br></pre></td></tr></table></figure>

<p>也可以通过<code>ansible -h</code>来查看帮助，下面我们列出一些比较常用的选项，并解释其含义：</p>
<blockquote>
<p><code>-a MODULE_ARGS</code>　　　#模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“pwd”等等<br><code>-k</code>，<code>--ask-pass</code> #ask for SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证<br><code>--ask-su-pass</code> #ask for su password。su切换密码<br><code>-K</code>，<code>--ask-sudo-pass</code> #ask for sudo password。提示密码使用sudo，sudo表示提权操作<br><code>--ask-vault-pass</code> #ask for vault password。假设我们设定了加密的密码，则用该选项进行访问<br><code>-B SECONDS</code> #后台运行超时时间<br><code>-C</code> #模拟运行环境并进行预运行，可以进行查错测试<br><code>-c CONNECTION</code> #连接类型使用<br><code>-f FORKS</code> #并行任务数，默认为5<br><code>-i INVENTORY</code> #指定主机清单的路径，默认为<code>/etc/ansible/hosts</code><br><code>--list-hosts</code> #查看有哪些主机组<br><code>-m MODULE_NAME</code> #执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数<br><code>-o</code> #压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用<br><code>-S</code> #用 su 命令<br><code>-R SU_USER</code> #指定 su 的用户，默认为 root 用户<br><code>-s</code> #用 sudo 命令<br><code>-U SUDO_USER</code> #指定 sudo 到哪个用户，默认为 root 用户<br><code>-T TIMEOUT</code> #指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改<br><code>-u REMOTE_USER</code> #远程用户，默认为 root 用户<br><code>-v</code> #查看详细信息，同时支持<code>-vvv</code>，<code>-vvvv</code>可查看更详细信息</p>
</blockquote>
<h3 id="ansible主机清单文件">1.5.1. ansible主机清单文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt1 ~]<span class="comment">#  vim /etc/ansible/hosts</span></span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line">[proxy]</span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">node[3:4]</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">node5</span><br><span class="line"></span><br><span class="line">[cluster:children] <span class="comment"># 嵌套组，children为关键字</span></span><br><span class="line">web</span><br><span class="line">database</span><br></pre></td></tr></table></figure>

<p>测试Ansible环境与配置是否正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt1 ~]<span class="comment"># ansible all --list-hosts   # 查看所有主机列表</span></span><br><span class="line"></span><br><span class="line">[root@mgmt1 ~]<span class="comment"># ansible node1 -m ping   # 调用ping模块</span></span><br><span class="line">[root@mgmt1 ~]<span class="comment"># ansible node1,node2,node3 -m ping</span></span><br><span class="line">[root@mgmt1 ~]<span class="comment"># ansible web -m ping</span></span><br><span class="line">[root@mgmt1 ~]<span class="comment"># ansible web,test -m ping</span></span><br></pre></td></tr></table></figure>



<h3 id="hosts写入密码">1.5.2. hosts写入密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt1 ~]<span class="comment">#  vim /etc/ansible/hosts</span></span><br><span class="line">[vmhost]</span><br><span class="line">192.168.101.249 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class="line">192.168.101.248 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class="line">192.168.101.247 ansible_ssh_user=root ansible_ssh_pass=123456</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt1 ~]<span class="comment"># ansible vmhost -m ping</span></span><br><span class="line">192.168.101.248 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.101.247 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.101.249 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里ansible配置文件里需要配置关闭：host_key_checking = False</p>
</blockquote>
<h2 id="ansible常用模块">1.6. ansible常用模块</h2><h3 id="主机连通性测试">1.6.1. 主机连通性测试</h3><p>我们使用<code>ansible k8s -m ping</code>命令来进行主机连通性测试，效果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible k8s -m ping</span><br><span class="line">192.168.101.201 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.203 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.202 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="command-模块">1.6.2. command 模块</h3><p>这个模块可以直接在远程主机上执行命令，并将结果返回本主机。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible k8s -m command -a &#x27;free -h&#x27;</span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          7.6Gi       2.1Gi       2.2Gi        33Mi       3.4Gi       5.3Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line">192.168.101.203 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          7.6Gi       2.4Gi       1.8Gi        25Mi       3.4Gi       5.3Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          3.7Gi       2.3Gi       121Mi        25Mi       1.3Gi       1.3Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>

<p>命令模块接受命令名称，后面是空格分隔的列表参数。给定的命令将在所有选定的节点上执行。它不会通过shell进行处理，比如$HOME和操作如”&lt;”，”&gt;”，”|”，”;”，”&amp;” 工作（需要使用（shell）模块实现这些功能）。注意，该命令不支持<code>| 管道命令</code>。<br>下面来看一看该模块下常用的几个命令：</p>
<blockquote>
<p>chdir　　　　　　 # 在执行命令之前，先切换到该目录<br>executable # 切换shell来执行命令，需要使用命令的绝对路径<br>free_form 　 # 要执行的Linux指令，一般使用Ansible的-a参数代替。<br>creates 　# 一个文件名，当这个文件存在，则该命令不执行,可以<br>用来做判断<br>removes # 一个文件名，这个文件不存在，则该命令不执行</p>
</blockquote>
<p>下面我们来看看这些命令的执行效果：</p>
<ul>
<li>chdir</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible k8s -m command -a &#x27;chdir=/opt/ ls&#x27;  #先切换到/data/ 目录，再执行“ls”命令</span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">cni</span><br><span class="line">containerd</span><br><span class="line"></span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">cni</span><br><span class="line">containerd</span><br><span class="line"></span><br><span class="line">192.168.101.203 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">cni</span><br><span class="line">containerd</span><br></pre></td></tr></table></figure>

<ul>
<li>creates</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible k8s -m command -a &#x27;creates=/data/Dockerfile ls&#x27;  #如果/data/Dockerfile存在，则不执行“ls”命令</span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">docker</span><br><span class="line">docker-19.03.9.tgz</span><br><span class="line">yq</span><br><span class="line"></span><br><span class="line">192.168.101.201 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /data/Dockerfile exists</span><br><span class="line"></span><br><span class="line">192.168.101.203 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">docker</span><br><span class="line">docker-19.03.9.tgz</span><br><span class="line">yq</span><br></pre></td></tr></table></figure>

<ul>
<li>removes</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible k8s -m command -a &#x27;removes=/data/Dockerfile free -h&#x27;  #如果/data/Dockerfile存在，则执行“free -h”命令</span><br><span class="line">192.168.101.202 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /data/Dockerfile does not exist</span><br><span class="line"></span><br><span class="line">192.168.101.203 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /data/Dockerfile does not exist</span><br><span class="line"></span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          3.7Gi       2.3Gi       116Mi        25Mi       1.3Gi       1.3Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>



<h3 id="shell-模块">1.6.3. shell 模块</h3><p>shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible k8s -m shell -a &#x27;cat /etc/passwd |grep &quot;root&quot;&#x27;</span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"></span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"></span><br><span class="line">192.168.101.203 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>只要是我们的shell命令，都可以通过这个模块在远程主机上运行，但不可以使用shell模块执行交互命令，如vim，top等。</p>
<p><strong>使用chdir参数切换工作目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ansible k8s -m shell -a &#x27;chdir=/tmp touch my.txt pwd&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>shell模块支持判断（creates、removes）</strong></p>
<ul>
<li>creates 文件名： 文件存在，不执行shell命令</li>
<li>removes 文件名：文件不存在，不执行shell命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ansible test -m shell -a &quot;ssh-keygen -f ~/.ssh/id_rsa -N creates=~/.ssh/id_rsa&quot;</span><br><span class="line"># 如果已经有密钥文件id_rsa，则不创建密钥（skip跳过）</span><br><span class="line"></span><br><span class="line">ansible test -m shell -a &quot;unzip xx.zip removes=/bin/unzip&quot;</span><br><span class="line"># 如果没有安装unzip软件包，则不执行解压命令（skip跳过）</span><br></pre></td></tr></table></figure>





<h3 id="copy模块">1.6.4. copy模块</h3><p>这个模块用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等。<br>其相关选项如下：</p>
<blockquote>
<p><code>src</code>　　　　#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于”rsync”<br><code>content</code>　　　#用于替换”src”，可以直接指定文件的值<br><code>dest</code>　　　　#必选项，将源文件复制到的远程主机的<strong>绝对路径</strong><br><code>backup</code>　　　#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息<br><code>directory_mode</code>　　　　#递归设定目录的权限，默认为系统默认权限<br><code>force</code>　　　　#当目标主机包含该文件，但内容不同时，设为yes，表示强制覆盖；设为no，表示目标主机的目标位置不存在该文件才复制。默认为yes<br><code>others</code>　　　　#所有的 file 模块中的选项可以在这里使用</p>
</blockquote>
<p>用法举例如下：</p>
<ul>
<li>复制文件：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m copy -a &#x27;src=./ansible.cfg dest=/data/&#x27;</span><br><span class="line">192.168.101.202 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;checksum&quot;: &quot;a2a782df5d7bd49afb0971fc6be21cd825daaaa3&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/ansible.cfg&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0644&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/data/ansible.cfg&quot;,</span><br><span class="line">    &quot;size&quot;: 20012,</span><br><span class="line">    &quot;state&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.201 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;checksum&quot;: &quot;a2a782df5d7bd49afb0971fc6be21cd825daaaa3&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/ansible.cfg&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0644&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/data/ansible.cfg&quot;,</span><br><span class="line">    &quot;size&quot;: 20012,</span><br><span class="line">    &quot;state&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>给定内容生成文件，并制定权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m copy -a &#x27;content=&quot;I love you&quot; dest=/data/love mode=666&#x27;</span><br><span class="line">192.168.101.202 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;checksum&quot;: &quot;ce48c9870c7ae19796438aed65458c8bdc335157&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/love&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;md5sum&quot;: &quot;e4f58a805a6e1fd0f6bef58c86f9ceb3&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0666&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;size&quot;: 10,</span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1631174440.548185-142417634763846/source&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.201 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;checksum&quot;: &quot;ce48c9870c7ae19796438aed65458c8bdc335157&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/love&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;md5sum&quot;: &quot;e4f58a805a6e1fd0f6bef58c86f9ceb3&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0666&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;size&quot;: 10,</span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1631174440.5443904-137441252807840/source&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们现在去查看一下我们生成的文件及其权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m shell -a &#x27;ls -la /data/&#x27;</span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--   1 root root 20012 Sep  9 15:54 ansible.cfg</span><br><span class="line">-rw-rw-rw-   1 root root    10 Sep  9 16:00 love</span><br><span class="line"></span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 230280</span><br><span class="line">-rw-r--r--   1 root root     20012 Sep  9 15:54 ansible.cfg</span><br><span class="line">-rw-rw-rw-   1 root root        10 Sep  9 16:00 love</span><br></pre></td></tr></table></figure>

<p>可以看出我们的love文件已经生成，并且权限为666</p>
<ul>
<li>关于覆盖</li>
</ul>
<p>我们把文件的内容修改一下，然后选择覆盖备份：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m copy -a &#x27;content=&quot;I love you today&quot; backup=yes dest=/data/love mode=666&#x27;</span><br><span class="line">192.168.101.201 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;backup_file&quot;: &quot;/data/love.1710731.2021-09-09@16:08:11~&quot;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;checksum&quot;: &quot;aae6d5443c11825389059f97953a5596f52472d0&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/love&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;md5sum&quot;: &quot;ca125268f92d23fbb2ba11b5033d97a6&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0666&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;size&quot;: 16,</span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1631174889.8834162-86186609378458/source&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.202 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;backup_file&quot;: &quot;/data/love.2458311.2021-09-09@16:08:11~&quot;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;checksum&quot;: &quot;aae6d5443c11825389059f97953a5596f52472d0&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/love&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;md5sum&quot;: &quot;ca125268f92d23fbb2ba11b5033d97a6&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0666&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;size&quot;: 16,</span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1631174889.8911483-24337496953154/source&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;file&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们可以去查看一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m shell -a &#x27;ls -la /data&#x27;</span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 230288</span><br><span class="line">-rw-r--r--   1 root root     20012 Sep  9 15:54 ansible.cfg</span><br><span class="line">-rw-rw-rw-   1 root root        16 Sep  9 16:08 love</span><br><span class="line">-rw-rw-rw-   1 root root        10 Sep  9 16:00 love.1710731.2021-09-09@16:08:11~</span><br><span class="line"></span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--   1 root root 20012 Sep  9 15:54 ansible.cfg</span><br><span class="line">-rw-rw-rw-   1 root root    16 Sep  9 16:08 love</span><br><span class="line">-rw-rw-rw-   1 root root    10 Sep  9 16:00 love.2458311.2021-09-09@16:08:11~</span><br></pre></td></tr></table></figure>

<p>可以看出，我们的源文件已经被备份，我们还可以查看一下<code>love</code>文件的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m shell -a &#x27;cat /data/love&#x27;</span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">I love you today</span><br><span class="line"></span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">I love you today</span><br></pre></td></tr></table></figure>

<p>证明，这正是我们新导入的文件的内容。</p>
<h3 id="file模块">1.6.5. file模块</h3><blockquote>
<p>该模块主要用于设置文件的属性，比如创建文件、创建链接文件、删除文件等。<br>下面是一些常见的命令：</p>
<p><code>force</code>　　#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no<br><code>group</code>　　#定义文件/目录的属组。后面可以加上<code>mode</code>：定义文件/目录的权限<br><code>owner</code>　　#定义文件/目录的属主。后面必须跟上<code>path</code>：定义文件/目录的路径<br><code>recurse</code>　　#递归设置文件的属性，只对目录有效，后面跟上<code>src</code>：被链接的源文件路径，只应用于<code>state=link</code>的情况<br><code>dest</code>　　#被链接到的路径，只应用于<code>state=link</code>的情况<br><code>state</code>　　#状态，有以下选项：</p>
<blockquote>
<p><code>directory</code>：如果目录不存在，就创建目录<br><code>file</code>：即使文件不存在，也不会被创建<br><code>link</code>：创建软链接<br><code>hard</code>：创建硬链接<br><code>touch</code>：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间<br><code>absent</code>：删除目录、文件或者取消链接文件</p>
</blockquote>
</blockquote>
<p>用法举例如下：</p>
<ul>
<li>创建目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m file -a &#x27;path=/data/app state=directory&#x27;</span><br><span class="line">192.168.101.202 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0755&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/data/app&quot;,</span><br><span class="line">    &quot;size&quot;: 6,</span><br><span class="line">    &quot;state&quot;: &quot;directory&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.201 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0755&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/data/app&quot;,</span><br><span class="line">    &quot;size&quot;: 6,</span><br><span class="line">    &quot;state&quot;: &quot;directory&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以查看一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m shell -a &#x27;ls -l /data&#x27;</span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 2 root root     6 Sep  9 16:13 app</span><br><span class="line"></span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 230288</span><br><span class="line">drwxr-xr-x 2 root root         6 Sep  9 16:13 app</span><br></pre></td></tr></table></figure>

<p>可以看出，我们的目录已经创建完成</p>
<ul>
<li>创建链接文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m file -a &#x27;path=/data/hhh.cfg src=ansible.cfg state=link&#x27;</span><br><span class="line">192.168.101.202 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/hhh.cfg&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0777&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;size&quot;: 11,</span><br><span class="line">    &quot;src&quot;: &quot;ansible.cfg&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;link&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.201 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/hhh.cfg&quot;,</span><br><span class="line">    &quot;gid&quot;: 0,</span><br><span class="line">    &quot;group&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;mode&quot;: &quot;0777&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;size&quot;: 11,</span><br><span class="line">    &quot;src&quot;: &quot;ansible.cfg&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;link&quot;,</span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以去查看一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m shell -a &#x27;ls -l /data&#x27;</span><br><span class="line">192.168.101.202 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r-- 1 root root 20012 Sep  9 15:54 ansible.cfg</span><br><span class="line">lrwxrwxrwx 1 root root    11 Sep  9 16:19 hhh.cfg -&gt; ansible.cfg</span><br><span class="line"></span><br><span class="line">192.168.101.201 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 230288</span><br><span class="line">-rw-r--r-- 1 root root     20012 Sep  9 15:54 ansible.cfg</span><br><span class="line">lrwxrwxrwx 1 root root        11 Sep  9 16:19 hhh.cfg -&gt; ansible.cfg</span><br></pre></td></tr></table></figure>

<p>我们的链接文件已经创建成功</p>
<ul>
<li>删除文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m file -a &#x27;path=/data/ansible.cfg state=absent&#x27;</span><br><span class="line">192.168.101.201 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;/data/ansible.cfg&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.202 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/libexec/platform-python&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;/data/ansible.cfg&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以查看一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# ansible web -m shell -a &#x27;ls /data/ansible.cfg&#x27;</span><br><span class="line">192.168.101.201 | FAILED | rc=2 &gt;&gt;</span><br><span class="line">ls: cannot access &#x27;/data/ansible.cfg&#x27;: No such file or directorynon-zero return code</span><br><span class="line"></span><br><span class="line">192.168.101.202 | FAILED | rc=2 &gt;&gt;</span><br><span class="line">ls: cannot access &#x27;/data/ansible.cfg&#x27;: No such file or directorynon-zero return code</span><br></pre></td></tr></table></figure>

<p>已经没有这个文件</p>
<h3 id="fetch">1.6.6. fetch</h3><p>该模块用于从远程某主机获取（复制）文件到本地。<br>有两个选项：</p>
<blockquote>
<p><code>dest</code>：用来存放文件的目录<br><code>src</code>：在远程拉取的文件，并且必须是一个<strong>file</strong>，不能是<strong>目录</strong></p>
</blockquote>
<p>具体举例如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@mgmt2 ansible]# ansible web -m fetch -a &#x27;src=/data/love dest=/data&#x27;</span><br><span class="line">192.168.101.202 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;checksum&quot;: &quot;aae6d5443c11825389059f97953a5596f52472d0&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/192.168.101.202/data/love&quot;,</span><br><span class="line">    &quot;md5sum&quot;: &quot;ca125268f92d23fbb2ba11b5033d97a6&quot;,</span><br><span class="line">    &quot;remote_checksum&quot;: &quot;aae6d5443c11825389059f97953a5596f52472d0&quot;,</span><br><span class="line">    &quot;remote_md5sum&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.201 | CHANGED =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;checksum&quot;: &quot;aae6d5443c11825389059f97953a5596f52472d0&quot;,</span><br><span class="line">    &quot;dest&quot;: &quot;/data/192.168.101.201/data/love&quot;,</span><br><span class="line">    &quot;md5sum&quot;: &quot;ca125268f92d23fbb2ba11b5033d97a6&quot;,</span><br><span class="line">    &quot;remote_checksum&quot;: &quot;aae6d5443c11825389059f97953a5596f52472d0&quot;,</span><br><span class="line">    &quot;remote_md5sum&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在本机上查看一下文件是否复制成功。要注意，文件保存的路径是我们设置的接收目录下的<code>被管制主机ip</code>目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ansible]# cd /data/</span><br><span class="line">[root@mgmt2 data]# ls</span><br><span class="line">192.168.101.201  192.168.101.202</span><br><span class="line">[root@mgmt2 data]# cd 192.168.101.201</span><br><span class="line">[root@mgmt2 192.168.101.201]# ls</span><br><span class="line">data</span><br><span class="line">[root@mgmt2 192.168.101.201]# cd data/</span><br><span class="line">[root@mgmt2 data]# ls</span><br><span class="line">love</span><br><span class="line">[root@mgmt2 data]# pwd</span><br><span class="line">/data/192.168.101.201/data</span><br></pre></td></tr></table></figure>



<h3 id="cron模块">1.6.7. cron模块</h3><p>该模块适用于管理<code>cron</code>计划任务的。<br>其使用的语法跟我们的<code>crontab</code>文件中的语法一致，同时，可以指定以下选项：</p>
<blockquote>
<p><code>day=</code> #日应该运行的工作( 1-31, *, */2, )<br><code>hour=</code> # 小时 ( 0-23, *, */2, )<br><code>minute=</code> #分钟( 0-59, *, */2, )<br><code>month=</code> # 月( 1-12, *, /2, )<br><code>weekday=</code> # 周 ( 0-6 for Sunday-Saturday,, )<br><code>job=</code> #指明运行的命令是什么<br><code>name=</code> #定时任务描述<br><code>reboot</code> # 任务在重启时运行，不建议使用，建议使用special_time<br><code>special_time</code> #特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）<br><code>state</code> #指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务<br><code>user</code> # 以哪个用户的身份执行</p>
</blockquote>
<p>举例如下</p>
<ul>
<li>添加计划任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# ansible web -m cron -a &#x27;name=&quot;ntp update every 5 min&quot; minute=*/5 job=&quot;/sbin/ntpdate 172.17.0.1 &amp;&gt; /dev/null&quot;&#x27;</span><br><span class="line">192.168.101.202 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: [</span><br><span class="line">        &quot;ntp update every 5 min&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.201 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: [</span><br><span class="line">        &quot;ntp update every 5 min&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以去查看一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# ansible web -m shell -a &#x27;crontab -l&#x27;</span><br><span class="line">192.168.37.122 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">Ansible: ntp update every 5 min</span></span><br><span class="line">*/5 * * * * /sbin/ntpdate 172.17.0.1 &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">192.168.37.133 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">Ansible: ntp update every 5 min</span></span><br><span class="line">*/5 * * * * /sbin/ntpdate 172.17.0.1 &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>

<p>可以看出，我们的计划任务已经设置成功了。</p>
<h3 id="script模块">1.6.8. script模块</h3><p>如果复杂的命令怎么办？</p>
<ul>
<li>script允许在本地写脚本，拷贝到被管理端并执行脚本</li>
<li>脚本不是shell脚本（如python、perl脚本等），可以没有-x</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# cat test.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">yum -y install httpd</span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]# ansible test -m script -a &quot;./test.sh&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>是主机组的名称</span></span><br></pre></td></tr></table></figure>



<h3 id="lineinfile-和-replace模块">1.6.9. lineinfile 和 replace模块</h3><p>在修改单个文件的单行内容时可以使用lineinfile模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# ansible test -m lineinfile -a &quot;path=/etc/issue regexp=&quot;hello&quot; line=&#x27;ni hao&#x27;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在/etc/issue文件中正则匹配包含hello的行，把整行内容替换为ni hao</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果无法匹配到hello，则在文件最后添加一行nihao</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有多行内容包含hello，则仅替换最后一行</span></span><br></pre></td></tr></table></figure>

<p>lineinfile会替换一整行，replace可以替换关键词</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# ansible test -m replace -a &quot;path=/etc/issue.net regexp=Kernel replace=Ocena&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将/etc/issue文件全文所有的Kernel替换为Ocean</span></span><br></pre></td></tr></table></figure>



<h3 id="user模块">1.6.10. user模块</h3><p>user模块可以实现Linux系统账户管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m user -a &quot;name=tuser1&quot;</span></span><br><span class="line"><span class="comment"># 远程test组中的所有主机并创建系统账户tuser1</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m user -a &quot;name=tuser2 uid=1010 group=adm groups=daemon,root home=/home/tuser2&quot;</span></span><br><span class="line"><span class="comment"># 创建账户并设置对应的账户属性</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m user -a &quot;name=tuser1 password=&#123;&#123;&#x27;abc&#x27;|password_hash(&#x27;sha512&#x27;)&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 修改账户密码</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m user -a &quot;name=tuser1 groups=root,daemon&quot;</span></span><br><span class="line"><span class="comment"># 修改tuser1账户的附加组</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m user -a &quot;name=tuser1 state=absent&quot;</span></span><br><span class="line"><span class="comment"># 删除账户tuser1</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m user -a &quot;name=tuser2 state=absent remove=true&quot;</span></span><br><span class="line"><span class="comment"># 删除tuser2账户同时删除家目录、邮箱</span></span><br></pre></td></tr></table></figure>



<h3 id="yum-repository模块">1.6.11. yum_repository模块</h3><p>使用yum_repository模块可以创建或修改yum源配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m yum_repository -a &quot;name=myyum description=hello baseurl=ftp://192.168.4.254/centos gpgcheck=no&quot;</span></span><br><span class="line"><span class="comment"># 新建一个yum源配置文件/etc/yum.repos.d/myyum.repo</span></span><br><span class="line"><span class="comment"># yum源文件名为myyum，该文件的内容如下：</span></span><br><span class="line">[myyum]</span><br><span class="line">baseurl = ftp://192.168.4.254/centos</span><br><span class="line">gpgcheck = 0</span><br><span class="line">name = hello</span><br></pre></td></tr></table></figure>

<p>使用yum模块可以安装、卸载、升级软件包</p>
<blockquote>
<p>state：present（安装）|absent（卸载）|latest（升级）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m yum -a &quot;name=unzip state=present&quot;</span></span><br><span class="line"><span class="comment"># 安装unzip软件包</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m yum -a &quot;name=unzip state=latest&quot;</span></span><br><span class="line"><span class="comment"># 升级unzip软件包，软件名称可以是*，代表升级所有软件包</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m yum -a &quot;name=unzip state=absent&quot;</span></span><br><span class="line"><span class="comment"># 卸载unzip软件包</span></span><br></pre></td></tr></table></figure>



<h3 id="service模块">1.6.12. service模块</h3><p>service为服务管理模块（启动、关闭、重启服务等）</p>
<blockquote>
<p>state：started | stopped | restarted</p>
<p>enable：yes 设置开机启动</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m yum -a &quot;name=httpd&quot;</span></span><br><span class="line"><span class="comment"># 安装httpd软件包</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m service -a &quot;name=httpd state=started&quot;</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m service -a &quot;name=httpd state=stopped&quot;</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m service -a &quot;name=httpd state=restarted&quot;</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m service -a &quot;name=httpd enabled=yes&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="逻辑卷相关模块">1.6.13. 逻辑卷相关模块</h3><p><strong>lvg模块：创建、删除卷组（VG），修改卷组大小</strong></p>
<blockquote>
<p>state：present（创建） | absent（删除）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m yum -a &quot;name=lvm2&quot;</span></span><br><span class="line"><span class="comment"># 安装lvm2软件包</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m lvg -a &quot;vg=myvg pvs=/dev/vdb1&quot;</span></span><br><span class="line"><span class="comment"># 创建名称为myvg的卷组，该卷组由/dev/vdb1组成</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m lvg -a &quot;vg=myvg pvs=/dev/vdb1,/dev/vdb2&quot;</span></span><br><span class="line"><span class="comment"># 修改卷组大小</span></span><br></pre></td></tr></table></figure>

<p><strong>lvol模块：创建、删除逻辑卷（LV），修改逻辑卷大小</strong></p>
<blockquote>
<p>state：present（创建）| absent（删除）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m lvol -a &quot;lv=mylv vg=myvg size=2G&quot;</span></span><br><span class="line"><span class="comment"># 使用myvg这个卷组创建一个名称为mylv的逻辑卷</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m lvol -a &quot;lv=mylv vg=myvg size=4G&quot;</span></span><br><span class="line"><span class="comment"># 修改LV逻辑卷大小</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m lvol -a &quot;lv=mylv vg=myvg state=absent force=yes&quot;</span></span><br><span class="line"><span class="comment"># 删除逻辑卷</span></span><br><span class="line"></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible test -m lvg -a &quot;vg=myvg state=absent&quot;</span></span><br><span class="line"><span class="comment"># 删除卷组myvg</span></span><br></pre></td></tr></table></figure>



<h2 id="sudo提权">1.7. sudo提权</h2><h3 id="基本概念">1.7.1. 基本概念</h3><p><strong>sudo</strong></p>
<ul>
<li>superuser or another do</li>
<li>以超级管理员或其他人的身份执行命令</li>
</ul>
<p><strong>基本流程</strong></p>
<ul>
<li>管理员需要先授权（修改/etc/sudoers文件）</li>
<li>普通用户以sudo的形式执行命令</li>
<li>可以通过sudo -l查看授权情况</li>
</ul>
<h3 id="sudoers语法">1.7.2. sudoers语法</h3><p><strong>修改/etc/sudoers的方法</strong></p>
<ul>
<li>visudo（带语法检查，默认没有颜色提示）</li>
<li>vim /etc/sudoers （不带语法检查，默认有颜色提示）</li>
</ul>
<p><strong>授权格式如下：</strong></p>
<ul>
<li>用户或组    主机列表=（提权身份）    [NOPASSWD]:命令列表</li>
<li>命令需要写绝对路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># cat /etc/sudoers</span></span><br><span class="line">... ...</span><br><span class="line">root	ALL=(ALL) 	ALL</span><br><span class="line">%wheel	ALL=(ALL)	ALL</span><br></pre></td></tr></table></figure>

<h3 id="配置sudo提权">1.7.3. 配置sudo提权</h3><p><strong>为所有被管理主机创建系统账户</strong></p>
<p>用户名为alice，密码为123456</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible all -m user -a &quot;name=alice password=&#123;&#123;&#x27;123456&#x27;|password_hash(&#x27;sha512&#x27;)&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>在所有被管理主机配置sudo，让alice可以管理系统服务</strong></p>
<p>默认普通用户无权执行systemctl命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible all -m lineinfile -a &quot;path=/etc/sudoers line=&#x27;alice ALL=(ALL) /usr/bin/systemctl&#x27;&quot;</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ssh alice@node1		# 密码：123456</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># sudo -l</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># sudo systemctl restart chronyd   # 验证</span></span><br></pre></td></tr></table></figure>

<p><strong>在所有被管理主机配置sudo，让alice可以执行任何命令</strong></p>
<p>使用NOPASSWD开启无密码验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># ansible all -m lineinfile -a &quot;path=/etc/sudoers line=&#x27;alice ALL=(ALL) NOPASSWD:ALL&#x27;&quot;</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ssh alice@node1</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># sudo -l</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># sudo systemctl restart chronyd   # 不需要输入密码</span></span><br></pre></td></tr></table></figure>

<h2 id="Ansible配置进阶">1.8. Ansible配置进阶</h2><h3 id="修改ansible配置文件">1.8.1. 修改ansible配置文件</h3><p>修改~/ansible/ansible.cfg</p>
<p>修改sudo相关配置（参考/etc/ansible/ansible.cfg)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line">[defaults]</span><br><span class="line">inventory = /etc/ansible/hosts</span><br><span class="line">remote_user = alice			<span class="comment">#以什么用户远程被管理主机</span></span><br><span class="line"><span class="comment">#host_key_checking = False	#是否校验密钥</span></span><br><span class="line"></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become = <span class="literal">true</span>	<span class="comment">#是否需要切换用户</span></span><br><span class="line">become_method = sudo	<span class="comment">#如何切换用户</span></span><br><span class="line">become_user = root	<span class="comment">#切换成什么用户</span></span><br><span class="line">become_ask_pass = no	<span class="comment">#sudo是否需要输入密码</span></span><br></pre></td></tr></table></figure>

<h3 id="配置ssh密钥">1.8.2. 配置ssh密钥</h3><p>使用alice远程被管理主机，需要提前配置SSH密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]<span class="comment"># for i in node1 node2 node3 node4 node5</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	ssh-copy-id	alice@<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试效果</span></span><br><span class="line">[root@mgmt2 ~]<span class="comment"># ansible all -m command -a &quot;who&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="inventory配置">1.8.3. inventory配置</h3><p>修改主机清单文件，添加变量（多个变量空格分隔）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@mgmt2 ~]# cat /etc/ansible/hosts</span><br><span class="line">[test]</span><br><span class="line">node1 </span><br><span class="line"></span><br><span class="line">[proxy]</span><br><span class="line">node2 </span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">node[3:4] </span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">node5</span><br><span class="line"></span><br><span class="line">[cluster:children]</span><br><span class="line">web</span><br><span class="line">database</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ansible_ssh_prot=220    #自定义远程ssh端口</p>
<p>ansible_ssh_user=alice    #自定义远程连接的账户名</p>
<p>ansible_ssh_pass=密码    #自定义远程连接的密码</p>
<p>ansible_ssh_private_key_file=密钥文件    #自定义远程连接的密钥</p>
</blockquote>
<p>这里的配置项可以单独配置到对应的主机。</p>
]]></content>
      <categories>
        <category>ansible</category>
      </categories>
      <tags>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s面试题</title>
    <url>/p/30445.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="k8s面试题">1. k8s面试题</h1><h2 id="简述ETCD及其特点？">1.1. 简述ETCD及其特点？</h2><p>etcd 是 CoreOS 团队发起的开源项目，是一个管理配置信息和服务发现（service discovery）的项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。</p>
<p>特点：</p>
<ul>
<li><p>简单：支持 REST 风格的 HTTP+JSON API</p>
</li>
<li><p>安全：支持 HTTPS 方式的访问</p>
</li>
<li><p>快速：支持并发 1k/s 的写操作</p>
</li>
<li><p>可靠：支持分布式结构，基于 Raft 的一致性算法，Raft 是一套通过选举主节点来实现分布式系统一致性的算法。</p>
</li>
</ul>
<h2 id="简述ETCD适应的场景？">1.2. 简述ETCD适应的场景？</h2><p>etcd基于其优秀的特点，可广泛的应用于以下场景：</p>
<ul>
<li><p>服务发现(Service Discovery)：服务发现主要解决在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听udp或tcp端口，并且通过名字就可以查找和连接。</p>
</li>
<li><p>消息发布与订阅：在分布式系统中，最适用的一种组件间通信方式就是消息发布与订阅。即构建一个配置共享中心，数据提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦主题有消息发布，就会实时通知订阅者。通过这种方式可以做到分布式系统配置的集中式管理与动态更新。应用中用到的一些配置信息放到etcd上进行集中管理。</p>
</li>
<li><p>负载均衡：在分布式系统中，为了保证服务的高可用以及数据的一致性，通常都会把数据和服务部署多份，以此达到对等服务，即使其中的某一个服务失效了，也不影响使用。etcd本身分布式架构存储的信息访问支持负载均衡。etcd集群化以后，每个etcd的核心节点都可以处理用户的请求。所以，把数据量小但是访问频繁的消息数据直接存储到etcd中也可以实现负载均衡的效果。</p>
</li>
<li><p>分布式通知与协调：与消息发布和订阅类似，都用到了etcd中的Watcher机制，通过注册与异步通知机制，实现分布式环境下不同系统之间的通知与协调，从而对数据变更做到实时处理。</p>
</li>
<li><p>分布式锁：因为etcd使用Raft算法保持了数据的强一致性，某次操作存储到集群中的值必然是全局一致的，所以很容易实现分布式锁。锁服务有两种使用方式，一是保持独占，二是控制时序。</p>
</li>
<li><p>集群监控与Leader竞选：通过etcd来进行监控实现起来非常简单并且实时性强。</p>
</li>
</ul>
<h2 id="简述什么是Kubernetes？">1.3. 简述什么是Kubernetes？</h2><p>Kubernetes是一个全新的基于容器技术的分布式系统支撑平台。是Google开源的容器集群管理系统（谷歌内部:Borg）。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等一系列完整功能，提高了大规模容器集群管理的便捷性。并且具有完备的集群管理能力，多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和发现机制、內建智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制以及多粒度的资源配额管理能力。</p>
<h2 id="简述Kubernetes和Docker的关系？">1.4. 简述Kubernetes和Docker的关系？</h2><p>Docker 提供容器的生命周期管理和，Docker 镜像构建运行时容器。它的主要优点是将将软件/应用程序运行所需的设置和依赖项打包到一个容器中，从而实现了可移植性等优点。</p>
<p>Kubernetes 用于关联和编排在多个主机上运行的容器。</p>
<h2 id="简述Kubernetes中什么是Minikube、Kubectl、Kubelet？">1.5. 简述Kubernetes中什么是Minikube、Kubectl、Kubelet？</h2><p>Minikube 是一种可以在本地轻松运行一个单节点 Kubernetes 群集的工具。</p>
<p>Kubectl 是一个命令行工具，可以使用该工具控制Kubernetes集群管理器，如检查群集资源，创建、删除和更新组件，查看应用程序。</p>
<p>Kubelet 是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。</p>
<h2 id="简述Kubernetes常见的部署方式？">1.6. 简述Kubernetes常见的部署方式？</h2><p>常见的Kubernetes部署方式有：</p>
<ul>
<li><p>kubeadm：也是推荐的一种部署方式；</p>
</li>
<li><p>二进制：</p>
</li>
<li><p>minikube：在本地轻松运行一个单节点 Kubernetes 群集的工具。</p>
</li>
</ul>
<h2 id="简述Kubernetes如何实现集群管理？">1.7. 简述Kubernetes如何实现集群管理？</h2><p>在集群管理方面，Kubernetes将集群中的机器划分为一个Master节点和一群工作节点Node。其中，在Master节点运行着集群管理相关的一组进程kube-apiserver、kube-controller-manager和kube-scheduler，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理能力，并且都是全自动完成的。</p>
<h2 id="简述Kubernetes的优势、适应场景及其特点？">1.8. 简述Kubernetes的优势、适应场景及其特点？</h2><p>Kubernetes作为一个完备的分布式系统支撑平台，其主要优势：</p>
<ul>
<li><p>容器编排</p>
</li>
<li><p>轻量级</p>
</li>
<li><p>开源</p>
</li>
<li><p>弹性伸缩</p>
</li>
<li><p>负载均衡</p>
</li>
</ul>
<p>Kubernetes常见场景：</p>
<ul>
<li><p>快速部署应用</p>
</li>
<li><p>快速扩展应用</p>
</li>
<li><p>无缝对接新的应用功能</p>
</li>
<li><p>节省资源，优化硬件资源的使用</p>
</li>
</ul>
<p>Kubernetes相关特点：</p>
<ul>
<li><p>可移植: 支持公有云、私有云、混合云、多重云（multi-cloud）。</p>
</li>
<li><p>可扩展: 模块化,、插件化、可挂载、可组合。</p>
</li>
<li><p>自动化: 自动部署、自动重启、自动复制、自动伸缩/扩展。</p>
</li>
</ul>
<h2 id="简述Kubernetes的缺点或当前的不足之处？">1.9. 简述Kubernetes的缺点或当前的不足之处？</h2><p>Kubernetes当前存在的缺点（不足）如下：</p>
<ul>
<li><p>安装过程和配置相对困难复杂。</p>
</li>
<li><p>管理服务相对繁琐。</p>
</li>
<li><p>运行和编译需要很多时间。</p>
</li>
<li><p>它比其他替代品更昂贵。</p>
</li>
<li><p>对于简单的应用程序来说，可能不需要涉及Kubernetes即可满足。</p>
</li>
</ul>
<h2 id="简述Kubernetes相关基础概念？">1.10. 简述Kubernetes相关基础概念？</h2><ul>
<li><p>master：k8s集群的管理节点，负责管理集群，提供集群的资源数据访问入口。拥有Etcd存储服务（可选），运行Api Server进程，Controller Manager服务进程及Scheduler服务进程。</p>
</li>
<li><p>node（worker）：Node（worker）是Kubernetes集群架构中运行Pod的服务节点，是Kubernetes集群操作的单元，用来承载被分配Pod的运行，是Pod运行的宿主机。运行docker eninge服务，守护进程kunelet及负载均衡器kube-proxy。</p>
</li>
<li><p>pod：运行于Node节点上，若干相关容器的组合。Pod内包含的容器运行在同一宿主机上，使用相同的网络命名空间、IP地址和端口，能够通过localhost进行通信。Pod是Kurbernetes进行创建、调度和管理的最小单位，它提供了比容器更高层次的抽象，使得部署和管理更加灵活。一个Pod可以包含一个容器或者多个相关容器。</p>
</li>
<li><p>label：Kubernetes中的Label实质是一系列的Key/Value键值对，其中key与value可自定义。Label可以附加到各种资源对象上，如Node、Pod、Service、RC等。一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上去。Kubernetes通过Label Selector（标签选择器）查询和筛选资源对象。</p>
</li>
<li><p>Replication Controller：Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。集群中副本的数量大于指定数量，则会停止指定数量之外的多余容器数量。反之，则会启动少于指定数量个数的容器，保证数量不变。Replication Controller是实现弹性伸缩、动态扩容和滚动升级的核心。</p>
</li>
<li><p>Deployment：Deployment在内部使用了RS来实现目的，Deployment相当于RC的一次升级，其最大的特色为可以随时获知当前Pod的部署进度。</p>
</li>
<li><p>HPA（Horizontal Pod Autoscaler）：Pod的横向自动扩容，也是Kubernetes的一种资源，通过追踪分析RC控制的所有Pod目标的负载变化情况，来确定是否需要针对性的调整Pod副本数量。</p>
</li>
<li><p>Service：Service定义了Pod的逻辑集合和访问该集合的策略，是真实服务的抽象。Service提供了一个统一的服务访问入口以及服务代理和发现机制，关联多个相同Label的Pod，用户不需要了解后台Pod是如何运行。</p>
</li>
<li><p>Volume：Volume是Pod中能够被多个容器访问的共享目录，Kubernetes中的Volume是定义在Pod上，可以被一个或多个Pod中的容器挂载到某个目录下。</p>
</li>
<li><p>Namespace：Namespace用于实现多租户的资源隔离，可将集群内部的资源对象分配到不同的Namespace中，形成逻辑上的不同项目、小组或用户组，便于不同的Namespace在共享使用整个集群的资源的同时还能被分别管理。</p>
</li>
</ul>
<h2 id="简述Kubernetes集群相关组件？">1.11. 简述Kubernetes集群相关组件？</h2><p>Kubernetes Master控制组件，调度管理整个系统（集群），包含如下组件:</p>
<ul>
<li><p>Kubernetes API Server：作为Kubernetes系统的入口，其封装了核心对象的增删改查操作，以RESTful API接口方式提供给外部客户和内部组件调用，集群内各个功能模块之间数据交互和通信的中心枢纽。</p>
</li>
<li><p>Kubernetes Scheduler：为新建立的Pod进行节点(node)选择(即分配机器)，负责集群的资源调度。</p>
</li>
<li><p>Kubernetes Controller：负责执行各种控制器，目前已经提供了很多控制器来保证Kubernetes的正常运行。</p>
</li>
<li><p>Replication Controller：管理维护Replication Controller，关联Replication Controller和Pod，保证Replication Controller定义的副本数量与实际运行Pod数量一致。</p>
</li>
<li><p>Node Controller：管理维护Node，定期检查Node的健康状态，标识出(失效|未失效)的Node节点。</p>
</li>
<li><p>Namespace Controller：管理维护Namespace，定期清理无效的Namespace，包括Namesapce下的API对象，比如Pod、Service等。</p>
</li>
<li><p>Service Controller：管理维护Service，提供负载以及服务代理。</p>
</li>
<li><p>EndPoints Controller：管理维护Endpoints，关联Service和Pod，创建Endpoints为Service的后端，当Pod发生变化时，实时更新Endpoints。</p>
</li>
<li><p>Service Account Controller：管理维护Service Account，为每个Namespace创建默认的Service Account，同时为Service Account创建Service Account Secret。</p>
</li>
<li><p>Persistent Volume Controller：管理维护Persistent Volume和Persistent Volume Claim，为新的Persistent Volume Claim分配Persistent Volume进行绑定，为释放的Persistent Volume执行清理回收。</p>
</li>
<li><p>Daemon Set Controller：管理维护Daemon Set，负责创建Daemon Pod，保证指定的Node上正常的运行Daemon Pod。</p>
</li>
<li><p>Deployment Controller：管理维护Deployment，关联Deployment和Replication Controller，保证运行指定数量的Pod。当Deployment更新时，控制实现Replication Controller和Pod的更新。</p>
</li>
<li><p>Job Controller：管理维护Job，为Jod创建一次性任务Pod，保证完成Job指定完成的任务数目</p>
</li>
<li><p>Pod Autoscaler Controller：实现Pod的自动伸缩，定时获取监控数据，进行策略匹配，当满足条件时执行Pod的伸缩动作。</p>
</li>
</ul>
<h2 id="简述Kubernetes-RC的机制？">1.12. 简述Kubernetes RC的机制？</h2><p>Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。当定义了RC并提交至Kubernetes集群中之后，Master节点上的Controller Manager组件获悉，并同时巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，若存在过多的Pod副本在运行，系统会停止一些Pod，反之则自动创建一些Pod。</p>
<h2 id="简述Kubernetes-Replica-Set-和-Replication-Controller-之间有什么区别？">1.13. 简述Kubernetes Replica Set 和 Replication Controller 之间有什么区别？</h2><p>Replica Set 和 Replication Controller 类似，都是确保在任何给定时间运行指定数量的 Pod 副本。不同之处在于RS 使用基于集合的选择器，而 Replication Controller 使用基于权限的选择器。</p>
<h2 id="简述kube-proxy作用？">1.14. 简述kube-proxy作用？</h2><p>kube-proxy 运行在所有节点上，它监听 apiserver 中 service 和 endpoint 的变化情况，创建路由规则以提供服务 IP 和负载均衡功能。简单理解此进程是Service的透明代理兼负载均衡器，其核心功能是将到某个Service的访问请求转发到后端的多个Pod实例上。</p>
<h2 id="简述kube-proxy-iptables原理？">1.15. 简述kube-proxy iptables原理？</h2><p>Kubernetes从1.2版本开始，将iptables作为kube-proxy的默认模式。iptables模式下的kube-proxy不再起到Proxy的作用，其核心功能：通过API Server的Watch接口实时跟踪Service与Endpoint的变更信息，并更新对应的iptables规则，Client的请求流量则通过iptables的NAT机制“直接路由”到目标Pod。</p>
<h2 id="简述kube-proxy-ipvs原理？">1.16. 简述kube-proxy ipvs原理？</h2><p>IPVS在Kubernetes1.11中升级为GA稳定版。IPVS则专门用于高性能负载均衡，并使用更高效的数据结构（Hash表），允许几乎无限的规模扩张，因此被kube-proxy采纳为最新模式。</p>
<p>在IPVS模式下，使用iptables的扩展ipset，而不是直接调用iptables来生成规则链。iptables规则链是一个线性的数据结构，ipset则引入了带索引的数据结构，因此当规则很多时，也可以很高效地查找和匹配。</p>
<p>可以将ipset简单理解为一个IP（段）的集合，这个集合的内容可以是IP地址、IP网段、端口等，iptables可以直接添加规则对这个“可变的集合”进行操作，这样做的好处在于可以大大减少iptables规则的数量，从而减少性能损耗。</p>
<h2 id="简述kube-proxy-ipvs和iptables的异同？">1.17. 简述kube-proxy ipvs和iptables的异同？</h2><p>iptables与IPVS都是基于Netfilter实现的，但因为定位不同，二者有着本质的差别：iptables是为防火墙而设计的；IPVS则专门用于高性能负载均衡，并使用更高效的数据结构（Hash表），允许几乎无限的规模扩张。</p>
<p>与iptables相比，IPVS拥有以下明显优势：</p>
<ul>
<li><p>1、为大型集群提供了更好的可扩展性和性能；</p>
</li>
<li><p>2、支持比iptables更复杂的复制均衡算法（最小负载、最少连接、加权等）；</p>
</li>
<li><p>3、支持服务器健康检查和连接重试等功能；</p>
</li>
<li><p>4、可以动态修改ipset的集合，即使iptables的规则正在使用这个集合。</p>
</li>
</ul>
<h2 id="简述Kubernetes中什么是静态Pod？">1.18. 简述Kubernetes中什么是静态Pod？</h2><p>静态pod是由kubelet进行管理的仅存在于特定Node的Pod上，他们不能通过API Server进行管理，无法与ReplicationController、Deployment或者DaemonSet进行关联，并且kubelet无法对他们进行健康检查。静态Pod总是由kubelet进行创建，并且总是在kubelet所在的Node上运行。</p>
<h2 id="简述Kubernetes中Pod可能位于的状态？">1.19. 简述Kubernetes中Pod可能位于的状态？</h2><ul>
<li><p>Pending：API Server已经创建该Pod，且Pod内还有一个或多个容器的镜像没有创建，包括正在下载镜像的过程。</p>
</li>
<li><p>Running：Pod内所有容器均已创建，且至少有一个容器处于运行状态、正在启动状态或正在重启状态。</p>
</li>
<li><p>Succeeded：Pod内所有容器均成功执行退出，且不会重启。</p>
</li>
<li><p>Failed：Pod内所有容器均已退出，但至少有一个容器退出为失败状态。</p>
</li>
<li><p>Unknown：由于某种原因无法获取该Pod状态，可能由于网络通信不畅导致。</p>
</li>
</ul>
<h2 id="简述Kubernetes创建一个Pod的主要流程？">1.20. 简述Kubernetes创建一个Pod的主要流程？</h2><p>Kubernetes中创建一个Pod涉及多个组件之间联动，主要流程如下：</p>
<ul>
<li><p>1、客户端提交Pod的配置信息（可以是yaml文件定义的信息）到kube-apiserver。</p>
</li>
<li><p>2、Apiserver收到指令后，通知给controller-manager创建一个资源对象。</p>
</li>
<li><p>3、Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中。</p>
</li>
<li><p>4、Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。</p>
</li>
<li><p>5、Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。</p>
</li>
</ul>
<h2 id="简述Kubernetes中Pod的重启策略？">1.21. 简述Kubernetes中Pod的重启策略？</h2><p>Pod重启策略（RestartPolicy）应用于Pod内的所有容器，并且仅在Pod所处的Node上由kubelet进行判断和重启操作。当某个容器异常退出或者健康检查失败时，kubelet将根据RestartPolicy的设置来进行相应操作。</p>
<p>Pod的重启策略包括Always、OnFailure和Never，默认值为Always。</p>
<ul>
<li><p>Always：当容器失效时，由kubelet自动重启该容器；</p>
</li>
<li><p>OnFailure：当容器终止运行且退出码不为0时，由kubelet自动重启该容器；</p>
</li>
<li><p>Never：不论容器运行状态如何，kubelet都不会重启该容器。</p>
</li>
</ul>
<p>同时Pod的重启策略与控制方式关联，当前可用于管理Pod的控制器包括ReplicationController、Job、DaemonSet及直接管理kubelet管理（静态Pod）。</p>
<p>不同控制器的重启策略限制如下：</p>
<ul>
<li><p>RC和DaemonSet：必须设置为Always，需要保证该容器持续运行；</p>
</li>
<li><p>Job：OnFailure或Never，确保容器执行完成后不再重启；</p>
</li>
<li><p>kubelet：在Pod失效时重启，不论将RestartPolicy设置为何值，也不会对Pod进行健康检查。</p>
</li>
</ul>
<h2 id="简述Kubernetes中Pod的健康检查方式？">1.22. 简述Kubernetes中Pod的健康检查方式？</h2><p>对Pod的健康检查可以通过两类探针来检查：LivenessProbe和ReadinessProbe。</p>
<ul>
<li><p>LivenessProbe探针：用于判断容器是否存活（running状态），如果LivenessProbe探针探测到容器不健康，则kubelet将杀掉该容器，并根据容器的重启策略做相应处理。若一个容器不包含LivenessProbe探针，kubelet认为该容器的LivenessProbe探针返回值用于是“Success”。</p>
</li>
<li><p>ReadineeProbe探针：用于判断容器是否启动完成（ready状态）。如果ReadinessProbe探针探测到失败，则Pod的状态将被修改。Endpoint Controller将从Service的Endpoint中删除包含该容器所在Pod的Eenpoint。</p>
</li>
<li><p>startupProbe探针：启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉。</p>
</li>
</ul>
<h2 id="简述Kubernetes-Pod的LivenessProbe探针的常见方式？">1.23. 简述Kubernetes Pod的LivenessProbe探针的常见方式？</h2><p>kubelet定期执行LivenessProbe探针来诊断容器的健康状态，通常有以下三种方式：</p>
<ul>
<li><p>ExecAction：在容器内执行一个命令，若返回码为0，则表明容器健康。</p>
</li>
<li><p>TCPSocketAction：通过容器的IP地址和端口号执行TCP检查，若能建立TCP连接，则表明容器健康。</p>
</li>
<li><p>HTTPGetAction：通过容器的IP地址、端口号及路径调用HTTP Get方法，若响应的状态码大于等于200且小于400，则表明容器健康。</p>
</li>
</ul>
<h2 id="简述Kubernetes-Pod的常见调度方式？">1.24. 简述Kubernetes Pod的常见调度方式？</h2><p>Kubernetes中，Pod通常是容器的载体，主要有如下常见调度方式：</p>
<ul>
<li><p>Deployment或RC：该调度策略主要功能就是自动部署一个容器应用的多份副本，以及持续监控副本的数量，在集群内始终维持用户指定的副本数量。</p>
</li>
<li><p>NodeSelector：定向调度，当需要手动指定将Pod调度到特定Node上，可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配。</p>
</li>
<li><p>NodeAffinity亲和性调度：亲和性调度机制极大的扩展了Pod的调度能力，目前有两种节点亲和力表达：</p>
</li>
<li><p>requiredDuringSchedulingIgnoredDuringExecution：硬规则，必须满足指定的规则，调度器才可以调度Pod至Node上（类似nodeSelector，语法不同）。</p>
</li>
<li><p>preferredDuringSchedulingIgnoredDuringExecution：软规则，优先调度至满足的Node的节点，但不强求，多个优先级规则还可以设置权重值。</p>
</li>
<li><p>Taints和Tolerations（污点和容忍）：</p>
</li>
<li><p>Taint：使Node拒绝特定Pod运行；</p>
</li>
<li><p>Toleration：为Pod的属性，表示Pod能容忍（运行）标注了Taint的Node。</p>
</li>
</ul>
<h2 id="简述Kubernetes初始化容器（init-container）？">1.25. 简述Kubernetes初始化容器（init container）？</h2><p>init container的运行方式与应用容器不同，它们必须先于应用容器执行完成，当设置了多个init container时，将按顺序逐个运行，并且只有前一个init container运行成功后才能运行后一个init container。当所有init container都成功运行后，Kubernetes才会初始化Pod的各种信息，并开始创建和运行应用容器。</p>
<h2 id="简述Kubernetes-deployment升级过程？">1.26. 简述Kubernetes deployment升级过程？</h2><ul>
<li><p>初始创建Deployment时，系统创建了一个ReplicaSet，并按用户的需求创建了对应数量的Pod副本。</p>
</li>
<li><p>当更新Deployment时，系统创建了一个新的ReplicaSet，并将其副本数量扩展到1，然后将旧ReplicaSet缩减为2。</p>
</li>
<li><p>之后，系统继续按照相同的更新策略对新旧两个ReplicaSet进行逐个调整。</p>
</li>
<li><p>最后，新的ReplicaSet运行了对应个新版本Pod副本，旧的ReplicaSet副本数量则缩减为0。</p>
</li>
</ul>
<h2 id="简述Kubernetes-deployment升级策略？">1.27. 简述Kubernetes deployment升级策略？</h2><p>在Deployment的定义中，可以通过spec.strategy指定Pod更新的策略，目前支持两种策略：Recreate（重建）和RollingUpdate（滚动更新），默认值为RollingUpdate。</p>
<ul>
<li>Recreate：设置spec.strategy.type=Recreate，表示Deployment在更新Pod时，会先杀掉所有正在运行的Pod，然后创建新的Pod。</li>
<li>RollingUpdate：设置spec.strategy.type=RollingUpdate，表示Deployment会以滚动更新的方式来逐个更新Pod。同时，可以通过设置spec.strategy.rollingUpdate下的两个参数（maxUnavailable和maxSurge）来控制滚动更新的过程。</li>
</ul>
<h2 id="简述Kubernetes-DaemonSet类型的资源特性？">1.28. 简述Kubernetes DaemonSet类型的资源特性？</h2><p>DaemonSet资源对象会在每个Kubernetes集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。因此，在定义yaml文件中，不支持定义replicas。</p>
<p>它的一般使用场景如下：</p>
<ul>
<li>在去做每个节点的日志收集工作。</li>
<li>监控每个节点的的运行状态。</li>
</ul>
<h2 id="简述Kubernetes自动扩容机制？">1.29. 简述Kubernetes自动扩容机制？</h2><p>Kubernetes使用Horizontal Pod Autoscaler（HPA）的控制器实现基于CPU使用率进行自动Pod扩缩容的功能。HPA控制器周期性地监测目标Pod的资源性能指标，并与HPA资源对象中的扩缩容条件进行对比，在满足条件时对Pod副本数量进行调整。</p>
<ul>
<li>HPA原理</li>
</ul>
<p>Kubernetes中的某个Metrics Server（Heapster或自定义Metrics Server）持续采集所有Pod副本的指标数据。HPA控制器通过Metrics Server的API（Heapster的API或聚合API）获取这些数据，基于用户定义的扩缩容规则进行计算，得到目标Pod副本数量。</p>
<p>当目标Pod副本数量与当前副本数量不同时，HPA控制器就向Pod的副本控制器（Deployment、RC或ReplicaSet）发起scale操作，调整Pod的副本数量，完成扩缩容操作。</p>
<h2 id="简述Kubernetes-Service类型？">1.30. 简述Kubernetes Service类型？</h2><p>通过创建Service，可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发到后端的各个容器应用上。其主要类型有：</p>
<ul>
<li><p>ClusterIP：虚拟的服务IP地址，该地址用于Kubernetes集群内部的Pod访问，在Node上kube-proxy通过设置的iptables规则进行转发；</p>
</li>
<li><p>NodePort：使用宿主机的端口，使能够访问各Node的外部客户端通过Node的IP地址和端口号就能访问服务；</p>
</li>
<li><p>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，需要在spec.status.loadBalancer字段指定外部负载均衡器的IP地址，通常用于公有云。</p>
</li>
</ul>
<h2 id="简述Kubernetes-Service分发后端的策略？">1.31. 简述Kubernetes Service分发后端的策略？</h2><p>Service负载分发的策略有：RoundRobin和SessionAffinity</p>
<ul>
<li>RoundRobin：默认为轮询模式，即轮询将请求转发到后端的各个Pod上。</li>
<li>SessionAffinity：基于客户端IP地址进行会话保持的模式，即第1次将某个客户端发起的请求转发到后端的某个Pod上，之后从相同的客户端发起的请求都将被转发到后端相同的Pod上。</li>
</ul>
<h2 id="简述Kubernetes-Headless-Service？">1.32. 简述Kubernetes Headless Service？</h2><p>在某些应用场景中，若需要人为指定负载均衡器，不使用Service提供的默认负载均衡的功能，或者应用程序希望知道属于同组服务的其他实例。Kubernetes提供了Headless Service来实现这种功能，即不为Service设置ClusterIP（入口IP地址），仅通过Label Selector将后端的Pod列表返回给调用的客户端。</p>
<h2 id="简述Kubernetes外部如何访问集群内的服务？">1.33. 简述Kubernetes外部如何访问集群内的服务？</h2><p>对于Kubernetes，集群外的客户端默认情况，无法通过Pod的IP地址或者Service的虚拟IP地址:虚拟端口号进行访问。通常可以通过以下方式进行访问Kubernetes集群内的服务：</p>
<ul>
<li><p>映射Pod到物理机：将Pod端口号映射到宿主机，即在Pod中采用hostPort方式，以使客户端应用能够通过物理机访问容器应用。</p>
</li>
<li><p>映射Service到物理机：将Service端口号映射到宿主机，即在Service中采用nodePort方式，以使客户端应用能够通过物理机访问容器应用。</p>
</li>
<li><p>映射Sercie到LoadBalancer：通过设置LoadBalancer映射到云服务商提供的LoadBalancer地址。这种用法仅用于在公有云服务提供商的云平台上设置Service的场景。</p>
</li>
</ul>
<h2 id="简述Kubernetes-ingress？">1.34. 简述Kubernetes ingress？</h2><p>Kubernetes的Ingress资源对象，用于将不同URL的访问请求转发到后端不同的Service，以实现HTTP层的业务路由机制。</p>
<p>Kubernetes使用了Ingress策略和Ingress Controller，两者结合并实现了一个完整的Ingress负载均衡器。使用Ingress进行负载分发时，Ingress Controller基于Ingress规则将客户端请求直接转发到Service对应的后端Endpoint（Pod）上，从而跳过kube-proxy的转发功能，kube-proxy不再起作用，全过程为：ingress controller + ingress 规则 —-&gt; services。</p>
<p>同时当Ingress Controller提供的是对外服务，则实际上实现的是边缘路由器的功能。</p>
<h2 id="简述Kubernetes镜像的下载策略？">1.35. 简述Kubernetes镜像的下载策略？</h2><p>K8s的镜像下载策略有三种：Always、Never、IFNotPresent。</p>
<ul>
<li><p>Always：镜像标签为latest时，总是从指定的仓库中获取镜像。</p>
</li>
<li><p>Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像。</p>
</li>
<li><p>IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。</p>
</li>
</ul>
<h2 id="简述Kubernetes的负载均衡器？">1.36. 简述Kubernetes的负载均衡器？</h2><p>负载均衡器是暴露服务的最常见和标准方式之一。</p>
<p>根据工作环境使用两种类型的负载均衡器，即内部负载均衡器或外部负载均衡器。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。</p>
<h2 id="简述Kubernetes各模块如何与API-Server通信？">1.37. 简述Kubernetes各模块如何与API Server通信？</h2><p>Kubernetes API Server作为集群的核心，负责集群各功能模块之间的通信。集群内的各个功能模块通过API Server将信息存入etcd，当需要获取和操作这些数据时，则通过API Server提供的REST接口（用GET、LIST或WATCH方法）来实现，从而实现各模块之间的信息交互。</p>
<p>如kubelet进程与API Server的交互：每个Node上的kubelet每隔一个时间周期，就会调用一次API Server的REST接口报告自身状态，API Server在接收到这些信息后，会将节点状态信息更新到etcd中。</p>
<p>如kube-controller-manager进程与API Server的交互：kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口实时监控Node的信息，并做相应处理。</p>
<p>如kube-scheduler进程与API Server的交互：Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑，在调度成功后将Pod绑定到目标节点上。</p>
<h2 id="简述Kubernetes-Scheduler作用及实现原理？">1.38. 简述Kubernetes Scheduler作用及实现原理？</h2><p>Kubernetes Scheduler是负责Pod调度的重要功能模块，Kubernetes Scheduler在整个系统中承担了“承上启下”的重要功能，“承上”是指它负责接收Controller Manager创建的新Pod，为其调度至目标Node；“启下”是指调度完成后，目标Node上的kubelet服务进程接管后继工作，负责Pod接下来生命周期。</p>
<p>Kubernetes Scheduler的作用是将待调度的Pod（API新创建的Pod、Controller Manager为补足副本而创建的Pod等）按照特定的调度算法和调度策略绑定（Binding）到集群中某个合适的Node上，并将绑定信息写入etcd中。</p>
<p>在整个调度过程中涉及三个对象，分别是待调度Pod列表、可用Node列表，以及调度算法和策略。</p>
<p>Kubernetes Scheduler通过调度算法调度为待调度Pod列表中的每个Pod从Node列表中选择一个最适合的Node来实现Pod的调度。随后，目标节点上的kubelet通过API Server监听到Kubernetes Scheduler产生的Pod绑定事件，然后获取对应的Pod清单，下载Image镜像并启动容器。</p>
<h2 id="简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点？">1.39. 简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点？</h2><p>Kubernetes Scheduler根据如下两种调度算法将 Pod 绑定到最合适的工作节点：</p>
<ul>
<li>预选（Predicates）：输入是所有节点，输出是满足预选条件的节点。kube-scheduler根据预选策略过滤掉不满足策略的Nodes。如果某节点的资源不足或者不满足预选策略的条件则无法通过预选。如“Node的label必须与Pod的Selector一致”。</li>
<li>优选（Priorities）：输入是预选阶段筛选出的节点，优选会根据优先策略为通过预选的Nodes进行打分排名，选择得分最高的Node。例如，资源越富裕、负载越小的Node可能具有越高的排名。</li>
</ul>
<h2 id="简述Kubernetes-kubelet的作用？">1.40. 简述Kubernetes kubelet的作用？</h2><p>在Kubernetes集群中，在每个Node（又称Worker）上都会启动一个kubelet服务进程。该进程用于处理Master下发到本节点的任务，管理Pod及Pod中的容器。每个kubelet进程都会在API Server上注册节点自身的信息，定期向Master汇报节点资源的使用情况，并通过cAdvisor监控容器和节点资源。</p>
<h2 id="简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的？">1.41. 简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的？</h2><p>kubelet使用cAdvisor对worker节点资源进行监控。在 Kubernetes 系统中，cAdvisor 已被默认集成到 kubelet 组件内，当 kubelet 服务启动时，它会自动启动 cAdvisor 服务，然后 cAdvisor 会实时采集所在节点的性能指标及在节点上运行的容器的性能指标。</p>
<h2 id="简述Kubernetes如何保证集群的安全性？">1.42. 简述Kubernetes如何保证集群的安全性？</h2><p>Kubernetes通过一系列机制来实现集群的安全控制，主要有如下不同的维度：</p>
<ul>
<li><p>基础设施方面：保证容器与其所在宿主机的隔离；</p>
</li>
<li><p>权限方面：</p>
</li>
<li><ul>
<li>最小权限原则：合理限制所有组件的权限，确保组件只执行它被授权的行为，通过限制单个组件的能力来限制它的权限范围。</li>
<li>用户权限：划分普通用户和管理员的角色。</li>
</ul>
</li>
<li><p>集群方面：</p>
</li>
<li><ul>
<li>API Server的认证授权：Kubernetes集群中所有资源的访问和变更都是通过Kubernetes API Server来实现的，因此需要建议采用更安全的HTTPS或Token来识别和认证客户端身份（Authentication），以及随后访问权限的授权（Authorization）环节。</li>
<li>API Server的授权管理：通过授权策略来决定一个API调用是否合法。对合法用户进行授权并且随后在用户访问时进行鉴权，建议采用更安全的RBAC方式来提升集群安全授权。</li>
</ul>
</li>
<li><ul>
<li>敏感数据引入Secret机制：对于集群敏感数据建议使用Secret方式进行保护。</li>
<li>AdmissionControl（准入机制）：对kubernetes api的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。</li>
</ul>
</li>
</ul>
<h2 id="简述Kubernetes准入机制？">1.43. 简述Kubernetes准入机制？</h2><p>在对集群进行请求时，每个准入控制代码都按照一定顺序执行。如果有一个准入控制拒绝了此次请求，那么整个请求的结果将会立即返回，并提示用户相应的error信息。</p>
<p>准入控制（AdmissionControl）准入控制本质上为一段准入代码，在对kubernetes api的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。常用组件（控制代码）如下：</p>
<ul>
<li><p>AlwaysAdmit：允许所有请求</p>
</li>
<li><p>AlwaysDeny：禁止所有请求，多用于测试环境。</p>
</li>
<li><p>ServiceAccount：它将serviceAccounts实现了自动化，它会辅助serviceAccount做一些事情，比如如果pod没有serviceAccount属性，它会自动添加一个default，并确保pod的serviceAccount始终存在。</p>
</li>
<li><p>LimitRanger：观察所有的请求，确保没有违反已经定义好的约束条件，这些条件定义在namespace中LimitRange对象中。</p>
</li>
<li><p>NamespaceExists：观察所有的请求，如果请求尝试创建一个不存在的namespace，则这个请求被拒绝。</p>
</li>
</ul>
<h2 id="简述Kubernetes-RBAC及其特点（优势）？">1.44. 简述Kubernetes RBAC及其特点（优势）？</h2><p>RBAC是基于角色的访问控制，是一种基于个人用户的角色来管理对计算机或网络资源的访问的方法。</p>
<p>相对于其他授权模式，RBAC具有如下优势：</p>
<ul>
<li><p>对集群中的资源和非资源权限均有完整的覆盖。</p>
</li>
<li><p>整个RBAC完全由几个API对象完成， 同其他API对象一样， 可以用kubectl或API进行操作。</p>
</li>
<li><p>可以在运行时进行调整，无须重新启动API Server。</p>
</li>
</ul>
<h2 id="简述Kubernetes-Secret作用？">1.45. 简述Kubernetes Secret作用？</h2><p>Secret对象，主要作用是保管私密数据，比如密码、OAuth Tokens、SSH Keys等信息。将这些私密信息放在Secret对象中比直接放在Pod或Docker Image中更安全，也更便于使用和分发。</p>
<h2 id="简述Kubernetes-Secret有哪些使用方式？">1.46. 简述Kubernetes Secret有哪些使用方式？</h2><p>创建完secret之后，可通过如下三种方式使用：</p>
<ul>
<li><p>在创建Pod时，通过为Pod指定Service Account来自动使用该Secret。</p>
</li>
<li><p>通过挂载该Secret到Pod来使用它。</p>
</li>
<li><p>在Docker镜像下载时使用，通过指定Pod的spc.ImagePullSecrets来引用它。</p>
</li>
</ul>
<h2 id="简述Kubernetes-PodSecurityPolicy机制？">1.47. 简述Kubernetes PodSecurityPolicy机制？</h2><p>Kubernetes PodSecurityPolicy是为了更精细地控制Pod对资源的使用方式以及提升安全策略。在开启PodSecurityPolicy准入控制器后，Kubernetes默认不允许创建任何Pod，需要创建PodSecurityPolicy策略和相应的RBAC授权策略（Authorizing Policies），Pod才能创建成功。</p>
<h2 id="简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略？">1.48. 简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略？</h2><p>在PodSecurityPolicy对象中可以设置不同字段来控制Pod运行时的各种安全策略，常见的有：</p>
<ul>
<li><p>特权模式：privileged是否允许Pod以特权模式运行。</p>
</li>
<li><p>宿主机资源：控制Pod对宿主机资源的控制，如hostPID：是否允许Pod共享宿主机的进程空间。</p>
</li>
<li><p>用户和组：设置运行容器的用户ID（范围）或组（范围）。</p>
</li>
<li><p>提升权限：AllowPrivilegeEscalation：设置容器内的子进程是否可以提升权限，通常在设置非root用户（MustRunAsNonRoot）时进行设置。</p>
</li>
<li><p>SELinux：进行SELinux的相关配置。</p>
</li>
</ul>
<h2 id="简述Kubernetes网络模型？">1.49. 简述Kubernetes网络模型？</h2><p>Kubernetes网络模型中每个Pod都拥有一个独立的IP地址，并假定所有Pod都在一个可以直接连通的、扁平的网络空间中。所以不管它们是否运行在同一个Node（宿主机）中，都要求它们可以直接通过对方的IP进行访问。设计这个原则的原因是，用户不需要额外考虑如何建立Pod之间的连接，也不需要考虑如何将容器端口映射到主机端口等问题。</p>
<p>同时为每个Pod都设置一个IP地址的模型使得同一个Pod内的不同容器会共享同一个网络命名空间，也就是同一个Linux网络协议栈。这就意味着同一个Pod内的容器可以通过localhost来连接对方的端口。</p>
<p>在Kubernetes的集群里，IP是以Pod为单位进行分配的。一个Pod内部的所有容器共享一个网络堆栈（相当于一个网络命名空间，它们的IP地址、网络设备、配置等都是共享的）。</p>
<h2 id="简述Kubernetes-CNI模型？">1.50. 简述Kubernetes CNI模型？</h2><p>CNI提供了一种应用容器的插件化网络解决方案，定义对容器网络进行操作和配置的规范，通过插件的形式对CNI接口进行实现。CNI仅关注在创建容器时分配网络资源，和在销毁容器时删除网络资源。在CNI模型中只涉及两个概念：容器和网络。</p>
<ul>
<li>容器（Container）：是拥有独立Linux网络命名空间的环境，例如使用Docker或rkt创建的容器。容器需要拥有自己的Linux网络命名空间，这是加入网络的必要条件。</li>
<li>网络（Network）：表示可以互连的一组实体，这些实体拥有各自独立、唯一的IP地址，可以是容器、物理机或者其他网络设备（比如路由器）等。</li>
</ul>
<p>对容器网络的设置和操作都通过插件（Plugin）进行具体实现，CNI插件包括两种类型：CNI Plugin和IPAM（IP Address  Management）Plugin。CNI Plugin负责为容器配置网络资源，IPAM Plugin负责对容器的IP地址进行分配和管理。IPAM Plugin作为CNI Plugin的一部分，与CNI Plugin协同工作。</p>
<h2 id="简述Kubernetes网络策略？">1.51. 简述Kubernetes网络策略？</h2><p>为实现细粒度的容器间网络访问隔离策略，Kubernetes引入Network Policy。</p>
<p>Network Policy的主要功能是对Pod间的网络通信进行限制和准入控制，设置允许访问或禁止访问的客户端Pod列表。Network Policy定义网络策略，配合策略控制器（Policy Controller）进行策略的实现。</p>
<h2 id="简述Kubernetes网络策略原理？">1.52. 简述Kubernetes网络策略原理？</h2><p>Network Policy的工作原理主要为：policy controller需要实现一个API Listener，监听用户设置的Network Policy定义，并将网络访问规则通过各Node的Agent进行实际设置（Agent则需要通过CNI网络插件实现）。</p>
<h2 id="简述Kubernetes中flannel的作用？">1.53. 简述Kubernetes中flannel的作用？</h2><p>Flannel可以用于Kubernetes底层网络的实现，主要作用有：</p>
<ul>
<li>它能协助Kubernetes，给每一个Node上的Docker容器都分配互相不冲突的IP地址。</li>
<li>它能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内。</li>
</ul>
<h2 id="简述Kubernetes-Calico网络组件实现原理？">1.54. 简述Kubernetes Calico网络组件实现原理？</h2><p>Calico是一个基于BGP的纯三层的网络方案，与OpenStack、Kubernetes、AWS、GCE等云平台都能够良好地集成。</p>
<p>Calico在每个计算节点都利用Linux Kernel实现了一个高效的vRouter来负责数据转发。每个vRouter都通过BGP协议把在本节点上运行的容器的路由信息向整个Calico网络广播，并自动设置到达其他节点的路由转发规则。</p>
<p>Calico保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico节点组网时可以直接利用数据中心的网络结构（L2或者L3），不需要额外的NAT、隧道或者Overlay Network，没有额外的封包解包，能够节约CPU运算，提高网络效率。</p>
<h2 id="简述Kubernetes共享存储的作用？">1.55. 简述Kubernetes共享存储的作用？</h2><p>Kubernetes对于有状态的容器应用或者对数据需要持久化的应用，因此需要更加可靠的存储来保存应用产生的重要数据，以便容器应用在重建之后仍然可以使用之前的数据。因此需要使用共享存储。</p>
<h2 id="简述Kubernetes数据持久化的方式有哪些？">1.56. 简述Kubernetes数据持久化的方式有哪些？</h2><p>Kubernetes通过数据持久化来持久化保存重要数据，常见的方式有：</p>
<ul>
<li><p>EmptyDir（空目录）：没有指定要挂载宿主机上的某个目录，直接由Pod内保部映射到宿主机上。类似于docker中的manager volume。</p>
</li>
<li><p>场景：</p>
</li>
<li><ul>
<li>只需要临时将数据保存在磁盘上，比如在合并/排序算法中；</li>
<li>作为两个容器的共享存储。</li>
</ul>
</li>
<li><p>特性：</p>
</li>
<li><ul>
<li>同个pod里面的不同容器，共享同一个持久化目录，当pod节点删除时，volume的数据也会被删除。</li>
<li>emptyDir的数据持久化的生命周期和使用的pod一致，一般是作为临时存储使用。</li>
</ul>
</li>
<li><p>Hostpath：将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。</p>
</li>
<li><ul>
<li>特性：增加了pod与节点之间的耦合。</li>
</ul>
</li>
</ul>
<p>PersistentVolume（简称PV）：如基于NFS服务的PV，也可以基于GFS的PV。它的作用是统一数据持久化目录，方便管理。</p>
<h2 id="简述Kubernetes-PV和PVC？">1.57. 简述Kubernetes PV和PVC？</h2><p>PV是对底层网络共享存储的抽象，将共享存储定义为一种“资源”。</p>
<p>PVC则是用户对存储资源的一个“申请”。</p>
<h2 id="简述Kubernetes-PV生命周期内的阶段？">1.58. 简述Kubernetes PV生命周期内的阶段？</h2><p>某个PV在生命周期中可能处于以下4个阶段（Phaes）之一。</p>
<ul>
<li><p>Available：可用状态，还未与某个PVC绑定。</p>
</li>
<li><p>Bound：已与某个PVC绑定。</p>
</li>
<li><p>Released：绑定的PVC已经删除，资源已释放，但没有被集群回收。</p>
</li>
<li><p>Failed：自动资源回收失败。</p>
</li>
</ul>
<h2 id="简述Kubernetes所支持的存储供应模式？">1.59. 简述Kubernetes所支持的存储供应模式？</h2><p>Kubernetes支持两种资源的存储供应模式：静态模式（Static）和动态模式（Dynamic）。</p>
<ul>
<li>静态模式：集群管理员手工创建许多PV，在定义PV时需要将后端存储的特性进行设置。</li>
<li>动态模式：集群管理员无须手工创建PV，而是通过StorageClass的设置对后端存储进行描述，标记为某种类型。此时要求PVC对存储的类型进行声明，系统将自动完成PV的创建及与PVC的绑定。</li>
</ul>
<h2 id="简述Kubernetes-CSI模型？">1.60. 简述Kubernetes CSI模型？</h2><p>Kubernetes CSI是Kubernetes推出与容器对接的存储接口标准，存储提供方只需要基于标准接口进行存储插件的实现，就能使用Kubernetes的原生存储机制为容器提供存储服务。CSI使得存储提供方的代码能和Kubernetes代码彻底解耦，部署也与Kubernetes核心组件分离，显然，存储插件的开发由提供方自行维护，就能为Kubernetes用户提供更多的存储功能，也更加安全可靠。</p>
<p>CSI包括CSI Controller和CSI Node：</p>
<ul>
<li>CSI Controller的主要功能是提供存储服务视角对存储资源和存储卷进行管理和操作。</li>
<li>CSI Node的主要功能是对主机（Node）上的Volume进行管理和操作。</li>
</ul>
<h2 id="简述Kubernetes-Worker节点加入集群的过程？">1.61. 简述Kubernetes Worker节点加入集群的过程？</h2><p>通常需要对Worker节点进行扩容，从而将应用系统进行水平扩展。主要过程如下：</p>
<ul>
<li><p>1、在该Node上安装Docker、kubelet和kube-proxy服务；</p>
</li>
<li><p>2、然后配置kubelet和kubeproxy的启动参数，将Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务；</p>
</li>
<li><p>3、通过kubelet默认的自动注册机制，新的Worker将会自动加入现有的Kubernetes集群中；</p>
</li>
<li><p>4、Kubernetes Master在接受了新Worker的注册之后，会自动将其纳入当前集群的调度范围。</p>
</li>
</ul>
<h2 id="简述Kubernetes-Pod如何实现对节点的资源控制？">1.62. 简述Kubernetes Pod如何实现对节点的资源控制？</h2><p>Kubernetes集群里的节点提供的资源主要是计算资源，计算资源是可计量的能被申请、分配和使用的基础资源。当前Kubernetes集群中的计算资源主要包括CPU、GPU及Memory。CPU与Memory是被Pod使用的，因此在配置Pod时可以通过参数CPU Request及Memory Request为其中的每个容器指定所需使用的CPU与Memory量，Kubernetes会根据Request的值去查找有足够资源的Node来调度此Pod。</p>
<p>通常，一个程序所使用的CPU与Memory是一个动态的量，确切地说，是一个范围，跟它的负载密切相关：负载增加时，CPU和Memory的使用量也会增加。</p>
<h2 id="简述Kubernetes-Requests和Limits如何影响Pod的调度？">1.63. 简述Kubernetes Requests和Limits如何影响Pod的调度？</h2><p>当一个Pod创建成功时，Kubernetes调度器（Scheduler）会为该Pod选择一个节点来执行。对于每种计算资源（CPU和Memory）而言，每个节点都有一个能用于运行Pod的最大容量值。调度器在调度时，首先要确保调度后该节点上所有Pod的CPU和内存的Requests总和，不超过该节点能提供给Pod使用的CPU和Memory的最大容量值。</p>
<h2 id="简述Kubernetes-Metric-Service？">1.64. 简述Kubernetes Metric Service？</h2><p>在Kubernetes从1.10版本后采用Metrics Server作为默认的性能数据采集和监控，主要用于提供核心指标（Core Metrics），包括Node、Pod的CPU和内存使用指标。</p>
<p>对其他自定义指标（Custom Metrics）的监控则由Prometheus等组件来完成。</p>
<h2 id="简述Kubernetes中，如何使用EFK实现日志的统一管理？">1.65. 简述Kubernetes中，如何使用EFK实现日志的统一管理？</h2><p>在Kubernetes集群环境中，通常一个完整的应用或服务涉及组件过多，建议对日志系统进行集中化管理，通常采用EFK实现。</p>
<p>EFK是 Elasticsearch、Fluentd 和 Kibana 的组合，其各组件功能如下：</p>
<ul>
<li><p>Elasticsearch：是一个搜索引擎，负责存储日志并提供查询接口；</p>
</li>
<li><p>Fluentd：负责从 Kubernetes 搜集日志，每个node节点上面的fluentd监控并收集该节点上面的系统日志，并将处理过后的日志信息发送给Elasticsearch；</p>
</li>
<li><p>Kibana：提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。</p>
</li>
</ul>
<p>通过在每台node上部署一个以DaemonSet方式运行的fluentd来收集每台node上的日志。Fluentd将docker日志目录/var/lib/docker/containers和/var/log目录挂载到Pod中，然后Pod会在node节点的/var/log/pods目录中创建新的目录，可以区别不同的容器日志输出，该目录下有一个日志文件链接到/var/lib/docker/contianers目录下的容器日志输出。</p>
<h2 id="简述Kubernetes如何进行优雅的节点关机维护？">1.66. 简述Kubernetes如何进行优雅的节点关机维护？</h2><p>由于Kubernetes节点运行大量Pod，因此在进行关机维护之前，建议先使用kubectl drain将该节点的Pod进行驱逐，然后进行关机维护。</p>
<h2 id="简述Kubernetes集群联邦？">1.67. 简述Kubernetes集群联邦？</h2><p>Kubernetes集群联邦可以将多个Kubernetes集群作为一个集群进行管理。因此，可以在一个数据中心/云中创建多个Kubernetes集群，并使用集群联邦在一个地方控制/管理所有集群。</p>
<h2 id="简述Helm及其优势？">1.68. 简述Helm及其优势？</h2><p>Helm 是 Kubernetes 的软件包管理工具。类似 Ubuntu 中使用的apt、Centos中使用的yum 或者Python中的 pip 一样。</p>
<p>Helm能够将一组K8S资源打包统一管理, 是查找、共享和使用为Kubernetes构建的软件的最佳方式。</p>
<p>Helm中通常每个包称为一个Chart，一个Chart是一个目录（一般情况下会将目录进行打包压缩，形成name-version.tgz格式的单一文件，方便传输和存储）。</p>
<ul>
<li>Helm优势</li>
</ul>
<p>在 Kubernetes中部署一个可以使用的应用，需要涉及到很多的 Kubernetes 资源的共同协作。使用helm则具有如下优势：</p>
<ul>
<li><p>统一管理、配置和更新这些分散的 k8s 的应用资源文件；</p>
</li>
<li><p>分发和复用一套应用模板；</p>
</li>
<li><p>将应用的一系列资源当做一个软件包管理。</p>
</li>
<li><p>对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。对于使用者而言，使用 Helm 后不用需要编写复杂的应用部署文件，可以以简单的方式在 Kubernetes 上查找、安装、升级、回滚、卸载应用程序。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>helm命令大全</title>
    <url>/p/60919.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="helm命令大全">1. helm命令大全</h1><blockquote>
<p>官网：<a href="https://helm.sh/">https://helm.sh/</a></p>
</blockquote>
<p>Helm是Kubernetes的包管理器。</p>
<h2 id="helm环境变量">1.1. helm环境变量</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$HELM_CACHE_HOME</td>
<td>设置一个存储缓存文件的可选位置</td>
</tr>
<tr>
<td>$HELM_CONFIG_HOME</td>
<td>设置一个存储Helm配置的可选位置</td>
</tr>
<tr>
<td>$HELM_DATA_HOME</td>
<td>设置一个存储Helm数据的可选位置</td>
</tr>
<tr>
<td>$HELM_DEBUG</td>
<td>表示Helm是否在Debug模式系运行</td>
</tr>
<tr>
<td>$HELM_DRIVER</td>
<td>设置后台存储驱动，值包括：configmap, secret, memory, postgres</td>
</tr>
<tr>
<td>$HELM_DRIVER_SQL_CONNECTION_STRING</td>
<td>设置SQL存储驱动使用连接字符串</td>
</tr>
<tr>
<td>$HELM_MAX_HISTORY</td>
<td>设置发布历史记录的最大值</td>
</tr>
<tr>
<td>$HELM_NAMESPACE</td>
<td>设置用于helm操作的命名空间</td>
</tr>
<tr>
<td>$HELM_NO_PLUGINS</td>
<td>禁用插件，HELM_NO_PLUGINS=1 表示禁用插件</td>
</tr>
<tr>
<td>$HELM_PLUGINS</td>
<td>设置插件目录路径</td>
</tr>
<tr>
<td>$HELM_REGISTRY_CONFIG</td>
<td>设置注册配置文件的路径</td>
</tr>
<tr>
<td>$HELM_REPOSITORY_CACHE</td>
<td>设置仓库缓存目录路径</td>
</tr>
<tr>
<td>$HELM_REPOSITORY_CONFIG</td>
<td>设置仓库文件的路径</td>
</tr>
<tr>
<td>$KUBECONFIG</td>
<td>设置Kubernetes的可选配置文件(默认是”~/.kube/config”)</td>
</tr>
<tr>
<td>$HELM_KUBEAPISERVER</td>
<td>设置用于身份认证的Kubernetes API服务端</td>
</tr>
<tr>
<td>$HELM_KUBECAFILE</td>
<td>设置Kubernetes证书机构文件</td>
</tr>
<tr>
<td>$HELM_KUBEASGROUPS</td>
<td>使用逗号分隔的列表设置用于模拟的组</td>
</tr>
<tr>
<td>$HELM_KUBEASUSER</td>
<td>为操作设置要模拟的用户名</td>
</tr>
<tr>
<td>$HELM_KUBECONTEXT</td>
<td>设置kubeconfig上下文的名称</td>
</tr>
<tr>
<td>$HELM_KUBETOKEN</td>
<td>设置用于身份验证的不记名KubeToken</td>
</tr>
</tbody></table>
<h3 id="helm缓存顺序">1.1.1. helm缓存顺序</h3><p>Helm 基于以下配置顺序存储缓存，配置和添加数据：</p>
<ul>
<li>如果设置了 HELM_*_HOME 环境变量，则使用该变量</li>
<li>否则，在支持XDG基本目录规范的系统上，会使用XDG变量</li>
<li>当没有设置其他位置时，将根据操作系统使用默认位置</li>
</ul>
<h3 id="helm默认目录">1.1.2. helm默认目录</h3><p>默认情况下，默认目录取决于操作系统，默认值如下：</p>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>缓存路径</th>
<th>配置路径</th>
<th>数据路径</th>
</tr>
</thead>
<tbody><tr>
<td>Linux</td>
<td>$HOME/.cache/helm</td>
<td>$HOME/.config/helm</td>
<td>$HOME/.local/share/helm</td>
</tr>
<tr>
<td>macOS</td>
<td>$HOME/Library/Caches/helm</td>
<td>$HOME/Library/Preferences/helm</td>
<td>$HOME/Library/helm</td>
</tr>
<tr>
<td>Windows</td>
<td>%TEMP%\helm</td>
<td>%APPDATA%\helm</td>
<td>%APPDATA%\helm</td>
</tr>
</tbody></table>
<h3 id="可选项">1.1.3. 可选项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">-h, --help                        help for helm</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="helm仓库">1.2. helm仓库</h2><h3 id="helm-repo">1.2.1. helm repo</h3><p>添加、列出、删除、更新和索引chart仓库</p>
<h3 id="简介">1.2.2. 简介</h3><p>该命令由于chart仓库交互的多条子命令组成</p>
<p>可以用来添加、删除、列举和索引chart仓库</p>
<h3 id="可选项-1">1.2.3. 可选项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h, --help   help for repo</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令">1.2.4. 从父命令继承的命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="helm仓库列表">1.3. helm仓库列表</h2><h3 id="helm-repo-list">1.3.1. helm repo list</h3><p>列举chart仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo list [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-2">1.3.2. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help            help for list</span><br><span class="line">-o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-1">1.3.3. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-仓库更新">1.4. Helm 仓库更新</h2><h3 id="helm-repo-update">1.4.1. helm repo update</h3><p>从chart仓库中更新本地可用chart的信息</p>
<h3 id="简介-1">1.4.2. 简介</h3><p>更新从各自chart仓库中获取的有关chart的最新信息。信息会缓存在本地，被诸如’helm search’等命令使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo update [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-3">1.4.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for update</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-2">1.4.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-仓库索引">1.5. Helm 仓库索引</h2><h3 id="helm-repo-index">1.5.1. helm repo index</h3><p>基于包含打包chart的目录，生成索引文件</p>
<h3 id="简介-2">1.5.2. 简介</h3><p>读取当前目录，并根据找到的 chart 生成索引文件。</p>
<p>这个工具用来为chart仓库创建一个’index.yaml’文件，使用’–url’参数创建一个chart的绝对URL。</p>
<p>要合并生成的索引和已经存在的索引文件时，使用’–merge’参数。在这个场景中，在当前目录中找到的chart会合并到已有索引中， 本地chart的优先级高于已有chart。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo index [DIR] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-4">1.5.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help           help for index</span><br><span class="line">    --merge string   merge the generated index into the given index</span><br><span class="line">    --url string     url of chart repository</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-3">1.5.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-依赖">1.6. Helm 依赖</h2><h3 id="helm-dependency">1.6.1. helm dependency</h3><p>管理chart依赖</p>
<h3 id="简介-3">1.6.2. 简介</h3><p>管理chart依赖</p>
<p>Helm chart将依赖存储在’charts/‘。对于chart开发者，管理依赖比声明了所有依赖的’Chart.yaml’文件更容易。</p>
<p>依赖命令对该文件进行操作，使得存储在’charts/‘目录的需要的依赖和实际依赖之间同步变得很容易。</p>
<p>比如Chart.yaml声明了两个依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Chart.yaml</span></span><br><span class="line">dependencies:</span><br><span class="line">- name: nginx</span><br><span class="line">    version: &quot;1.2.3&quot;</span><br><span class="line">    repository: &quot;https://example.com/charts&quot;</span><br><span class="line">- name: memcached</span><br><span class="line">    version: &quot;3.2.1&quot;</span><br><span class="line">    repository: &quot;https://another.example.com/charts&quot;</span><br></pre></td></tr></table></figure>

<p>‘name’是chart名称，必须匹配’Chart.yaml’文件中名称。</p>
<p>‘version’字段应该包含一个语义化的版本或版本范围。</p>
<p>‘repository’的URL应该指向Chart仓库。Helm希望通过附加’/index.yaml’到URL，应该能检索chart库索引。 注意：’repository’不能是别名。别名必须以’alias:’或‘@’开头。</p>
<p>从2.2.0开始，仓库可以被定义为本地存储的依赖chart的目录路径。路径应该以”file://“前缀开头，比如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Chart.yaml</span></span><br><span class="line">dependencies:</span><br><span class="line">- name: nginx</span><br><span class="line">    version: &quot;1.2.3&quot;</span><br><span class="line">    repository: &quot;file://../dependency_chart/nginx&quot;</span><br></pre></td></tr></table></figure>

<p>如果在本地检索依赖chart，不需要使用”helm add repo”将仓库加入到helm。该示例中也支持版本匹配》。</p>
<h3 id="可选项-5">1.6.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for dependency</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-4">1.6.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-依赖列表">1.7. Helm 依赖列表</h2><h3 id="helm-dependency-list">1.7.1. helm dependency list</h3><p>列举指定chart的依赖</p>
<h3 id="简介-4">1.7.2. 简介</h3><p>列举所有的chart中声明的依赖</p>
<p>该命令可以将chart包或chart目录作为输入，不会修改chart的内容。</p>
<p>如果chart不能加载会产生错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm dependency list CHART [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-6">1.7.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for list</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-5">1.7.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-列表">1.8. Helm 列表</h2><h3 id="helm-list">1.8.1. helm list</h3><p>列举发布版本</p>
<h3 id="简介-5">1.8.2. 简介</h3><p>该命令会列举出指定命名空间的所有发布版本，(如果没有指定命名空间，会使用当前命名空间)。</p>
<p>默认情况下，只会列举出部署的或者失败的发布，像’–uninstalled’或者’–all’会修改默认行为。这些参数可以组合使用：’–uninstalled –failed’。</p>
<p>默认情况下，列表按字母排序。使用’-d’参数按照日期排序。</p>
<p>如果使用–filter参数，会作为一个过滤器。过滤器是应用于发布列表的正则表达式(兼容Perl)。只有过滤器匹配的才会返回。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm list --filter <span class="string">&#x27;ara[a-z]+&#x27;</span></span></span><br><span class="line">NAME                UPDATED                                  CHART</span><br><span class="line">maudlin-arachnid    2020-06-18 14:17:46.125134977 +0000 UTC  alpine-0.1.0</span><br></pre></td></tr></table></figure>

<p>如果未找到结果，’helm list’会退出，但是没有输出(或者使用’-q’，只返回头部）。</p>
<p>默认情况下，最多返回256项，使用’–max’限制数量，’–max’设置为0不会返回所有结果，而是返回服务器默认值，可能要比256更多。 同时使用’–max’和’–offset’参数可以翻页显示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm list [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-7">1.8.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all                  show all releases without any filter applied</span><br><span class="line">-A, --all-namespaces       list releases across all namespaces</span><br><span class="line">-d, --date                 sort by release date</span><br><span class="line">    --deployed             show deployed releases. If no other is specified, this will be automatically enabled</span><br><span class="line">    --failed               show failed releases</span><br><span class="line">-f, --filter string        a regular expression (Perl compatible). Any releases that match the expression will be included in the results</span><br><span class="line">-h, --help                 help for list</span><br><span class="line">-m, --max int              maximum number of releases to fetch (default 256)</span><br><span class="line">    --offset int           next release index in the list, used to offset from start value</span><br><span class="line">-o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br><span class="line">    --pending              show pending releases</span><br><span class="line">-r, --reverse              reverse the sort order</span><br><span class="line">-l, --selector string      Selector (label query) to filter on, supports &#x27;=&#x27;, &#x27;==&#x27;, and &#x27;!=&#x27;.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.</span><br><span class="line">-q, --short                output short (quiet) listing format</span><br><span class="line">    --superseded           show superseded releases</span><br><span class="line">    --time-format string   format time using golang time formatter. Example: --time-format &quot;2006-01-02 15:04:05Z0700&quot;</span><br><span class="line">    --uninstalled          show uninstalled releases (if &#x27;helm uninstall --keep-history&#x27; was used)</span><br><span class="line">    --uninstalling         show releases that are currently being uninstalled</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-6">1.8.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-删除仓库">1.9. Helm 删除仓库</h2><h3 id="helm-repo-remove">1.9.1. helm repo remove</h3><p>删除一个或多个仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo remove [REPO1 [REPO2 ...]] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-8">1.9.2. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for remove</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-7">1.9.3. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-包">1.10. Helm 包</h2><h3 id="helm-package">1.10.1. helm package</h3><p>将chart目录打包到chart归档中</p>
<h3 id="简介-6">1.10.2. 简介</h3><p>该命令将chart打包成一个chart版本包文件。如果给定路径，就会在该路径中查找chart（必须包含Chart.yaml文件）然后将目录打包。</p>
<p>chart版本包会用于Helm包仓库。</p>
<p>要签名一个chart，使用’–sign’参数，在大多数场景中，也要提供’–keyring path/to/secret/keys’和’–key keyname’。</p>
<p>$ helm package –sign ./mychart –key mykey –keyring ~/.gnupg/secring.gpg</p>
<p>如果’–keyring’未指定，除非配置了其他方式，不然Helm通常会指定公共秘钥环。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm package [CHART_PATH] [...] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-9">1.10.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --app-version string       set the appVersion on the chart to this version</span><br><span class="line">-u, --dependency-update        update dependencies from &quot;Chart.yaml&quot; to dir &quot;charts/&quot; before packaging</span><br><span class="line">-d, --destination string       location to write the chart. (default &quot;.&quot;)</span><br><span class="line">-h, --help                     help for package</span><br><span class="line">    --key string               name of the key to use when signing. Used if --sign is true</span><br><span class="line">    --keyring string           location of a public keyring (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --passphrase-file string   location of a file which contains the passphrase for the signing key. Use &quot;-&quot; in order to read from stdin.</span><br><span class="line">    --sign                     use a PGP private key to sign this package</span><br><span class="line">    --version string           set the version on the chart to this semver version</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-8">1.10.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-升级">1.11. Helm 升级</h2><h3 id="helm-upgrade">1.11.1. helm upgrade</h3><p>升级版本</p>
<h3 id="简介-7">1.11.2. 简介</h3><p>该命令将发布升级到新版的chart。</p>
<p>升级参数必须是发布和chart。chart参数可以是：chart引用(‘example/mariadb’)，chart目录路径，打包的chart或者完整URL。 对于chart引用，除非使用’–version’参数指定，否则会使用最新版本。</p>
<p>要在chart中重写value，需要使用’–values’参数并传一个文件或者从命令行使用’–set’参数传个配置， 要强制字符串值，使用’–set-string’。在值很大而不想使用’–values’和’–set’的场景中，使用’–set-file’从文件中读取单个的大值。</p>
<p>可以多次指定’–values’/‘-f’参数，最后（最右边）指定的文件优先级最高。比如如果myvalues.yaml和override.yaml同时包含了名为 ‘Test’的key，override.yaml中的设置会优先使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm upgrade -f myvalues.yaml -f override.yaml redis ./redis</span></span><br></pre></td></tr></table></figure>

<p>可以多次指定’–set’参数，最后（最右边）指定的优先级最高。比如’bar’ 和 ‘newbar’都设置了一个名为’foo’的可以， ‘newbar’的值会优先使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    $ helm upgrade --set foo=bar --set foo=newbar redis ./redis</span><br><span class="line">helm upgrade [RELEASE] [CHART] [flags]</span><br></pre></td></tr></table></figure>

<p>组合使用 ‘–debug’ 和 ‘–dry-run’ 可以在不升级chart的情况下检查生成的清单。</p>
<p><strong>注意</strong>: 在<code>crds/</code>目录中的CRD清单不能用 <code>--dry-run</code> 验证。查看 <a href="https://helm.sh/zh/docs/chart_best_practices/custom_resource_definitions#some-caveats-and-explanations">Helm’s CRDs caveats</a> 获取更多信息。</p>
<h3 id="可选项-10">1.11.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --atomic                       if set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used</span><br><span class="line">    --ca-file string               verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string             identify HTTPS client using this SSL certificate file</span><br><span class="line">    --cleanup-on-fail              allow deletion of new resources created in this upgrade when upgrade fails</span><br><span class="line">    --create-namespace             if --install is set, create the release namespace if not present</span><br><span class="line">    --description string           add a custom description</span><br><span class="line">    --devel                        use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">    --disable-openapi-validation   if set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema</span><br><span class="line">    --dry-run                      simulate an upgrade</span><br><span class="line">    --force                        force resource updates through a replacement strategy</span><br><span class="line">-h, --help                         help for upgrade</span><br><span class="line">    --history-max int              limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)</span><br><span class="line">    --insecure-skip-tls-verify     skip tls certificate checks for the chart download</span><br><span class="line">-i, --install                      if a release by this name doesn&#x27;t already exist, run an install</span><br><span class="line">    --key-file string              identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string               location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --no-hooks                     disable pre/post upgrade hooks</span><br><span class="line">-o, --output format                prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br><span class="line">    --pass-credentials             pass credentials to all domains</span><br><span class="line">    --password string              chart repository password where to locate the requested chart</span><br><span class="line">    --post-renderer postrenderer   the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path (default exec)</span><br><span class="line">    --render-subchart-notes        if set, render subchart notes along with the parent</span><br><span class="line">    --repo string                  chart repository url where to locate the requested chart</span><br><span class="line">    --reset-values                 when upgrading, reset the values to the ones built into the chart</span><br><span class="line">    --reuse-values                 when upgrading, reuse the last release&#x27;s values and merge in any overrides from the command line via --set and -f. If &#x27;--reset-values&#x27; is specified, this is ignored</span><br><span class="line">    --set stringArray              set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --set-file stringArray         set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)</span><br><span class="line">    --set-string stringArray       set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --skip-crds                    if set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled</span><br><span class="line">    --timeout duration             time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)</span><br><span class="line">    --username string              chart repository username where to locate the requested chart</span><br><span class="line">-f, --values strings               specify values in a YAML file or a URL (can specify multiple)</span><br><span class="line">    --verify                       verify the package before using it</span><br><span class="line">    --version string               specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br><span class="line">    --wait                         if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout</span><br><span class="line">    --wait-for-jobs                if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-9">1.11.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-卸载">1.12. Helm 卸载</h2><h3 id="helm-uninstall">1.12.1. helm uninstall</h3><p>卸载版本</p>
<h3 id="简介-8">1.12.2. 简介</h3><p>该命令使用版本名称卸载版本</p>
<p>会删除与最新版本chart相关的所有资源以及发布历史，释放以供将来使用</p>
<p>使用’–dry-run’参数查看哪些版本将在不实际卸载的情况下能够被卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm uninstall RELEASE_NAME [...] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-11">1.12.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --description string   add a custom description</span><br><span class="line">    --dry-run              simulate a uninstall</span><br><span class="line">-h, --help                 help for uninstall</span><br><span class="line">    --keep-history         remove all associated resources and mark the release as deleted, but retain the release history</span><br><span class="line">    --no-hooks             prevent hooks from running during uninstallation</span><br><span class="line">    --timeout duration     time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-10">1.12.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-历史">1.13. Helm 历史</h2><h3 id="helm-history">1.13.1. helm history</h3><p>检索发布历史</p>
<h3 id="简介-9">1.13.2. 简介</h3><p>打印给定版本的历史修订。</p>
<p>默认会返回最大的256个历史版本。设置’–max’配置返回历史列表的最大长度。</p>
<p>历史发布集合会被打印成格式化的表格，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm <span class="built_in">history</span> angry-bird</span></span><br><span class="line">REVISION    UPDATED                     STATUS          CHART             APP VERSION     DESCRIPTION</span><br><span class="line">1           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Initial install</span><br><span class="line">2           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Upgraded successfully</span><br><span class="line">3           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Rolled back to 2</span><br><span class="line">4           Mon Oct 3 10:15:13 2016     deployed        alpine-0.1.0      1.0             Upgraded successfully</span><br><span class="line">helm history RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-12">1.13.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help            help for history</span><br><span class="line">    --max int         maximum number of revision to include in history (default 256)</span><br><span class="line">-o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-11">1.13.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-变量">1.14. Helm 变量</h2><h3 id="helm-env">1.14.1. helm env</h3><p>helm 客户端环境信息</p>
<h3 id="简介-10">1.14.2. 简介</h3><p>Env 打印所有Helm使用的环境信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm env [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-13">1.14.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for env</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-12">1.14.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-回滚">1.15. Helm 回滚</h2><h3 id="helm-rollback">1.15.1. helm rollback</h3><p>回滚发布到上一个版本</p>
<h3 id="简介-11">1.15.2. 简介</h3><p>该命令回滚发布到上一个版本</p>
<p>回滚命令的第一个参数是发布的名称，第二是修订（版本）号，如果省略此参数，会回滚到上一个版本。</p>
<p>要查看修订号，执行’helm history RELEASE’。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm rollback &lt;RELEASE&gt; [REVISION] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-14">1.15.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --cleanup-on-fail    allow deletion of new resources created in this rollback when rollback fails</span><br><span class="line">    --dry-run            simulate a rollback</span><br><span class="line">    --force              force resource update through delete/recreate if needed</span><br><span class="line">-h, --help               help for rollback</span><br><span class="line">    --history-max int    limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)</span><br><span class="line">    --no-hooks           prevent hooks from running during rollback</span><br><span class="line">    --recreate-pods      performs pods restart for the resource if applicable</span><br><span class="line">    --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)</span><br><span class="line">    --wait               if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout</span><br><span class="line">    --wait-for-jobs      if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-13">1.15.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-安装">1.16. Helm 安装</h2><h3 id="helm-install">1.16.1. helm install</h3><p>安装chart</p>
<h3 id="简介-12">1.16.2. 简介</h3><p>该命令用于安装chart包。</p>
<p>安装参数必须是chart的引用，一个打包后的chart路径，未打包的chart目录或者是一个URL。</p>
<p>要重写chart中的值，使用’–values’参数传递一个文件或者使用’–set’参数在命令行传递配置，强制使用字符串要用’–set-string’。 示例中要是值太大，则您既不想用’–values’也不想用’–set’，使用’–set-file’从文件中读取单个较大的值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install -f myvalues.yaml myredis ./redis</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install --<span class="built_in">set</span> name=prod myredis ./redis</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install --set-string long_int=1234567890 myredis ./redis</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install --set-file my_script=dothings.sh myredis ./redis</span></span><br></pre></td></tr></table></figure>

<p>你可以多次指定’–values’/‘-f’参数。最右侧指定的文件优先级最高。比如，如果两个文件myvalues.yaml和override.yaml 都包含名为’Test’的可以，override.yaml中的值优先：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install -f myvalues.yaml -f override.yaml  myredis ./redis</span></span><br></pre></td></tr></table></figure>

<p>可以指定’–set’参数多次，最右边的参数优先级最高，比如，’bar’和’newbar’都设置了一个名为’foo’的可以，’newbar’的值优先：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> helm install --<span class="built_in">set</span> foo=bar --<span class="built_in">set</span> foo=newbar  myredis ./redis</span></span><br></pre></td></tr></table></figure>

<p>为了检测生成的清单，但并不安装到chart，可以将’–debug’和’–dry-run’组合使用。</p>
<p><strong>注意</strong>: 在<code>crds/</code>目录中的CRD清单不能用 <code>--dry-run</code> 验证。查看 <a href="https://helm.sh/zh/docs/chart_best_practices/custom_resource_definitions#some-caveats-and-explanations">Helm’s CRDs caveats</a> 获取更多信息。</p>
<p>如果设置了–verify，chart<strong>必须</strong>有出处文件，且出处文件<strong>必须</strong>传递所有的验证步骤。</p>
<p>有五种不同的方式来标识需要安装的chart：</p>
<ol>
<li>通过chart引用： helm install mymaria example/mariadb</li>
<li>通过chart包： helm install mynginx ./nginx-1.2.3.tgz</li>
<li>通过未打包chart目录的路径： helm install mynginx ./nginx</li>
<li>通过URL绝对路径： helm install mynginx <a href="https://example.com/charts/nginx-1.2.3.tgz">https://example.com/charts/nginx-1.2.3.tgz</a></li>
<li>通过chart引用和仓库url： helm install –repo <a href="https://example.com/charts/">https://example.com/charts/</a> mynginx nginx</li>
</ol>
<p>CHART引用</p>
<p>chart引用是在chart仓库中引用chart的一种方便方式。</p>
<p>当你用仓库前缀(‘example/mariadb’)引用chart时，Helm会在本地配置查找名为 ‘example’ 的chart仓库， 然后会在仓库中查找名为’mariadb’的仓库，然后会安装这个chart最新的稳定版本，除非指定了’–devel’参数且包含了开发版本(alpha， beta，和候选版本)，或者使用’–version’参数提供一个版本号。</p>
<p>要查看仓库列表，使用’helm repo list’。要在仓库中搜索chart，使用’helm search’。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm install [NAME] [CHART] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-15">1.16.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --atomic                       if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used</span><br><span class="line">    --ca-file string               verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string             identify HTTPS client using this SSL certificate file</span><br><span class="line">    --create-namespace             create the release namespace if not present</span><br><span class="line">    --dependency-update            run helm dependency update before installing the chart</span><br><span class="line">    --description string           add a custom description</span><br><span class="line">    --devel                        use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">    --disable-openapi-validation   if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema</span><br><span class="line">    --dry-run                      simulate an install</span><br><span class="line">-g, --generate-name                generate the name (and omit the NAME parameter)</span><br><span class="line">-h, --help                         help for install</span><br><span class="line">    --insecure-skip-tls-verify     skip tls certificate checks for the chart download</span><br><span class="line">    --key-file string              identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string               location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --name-template string         specify template used to name the release</span><br><span class="line">    --no-hooks                     prevent hooks from running during install</span><br><span class="line">-o, --output format                prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br><span class="line">    --pass-credentials             pass credentials to all domains</span><br><span class="line">    --password string              chart repository password where to locate the requested chart</span><br><span class="line">    --post-renderer postrenderer   the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path (default exec)</span><br><span class="line">    --render-subchart-notes        if set, render subchart notes along with the parent</span><br><span class="line">    --replace                      re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production</span><br><span class="line">    --repo string                  chart repository url where to locate the requested chart</span><br><span class="line">    --set stringArray              set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --set-file stringArray         set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)</span><br><span class="line">    --set-string stringArray       set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --skip-crds                    if set, no CRDs will be installed. By default, CRDs are installed if not already present</span><br><span class="line">    --timeout duration             time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)</span><br><span class="line">    --username string              chart repository username where to locate the requested chart</span><br><span class="line">-f, --values strings               specify values in a YAML file or a URL (can specify multiple)</span><br><span class="line">    --verify                       verify the package before using it</span><br><span class="line">    --version string               specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br><span class="line">    --wait                         if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-14">1.16.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-展示">1.17. Helm 展示</h2><h3 id="helm-show">1.17.1. helm show</h3><p>显示chart信息</p>
<h3 id="简介-13">1.17.2. 简介</h3><p>该命令由多条子命令组成来显示chart的信息</p>
<h3 id="可选项-16">1.17.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for show</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-15">1.17.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-展示chart">1.18. Helm 展示chart</h2><h3 id="helm-show-chart">1.18.1. helm show chart</h3><p>显示chart定义</p>
<h3 id="简介-14">1.18.2. 简介</h3><p>该命令检查chart(目录、文件或URL)并显示Charts.yaml文件的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm show chart [CHART] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-17">1.18.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string           identify HTTPS client using this SSL certificate file</span><br><span class="line">    --devel                      use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">-h, --help                       help for chart</span><br><span class="line">    --insecure-skip-tls-verify   skip tls certificate checks for the chart download</span><br><span class="line">    --key-file string            identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string             location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --pass-credentials           pass credentials to all domains</span><br><span class="line">    --password string            chart repository password where to locate the requested chart</span><br><span class="line">    --repo string                chart repository url where to locate the requested chart</span><br><span class="line">    --username string            chart repository username where to locate the requested chart</span><br><span class="line">    --verify                     verify the package before using it</span><br><span class="line">    --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-16">1.18.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-展示readme">1.19. Helm 展示readme</h2><h3 id="helm-show-readme">1.19.1. helm show readme</h3><p>显示chart的README</p>
<h3 id="简介-15">1.19.2. 简介</h3><p>该命令检查chart(目录、文件或URL)并显示README文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm show readme [CHART] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-18">1.19.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string           identify HTTPS client using this SSL certificate file</span><br><span class="line">    --devel                      use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">-h, --help                       help for readme</span><br><span class="line">    --insecure-skip-tls-verify   skip tls certificate checks for the chart download</span><br><span class="line">    --key-file string            identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string             location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --pass-credentials           pass credentials to all domains</span><br><span class="line">    --password string            chart repository password where to locate the requested chart</span><br><span class="line">    --repo string                chart repository url where to locate the requested chart</span><br><span class="line">    --username string            chart repository username where to locate the requested chart</span><br><span class="line">    --verify                     verify the package before using it</span><br><span class="line">    --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-17">1.19.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-展示value">1.20. Helm 展示value</h2><h3 id="helm-show-values">1.20.1. helm show values</h3><p>显示chart的values</p>
<h3 id="简介-16">1.20.2. 简介</h3><p>该命令检查chart(目录、文件或URL)并显示values.yaml文件的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm show values [CHART] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-19">1.20.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string           identify HTTPS client using this SSL certificate file</span><br><span class="line">    --devel                      use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">-h, --help                       help for values</span><br><span class="line">    --insecure-skip-tls-verify   skip tls certificate checks for the chart download</span><br><span class="line">    --jsonpath string            supply a JSONPath expression to filter the output</span><br><span class="line">    --key-file string            identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string             location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --pass-credentials           pass credentials to all domains</span><br><span class="line">    --password string            chart repository password where to locate the requested chart</span><br><span class="line">    --repo string                chart repository url where to locate the requested chart</span><br><span class="line">    --username string            chart repository username where to locate the requested chart</span><br><span class="line">    --verify                     verify the package before using it</span><br><span class="line">    --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-18">1.20.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-展示所有">1.21. Helm 展示所有</h2><h3 id="helm-show-all">1.21.1. helm show all</h3><p>显示chart的所有信息</p>
<h3 id="简介-17">1.21.2. 简介</h3><p>该命令检查chart(目录、文件或URL)并显示所有的内容（values.yaml, Charts.yaml, README）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm show all [CHART] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-20">1.21.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string           identify HTTPS client using this SSL certificate file</span><br><span class="line">    --devel                      use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">-h, --help                       help for all</span><br><span class="line">    --insecure-skip-tls-verify   skip tls certificate checks for the chart download</span><br><span class="line">    --key-file string            identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string             location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --pass-credentials           pass credentials to all domains</span><br><span class="line">    --password string            chart repository password where to locate the requested chart</span><br><span class="line">    --repo string                chart repository url where to locate the requested chart</span><br><span class="line">    --username string            chart repository username where to locate the requested chart</span><br><span class="line">    --verify                     verify the package before using it</span><br><span class="line">    --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-19">1.21.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-拉取">1.22. Helm 拉取</h2><h3 id="helm-pull">1.22.1. helm pull</h3><p>从仓库下载并（可选）在本地目录解压</p>
<h3 id="简介-18">1.22.2. 简介</h3><p>从包仓库中检索包并下载到本地。</p>
<p>对于要获取检查，修改或重新打包的包很有用，还可以用于在不安装chart的情况下对chart进行加密验证。</p>
<p>下载chart之后有解压的选项，会为chart创建一个目录并解压到这个目录中。</p>
<p>如果指定了–verify参数，请求的chart必须有出处文件，且必须通过验证。任意部分的失败都会导致错误，且chart不会在本地保存。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm pull [chart URL | repo/chartname] [...] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-21">1.22.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string           identify HTTPS client using this SSL certificate file</span><br><span class="line">-d, --destination string         location to write the chart. If this and tardir are specified, tardir is appended to this (default &quot;.&quot;)</span><br><span class="line">    --devel                      use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored.</span><br><span class="line">-h, --help                       help for pull</span><br><span class="line">    --insecure-skip-tls-verify   skip tls certificate checks for the chart download</span><br><span class="line">    --key-file string            identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string             location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --pass-credentials           pass credentials to all domains</span><br><span class="line">    --password string            chart repository password where to locate the requested chart</span><br><span class="line">    --prov                       fetch the provenance file, but don&#x27;t perform verification</span><br><span class="line">    --repo string                chart repository url where to locate the requested chart</span><br><span class="line">    --untar                      if set to true, will untar the chart after downloading it</span><br><span class="line">    --untardir string            if untar is specified, this flag specifies the name of the directory into which the chart is expanded (default &quot;.&quot;)</span><br><span class="line">    --username string            chart repository username where to locate the requested chart</span><br><span class="line">    --verify                     verify the package before using it</span><br><span class="line">    --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-20">1.22.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-插件">1.23. Helm 插件</h2><h3 id="helm-plugin">1.23.1. helm plugin</h3><p>安装、列举或卸载Helm插件</p>
<h3 id="简介-19">1.23.2. 简介</h3><p>管理客户端插件。</p>
<h3 id="可选项-22">1.23.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for plugin</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-21">1.23.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-插件列表">1.24. Helm 插件列表</h2><h3 id="helm-plugin-list">1.24.1. helm plugin list</h3><p>列举已安装的Helm插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm plugin list [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-23">1.24.2. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for list</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-22">1.24.3. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-插件升级">1.25. Helm 插件升级</h2><h3 id="helm-plugin-update">1.25.1. helm plugin update</h3><p>升级一个或多个Helm插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm plugin update &lt;plugin&gt;... [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-24">1.25.2. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for update</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-23">1.25.3. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-插件卸载">1.26. Helm 插件卸载</h2><h3 id="helm-plugin-uninstall">1.26.1. helm plugin uninstall</h3><p>卸载一个或多个Helm插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm plugin uninstall &lt;plugin&gt;... [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-25">1.26.2. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for uninstall</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-24">1.26.3. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-插件安装">1.27. Helm 插件安装</h2><h3 id="helm-plugin-install">1.27.1. helm plugin install</h3><p>安装一个或多个Helm插件</p>
<h3 id="简介-20">1.27.2. 简介</h3><p>该命令允许您通过VCS仓库url或者本地路径安装插件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm plugin install [options] &lt;path|url&gt;... [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-26">1.27.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help             help for install</span><br><span class="line">    --version string   specify a version constraint. If this is not specified, the latest version is installed</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-25">1.27.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-搜索">1.28. Helm 搜索</h2><h3 id="helm-search">1.28.1. helm search</h3><p>helm中搜索关键字</p>
<h3 id="简介-21">1.28.2. 简介</h3><p>搜索提供了可以在已经添加的Artifact Hub和仓库等多个位置搜索Helm chart 的能力。</p>
<h3 id="可选项-27">1.28.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for search</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-26">1.28.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-搜索hub">1.29. Helm 搜索hub</h2><h3 id="helm-search-hub">1.29.1. helm search hub</h3><p>在Artifact Hub或自己的hub实例中搜索chart</p>
<h3 id="简介-22">1.29.2. 简介</h3><p>在Artifact Hub或自己的hub实例中搜索Helm charts。</p>
<p>Artifact Hub 是基于web页面的应用，支持CNCF项目的查找、安装和发布包及配置项，包括了公开发布的Helm chart。它是CNCF的沙盒项目。可以访问<a href="https://artifacthub.io/">https://artifacthub.io/</a></p>
<p>[KEYWORD] 参数接受关键字字符串或者带引号的查询字符串。查询字符串的文档，请查看 [<a href="https://artifacthub.github.io/hub/api/?urls.primaryName=Monocular%20compatible%20search%20API#/Monocular/get_api_chartsvc_v1_charts_search]">https://artifacthub.github.io/hub/api/?urls.primaryName=Monocular%20compatible%20search%20API#/Monocular/get_api_chartsvc_v1_charts_search]</a>(<a href="https://artifacthub.github.io/hub/api/?urls.primaryName=Monocular">https://artifacthub.github.io/hub/api/?urls.primaryName=Monocular</a> compatible search API#/Monocular/get_api_chartsvc_v1_charts_search)</p>
<p>之前的Helm版本使用Monocular实例作为默认的endpoint，因此为了向后兼容，Artifact Hub兼容Monocular的搜索API。类似地，要设置endpoint参数时，指定的endpoint也必须兼容Monocular的搜索API。 注意，指定Monocular实例作为endpoint时，不支持字符串查询。更多API细节，请参考 <a href="https://github.com/helm/monocular">https://github.com/helm/monocular</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm search hub [KEYWORD] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-28">1.29.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --endpoint string      Hub instance to query for charts (default &quot;https://hub.helm.sh&quot;)</span><br><span class="line">-h, --help                 help for hub</span><br><span class="line">    --max-col-width uint   maximum column width for output table (default 50)</span><br><span class="line">-o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-27">1.29.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-搜索仓库">1.30. Helm 搜索仓库</h2><h3 id="helm-search-repo">1.30.1. helm search repo</h3><p>用chart中关键字搜索仓库</p>
<h3 id="简介-23">1.30.2. 简介</h3><p>搜索会读取系统上配置的所有仓库，并查找匹配。搜索这些仓库会使用存储在系统中的元数据。</p>
<p>它会展示找到最新稳定版本的chart。如果指定了–devel参数，输出会包括预发布版本。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Search <span class="keyword">for</span> stable release versions matching the keyword <span class="string">&quot;nginx&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> helm search repo nginx</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Search <span class="keyword">for</span> release versions matching the keyword <span class="string">&quot;nginx&quot;</span>, including pre-release versions</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> helm search repo nginx --devel</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Search <span class="keyword">for</span> the latest stable release <span class="keyword">for</span> nginx-ingress with a major version of 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> helm search repo nginx-ingress --version ^1.0.0</span></span><br></pre></td></tr></table></figure>

<p>仓库使用’helm repo’命令管理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm search repo [keyword] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-29">1.30.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --devel                use development versions (alpha, beta, and release candidate releases), too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">-h, --help                 help for repo</span><br><span class="line">    --max-col-width uint   maximum column width for output table (default 50)</span><br><span class="line">-o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br><span class="line">-r, --regexp               use regular expressions for searching repositories you have added</span><br><span class="line">    --version string       search using semantic versioning constraints on repositories you have added</span><br><span class="line">-l, --versions             show the long listing, with each version of each chart on its own line, for repositories you have added</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-28">1.30.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-模板">1.31. Helm 模板</h2><h3 id="helm-template">1.31.1. helm template</h3><p>本地渲染模板</p>
<h3 id="简介-24">1.31.2. 简介</h3><p>本地渲染模板并显示输出</p>
<p>通常在集群中查找或检索到的任何值都可以在本地伪造。另外，没有对chart有效性进行服务端测试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm template [NAME] [CHART] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-30">1.31.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --api-versions stringArray     Kubernetes api versions used for Capabilities.APIVersions</span><br><span class="line">    --atomic                       if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used</span><br><span class="line">    --ca-file string               verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string             identify HTTPS client using this SSL certificate file</span><br><span class="line">    --create-namespace             create the release namespace if not present</span><br><span class="line">    --dependency-update            run helm dependency update before installing the chart</span><br><span class="line">    --description string           add a custom description</span><br><span class="line">    --devel                        use development versions, too. Equivalent to version &#x27;&gt;0.0.0-0&#x27;. If --version is set, this is ignored</span><br><span class="line">    --disable-openapi-validation   if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema</span><br><span class="line">    --dry-run                      simulate an install</span><br><span class="line">-g, --generate-name                generate the name (and omit the NAME parameter)</span><br><span class="line">-h, --help                         help for template</span><br><span class="line">    --include-crds                 include CRDs in the templated output</span><br><span class="line">    --insecure-skip-tls-verify     skip tls certificate checks for the chart download</span><br><span class="line">    --is-upgrade                   set .Release.IsUpgrade instead of .Release.IsInstall</span><br><span class="line">    --key-file string              identify HTTPS client using this SSL key file</span><br><span class="line">    --keyring string               location of public keys used for verification (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --kube-version string          Kubernetes version used for Capabilities.KubeVersion</span><br><span class="line">    --name-template string         specify template used to name the release</span><br><span class="line">    --no-hooks                     prevent hooks from running during install</span><br><span class="line">    --output-dir string            writes the executed templates to files in output-dir instead of stdout</span><br><span class="line">    --pass-credentials             pass credentials to all domains</span><br><span class="line">    --password string              chart repository password where to locate the requested chart</span><br><span class="line">    --post-renderer postrenderer   the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path (default exec)</span><br><span class="line">    --release-name                 use release name in the output-dir path.</span><br><span class="line">    --render-subchart-notes        if set, render subchart notes along with the parent</span><br><span class="line">    --replace                      re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production</span><br><span class="line">    --repo string                  chart repository url where to locate the requested chart</span><br><span class="line">    --set stringArray              set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --set-file stringArray         set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)</span><br><span class="line">    --set-string stringArray       set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">-s, --show-only stringArray        only show manifests rendered from the given templates</span><br><span class="line">    --skip-crds                    if set, no CRDs will be installed. By default, CRDs are installed if not already present</span><br><span class="line">    --skip-tests                   skip tests from templated output</span><br><span class="line">    --timeout duration             time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)</span><br><span class="line">    --username string              chart repository username where to locate the requested chart</span><br><span class="line">    --validate                     validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install</span><br><span class="line">-f, --values strings               specify values in a YAML file or a URL (can specify multiple)</span><br><span class="line">    --verify                       verify the package before using it</span><br><span class="line">    --version string               specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used</span><br><span class="line">    --wait                         if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout</span><br><span class="line">    --wait-for-jobs                if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-29">1.31.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-测试">1.32. Helm 测试</h2><h3 id="helm-test">1.32.1. helm test</h3><p>执行发布版本的测试</p>
<h3 id="简介-25">1.32.2. 简介</h3><p>测试命令执行发布版本的测试</p>
<p>该命令使用的参数是部署版本的名称，要运行的测试在已安装的chart中定义。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm test [RELEASE] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-31">1.32.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --filter strings     specify tests by attribute (currently &quot;name&quot;) using attribute=value syntax or &#x27;!attribute=value&#x27; to exclude a test (can specify multiple or separate values with commas: name=test1,name=test2)</span><br><span class="line">-h, --help               help for test</span><br><span class="line">    --logs               dump the logs from test pods (this runs after all tests are complete, but before any cleanup)</span><br><span class="line">    --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-30">1.32.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-添加仓库">1.33. Helm 添加仓库</h2><h3 id="helm-repo-add">1.33.1. helm repo add</h3><p>添加chart仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo add [NAME] [URL] [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-32">1.33.2. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --allow-deprecated-repos     by default, this command will not allow adding official repos that have been permanently deleted. This disables that behavior</span><br><span class="line">    --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle</span><br><span class="line">    --cert-file string           identify HTTPS client using this SSL certificate file</span><br><span class="line">    --force-update               replace (overwrite) the repo if it already exists</span><br><span class="line">-h, --help                       help for add</span><br><span class="line">    --insecure-skip-tls-verify   skip tls certificate checks for the repository</span><br><span class="line">    --key-file string            identify HTTPS client using this SSL key file</span><br><span class="line">    --no-update                  Ignored. Formerly, it would disabled forced updates. It is deprecated by force-update.</span><br><span class="line">    --pass-credentials           pass credentials to all domains</span><br><span class="line">    --password string            chart repository password</span><br><span class="line">    --username string            chart repository username</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-31">1.33.3. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-版本">1.34. Helm 版本</h2><h3 id="helm-version">1.34.1. helm version</h3><p>打印客户端版本信息</p>
<h3 id="简介-26">1.34.2. 简介</h3><p>显示Helm的版本。</p>
<p>该命令会打印Helm的版本描述，输出如下：</p>
<p>version.BuildInfo{Version:”v3.2.1”, GitCommit:”fe51cd1e31e6a202cba7dead9552a6d418ded79a”, GitTreeState:”clean”, GoVersion:”go1.13.10”}</p>
<ul>
<li>版本是发布的语义化版本。</li>
<li>GitCommit是用于生成此版本提交的SHA</li>
<li>如果构建二级制包是没有本地代码修改，GitTreeState就是”干净的”</li>
<li>GoVersion是用于编译Helm的Go版本</li>
</ul>
<p>当使用–template参数时，下列属性在模板中是可用的：</p>
<ul>
<li>.Version 包含了Helm的语义化版本</li>
<li>.GitCommit 是git的提交</li>
<li>.GitTreeState 是Helm构建时的git树结构</li>
<li>.GoVersion 包含Helm编译时使用的Go版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm version [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-33">1.34.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help              help for version</span><br><span class="line">    --short             print the version number</span><br><span class="line">    --template string   template for version string format</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-32">1.34.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-状态">1.35. Helm 状态</h2><h3 id="helm-status">1.35.1. helm status</h3><p>显示已命名发布的状态</p>
<h3 id="简介-27">1.35.2. 简介</h3><p>该命令显示已命名发布的状态，状态包括：</p>
<ul>
<li>最后部署时间</li>
<li>发布版本所在的k8s命名空间</li>
<li>发布状态(可以是： unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade 或 pending-rollback)</li>
<li>发布版本修订</li>
<li>发布版本描述(可以是完成信息或错误信息，需要用–show-desc启用)</li>
<li>列举版本包含的资源，按类型排序</li>
<li>最后一次测试套件运行的详细信息（如果使用）</li>
<li>chart提供的额外的注释</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm status RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-34">1.35.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help            help for status</span><br><span class="line">-o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br><span class="line">    --revision int    if set, display the status of the named release with revision</span><br><span class="line">    --show-desc       if set, display the description message of the named release</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-33">1.35.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-获取所有">1.36. Helm 获取所有</h2><h3 id="helm-get-all">1.36.1. helm get all</h3><p>下载命名版本的所有信息</p>
<h3 id="简介-28">1.36.2. 简介</h3><p>该命令打印一个具有可读性的信息集合，包括注释，钩子，提供的values，以及给定版本生成的清单文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm get all RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-35">1.36.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help              help for all</span><br><span class="line">    --revision int      get the named release with revision</span><br><span class="line">    --template string   go template for formatting the output, eg: &#123;&#123;.Release.Name&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-34">1.36.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-获取扩展">1.37. Helm 获取扩展</h2><h3 id="helm-get">1.37.1. helm get</h3><p>下载发布的扩展信息</p>
<h3 id="简介-29">1.37.2. 简介</h3><p>该命令有多个子命令组成，用来获取发布版本的扩展信息，包括：</p>
<ul>
<li>生成版本的值</li>
<li>生成的清单文件</li>
<li>发布的chart提供的注释</li>
<li>与版本关联的钩子</li>
</ul>
<h3 id="可选项-36">1.37.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for get</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-35">1.37.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-获取注释">1.38. Helm 获取注释</h2><h3 id="helm-get-notes">1.38.1. helm get notes</h3><p>下载命名版本的注释</p>
<h3 id="简介-30">1.38.2. 简介</h3><p>该命令显示了由指定版本chart提供的注释</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm get notes RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-37">1.38.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help           help for notes</span><br><span class="line">    --revision int   get the named release with revision</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-36">1.38.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-获取清单">1.39. Helm 获取清单</h2><h3 id="helm-get-manifest">1.39.1. helm get manifest</h3><p>下载命名版本的清单</p>
<h3 id="简介-31">1.39.2. 简介</h3><p>该命令用来获取指定版本的清单文件</p>
<p>清单是由该版本的chart生成的Kubernetes资源的YAML编码表示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm get manifest RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-38">1.39.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help           help for manifest</span><br><span class="line">    --revision int   get the named release with revision</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-37">1.39.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-获取钩子">1.40. Helm 获取钩子</h2><h3 id="helm-get-hooks">1.40.1. helm get hooks</h3><p>下载命名版本的所有钩子</p>
<h3 id="简介-32">1.40.2. 简介</h3><p>该命令下载指定版本的钩子</p>
<p>钩子被格式化为YAML格式并以YAML的’—\n’分隔符分隔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm get hooks RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-39">1.40.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help           help for hooks</span><br><span class="line">    --revision int   get the named release with revision</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-38">1.40.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-补全">1.41. Helm 补全</h2><h3 id="helm-completion">1.41.1. helm completion</h3><p>为指定的shell生成自动补全脚本</p>
<h3 id="简介-33">1.41.2. 简介</h3><p>为Helm生成针对于指定shell的自动补全脚本</p>
<h3 id="可选项-40">1.41.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for completion</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-39">1.41.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-验证">1.42. Helm 验证</h2><h3 id="helm-lint">1.42.1. helm lint</h3><p>验证chart是否存在问题</p>
<h3 id="简介-34">1.42.2. 简介</h3><p>该命令使用一个chart路径并运行一系列的测试来验证chart的格式是否正确。</p>
<p>如果遇到引起chart安装失败的情况，会触发[ERROR]信息，如果遇到违反惯例或建议的问题，会触发[WARNING]。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm lint PATH [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-41">1.42.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help                     help for lint</span><br><span class="line">    --set stringArray          set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --set-file stringArray     set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)</span><br><span class="line">    --set-string stringArray   set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)</span><br><span class="line">    --strict                   fail on lint warnings</span><br><span class="line">-f, --values strings           specify values in a YAML file or a URL (can specify multiple)</span><br><span class="line">    --with-subcharts           lint dependent charts</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-40">1.42.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm-验证-1">1.43. Helm 验证</h2><h3 id="helm-verify">1.43.1. helm verify</h3><p>验证给定路径的chart已经被签名且有效</p>
<h3 id="简介-35">1.43.2. 简介</h3><p>验证指定的chart有合法的源文件。</p>
<p>源文件提供了加密验证保证chart未被篡改，且由可信提供商打包。</p>
<p>该命令用于验证本地chart，其他一些命令提供’–verify’参数执行同样的验证。要生成一个签名包，使用’helm package –sign’命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm verify PATH [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-42">1.43.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help             help for verify</span><br><span class="line">    --keyring string   keyring containing public keys (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-41">1.43.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm依赖升级">1.44. Helm依赖升级</h2><h3 id="helm-dependency-update">1.44.1. helm dependency update</h3><p>基于Chart.yaml内容升级charts/</p>
<h3 id="简介-36">1.44.2. 简介</h3><p>更新磁盘上的依赖为Chart.yaml指定内容。</p>
<p>该命令验证存储在’charts/‘目录中的’Chart.yaml’文件描述的所需chart以及所需版本。 它会拉取满足依赖的最新chart并清理旧依赖。</p>
<p>成功更新后，会生成一个锁定文件用来重新构建精确版本的依赖。</p>
<p>不需要在’Chart.yaml’中表示依赖。 因此，更新命令不会删除chart，除非是在Chart.yaml文件中的错误版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm dependency update CHART [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-43">1.44.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help             help for update</span><br><span class="line">    --keyring string   keyring containing public keys (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --skip-refresh     do not refresh the local repository cache</span><br><span class="line">    --verify           verify the packages against signatures</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-42">1.44.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm依赖构建">1.45. Helm依赖构建</h2><h3 id="helm-dependency-build">1.45.1. helm dependency build</h3><p>基于Chart.lock文件重新构建charts/目录</p>
<h3 id="简介-37">1.45.2. 简介</h3><p>从Chart.lock构建输出到charts/目录</p>
<p>该构建是用来将chart的依赖项重建为锁定文件中的指定状态。就像’helm dependency update’一样并不会调整依赖状态。</p>
<p>如果没找到锁定文件，’helm dependency build’映射到’helm dependency update’</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm dependency build CHART [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-44">1.45.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help             help for build</span><br><span class="line">    --keyring string   keyring containing public keys (default &quot;~/.gnupg/pubring.gpg&quot;)</span><br><span class="line">    --skip-refresh     do not refresh the local repository cache</span><br><span class="line">    --verify           verify the packages against signatures</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-43">1.45.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm创建">1.46. Helm创建</h2><h3 id="helm-create">1.46.1. helm create</h3><p>使用给定名称创建新的chart</p>
<h3 id="简介-38">1.46.2. 简介</h3><p>该命令创建chart目录和chart用到的公共文件目录</p>
<p>比如’helm create foo’会创建一个目录结构看起来像这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">foo/</span><br><span class="line">├── .helmignore   # Contains patterns to ignore when packaging Helm charts.</span><br><span class="line">├── Chart.yaml    # Information about your chart</span><br><span class="line">├── values.yaml   # The default values for your templates</span><br><span class="line">├── charts/       # Charts that this chart depends on</span><br><span class="line">└── templates/    # The template files</span><br><span class="line">    └── tests/    # The test files</span><br></pre></td></tr></table></figure>

<p>‘helm create’使用一个目录作为参数。如果给定目录路径不存在，Helm会自动创建。如果给定目录存在且非空，冲突文件会被覆盖，其他文件会被保留。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm create NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-45">1.46.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help             help for create</span><br><span class="line">-p, --starter string   the name or absolute path to Helm starter scaffold</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-44">1.46.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm获取Values">1.47. Helm获取Values</h2><h3 id="helm-get-values">1.47.1. helm get values</h3><p>下载命名版本的values文件</p>
<h3 id="简介-39">1.47.2. 简介</h3><p>该命令下载给定版本的values文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm get values RELEASE_NAME [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-46">1.47.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all             dump all (computed) values</span><br><span class="line">-h, --help            help for values</span><br><span class="line">-o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)</span><br><span class="line">    --revision int    get the named release with revision</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-45">1.47.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm补全-bash">1.48. Helm补全 - bash</h2><h3 id="helm-completion-bash">1.48.1. helm completion bash</h3><p>为bash生成自动补全脚本</p>
<h3 id="简介-40">1.48.2. 简介</h3><p>为Helm生成针对于bash shell的自动补全脚本。</p>
<p>在当前shell会话中加载自动补全：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &lt;(helm completion bash)</span><br></pre></td></tr></table></figure>

<p>为每个新的会话加载自动补全，执行一次：</p>
<ul>
<li><p>Linux:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm completion bash &gt; /etc/bash_completion.d/helm</span><br></pre></td></tr></table></figure></li>
<li><p>MacOS:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm completion bash &gt; /usr/local/etc/bash_completion.d/helm</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm completion bash</span><br></pre></td></tr></table></figure>

<h3 id="可选项-47">1.48.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for bash</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-46">1.48.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm补全-fish">1.49. Helm补全 - fish</h2><h3 id="helm-completion-fish">1.49.1. helm completion fish</h3><p>为fish生成自动补全脚本</p>
<h3 id="简介-41">1.49.2. 简介</h3><p>为Helm生成针对于fish shell的自动补全脚本。</p>
<p>在当前shell会话中加载自动补全：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm completion fish | source</span><br></pre></td></tr></table></figure>

<p>为每个新的会话加载自动补全，执行一次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm completion fish &gt; ~/.config/fish/completions/helm.fish</span><br></pre></td></tr></table></figure>

<p>您需要启动一个新的shell使其生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm completion fish [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-48">1.49.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help              help for fish</span><br><span class="line">    --no-descriptions   disable completion descriptions</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-47">1.49.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-ca-file string         the certificate authority file for the Kubernetes API server connection</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="Helm补全-zsh">1.50. Helm补全 - zsh</h2><h3 id="helm-completion-zsh">1.50.1. helm completion zsh</h3><p>为zsh生成自动补全脚本</p>
<h3 id="简介-42">1.50.2. 简介</h3><p>为Helm生成针对于zsh shell的自动补全脚本。</p>
<p>在当前shell会话中加载自动补全：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &lt;(helm completion zsh)</span><br></pre></td></tr></table></figure>

<p>为每个新的会话加载自动补全，执行一次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm completion zsh &gt; &quot;$&#123;fpath[1]&#125;/_helm&quot;</span><br><span class="line">helm completion zsh [flags]</span><br></pre></td></tr></table></figure>

<h3 id="可选项-49">1.50.3. 可选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help   help for zsh</span><br><span class="line">    --no-descriptions   disable completion descriptions</span><br></pre></td></tr></table></figure>

<h3 id="从父命令继承的命令-48">1.50.4. 从父命令继承的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    --debug                       enable verbose output</span><br><span class="line">    --kube-apiserver string       the address and the port for the Kubernetes API server</span><br><span class="line">    --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.</span><br><span class="line">    --kube-as-user string         username to impersonate for the operation</span><br><span class="line">    --kube-context string         name of the kubeconfig context to use</span><br><span class="line">    --kube-token string           bearer token used for authentication</span><br><span class="line">    --kubeconfig string           path to the kubeconfig file</span><br><span class="line">-n, --namespace string            namespace scope for this request</span><br><span class="line">    --registry-config string      path to the registry config file (default &quot;~/.config/helm/registry.json&quot;)</span><br><span class="line">    --repository-cache string     path to the file containing cached repository indexes (default &quot;~/.cache/helm/repository&quot;)</span><br><span class="line">    --repository-config string    path to the file containing repository names and URLs (default &quot;~/.config/helm/repositories.yaml&quot;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>helm</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernetes</tag>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker配置加速器</title>
    <url>/p/43102.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="Ubuntu">1. Ubuntu</h1><h2 id="安装／升级Docker客户端">1.1. 安装／升级Docker客户端</h2><p>推荐安装1.10.0以上版本的Docker客户端，参考文档<a href="https://yq.aliyun.com/articles/110806">docker-ce</a></p>
<h2 id="配置镜像加速器">1.2. 配置镜像加速器</h2><p>针对Docker客户端版本大于 1.10.0 的用户</p>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://wh9z3wm8.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h1 id="CentOS">2. CentOS</h1><h2 id="安装／升级Docker客户端-1">2.1. 安装／升级Docker客户端</h2><p>推荐安装1.10.0以上版本的Docker客户端，参考文档<a href="https://yq.aliyun.com/articles/110806">docker-ce</a></p>
<h2 id="配置镜像加速器-1">2.2. 配置镜像加速器</h2><p>针对Docker客户端版本大于 1.10.0 的用户</p>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://wh9z3wm8.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h1 id="Mac">3. Mac</h1><h2 id="安装／升级Docker客户端-2">3.1. 安装／升级Docker客户端</h2><p>对于10.10.3以下的用户 推荐使用Docker Toolbox</p>
<p>Mac安装文件：<a href="http://mirrors.aliyun.com/docker-toolbox/mac/docker-toolbox/">http://mirrors.aliyun.com/docker-toolbox/mac/docker-toolbox/</a></p>
<p>对于10.10.3以上的用户 推荐使用Docker for Mac</p>
<p>Mac安装文件：<a href="http://mirrors.aliyun.com/docker-toolbox/mac/docker-for-mac/">http://mirrors.aliyun.com/docker-toolbox/mac/docker-for-mac/</a></p>
<h2 id="配置镜像加速器-2">3.2. 配置镜像加速器</h2><p>针对安装了Docker Toolbox的用户，您可以参考以下配置步骤：</p>
<p>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://wh9z3wm8.mirror.aliyuncs.com -d virtualbox default</span><br></pre></td></tr></table></figure>

<p>查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine env defaulteval <span class="string">&quot;<span class="subst">$(docker-machine env default)</span>&quot;</span>docker info</span><br></pre></td></tr></table></figure>

<p>针对安装了Docker for Mac的用户，您可以参考以下配置步骤：</p>
<p>在任务栏点击 Docker Desktop 应用图标 -&gt; Perferences，在左侧导航菜单选择 Docker Engine，在右侧输入栏编辑 json 文件。将</p>
<p><a href="https://wh9z3wm8.mirror.aliyuncs.com加到&quot;registry-mirrors&quot;的数组里,点击/">https://wh9z3wm8.mirror.aliyuncs.com加到&quot;registry-mirrors&quot;的数组里，点击</a> Apply &amp; Restart按钮，等待Docker重启并应用配置的镜像加速器。</p>
<h1 id="Windows">4. Windows</h1><h2 id="安装／升级Docker客户端-3">4.1. 安装／升级Docker客户端</h2><p>对于Windows 10以下的用户，推荐使用Docker Toolbox</p>
<p>Windows安装文件：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</a></p>
<p>对于Windows 10以上的用户 推荐使用Docker for Windows</p>
<p>Windows安装文件：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/">http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/</a></p>
<h2 id="配置镜像加速器-3">4.2. 配置镜像加速器</h2><p>针对安装了Docker Toolbox的用户，您可以参考以下配置步骤：</p>
<p>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://wh9z3wm8.mirror.aliyuncs.com -d virtualbox default</span><br></pre></td></tr></table></figure>

<p>查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine env defaulteval <span class="string">&quot;<span class="subst">$(docker-machine env default)</span>&quot;</span>docker info</span><br></pre></td></tr></table></figure>

<p>针对安装了Docker for Windows的用户，您可以参考以下配置步骤：</p>
<p>在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写下方加速器地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://wh9z3wm8.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑完成后点击 Apply 保存按钮，等待Docker重启并应用配置的镜像加速器。</p>
<h2 id="注意">4.3. 注意</h2><p>Docker for Windows 和 Docker Toolbox互不兼容，如果同时安装两者的话，需要使用hyperv的参数启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://wh9z3wm8.mirror.aliyuncs.com -d hyperv default</span><br></pre></td></tr></table></figure>

<p>Docker for Windows 有两种运行模式，一种运行Windows相关容器，一种运行传统的Linux容器。同一时间只能选择一种模式运行。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker构建基于Alpine的NodeJS镜像</title>
    <url>/p/14566.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="指定版本">1. 指定版本</h1><p>查看Dockerfile</p>
<p>cat Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM alpine:3.10.2</span><br><span class="line">ENV NODE_VERSION 14.5.0</span><br><span class="line">MAINTAINER heyuze</span><br><span class="line"></span><br><span class="line">RUN apk add --no-cache curl gcc g++ python make linux-headers \</span><br><span class="line">    &amp;&amp; curl -fsSLO --compressed <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>.tar.xz&quot;</span> \</span><br><span class="line">    &amp;&amp; tar -xf <span class="string">&quot;node-v<span class="variable">$NODE_VERSION</span>.tar.xz&quot;</span> \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> <span class="string">&quot;node-v<span class="variable">$NODE_VERSION</span>&quot;</span> \</span><br><span class="line">    &amp;&amp; ./configure  \</span><br><span class="line">    &amp;&amp; make -j$(getconf _NPROCESSORS_ONLN) \</span><br><span class="line">    &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> .. \</span><br><span class="line">    &amp;&amp; rm -Rf <span class="string">&quot;node-v<span class="variable">$NODE_VERSION</span>&quot;</span> \</span><br><span class="line">    &amp;&amp; rm <span class="string">&quot;node-v<span class="variable">$NODE_VERSION</span>.tar.xz&quot;</span> </span><br><span class="line"></span><br><span class="line">CMD [ <span class="string">&quot;node&quot;</span> ]</span><br></pre></td></tr></table></figure>



<p>使用Dockerfile构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@heyuze ~]<span class="comment"># docker build -t alpine-nodejs:v14.5.0 .</span></span><br></pre></td></tr></table></figure>

<p>查看构建好的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@heyuze ~]<span class="comment"># docker images|grep alpine-nodejs</span></span><br><span class="line">harbor.aimmcloud.cn/aimm/alpine-nodejs   v14.5.0             235175ed9068        32 seconds ago      339MB</span><br></pre></td></tr></table></figure>

<p>查看node，npm，pm2版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@heyuze ~]<span class="comment"># docker run --rm alpine-nodejs:v14.5.0 node -v</span></span><br><span class="line">v14.5.0</span><br><span class="line">[root@heyuze ~]<span class="comment"># docker run --rm alpine-nodejs:v14.5.0 npm -v</span></span><br><span class="line">6.14.5</span><br><span class="line">[root@heyuze ~]<span class="comment"># docker run --rm alpine-nodejs:v14.5.0 pm2 -v</span></span><br><span class="line"></span><br><span class="line">                        -------------</span><br><span class="line"></span><br><span class="line">__/\\\\\\\\\\\\\____/\\\\____________/\\\\____/\\\\\\\\\_____</span><br><span class="line"> _\/\\\/////////\\\_\/\\\\\\________/\\\\\\__/\\\///////\\\___</span><br><span class="line">  _\/\\\_______\/\\\_\/\\\//\\\____/\\\//\\\_\///______\//\\\__</span><br><span class="line">   _\/\\\\\\\\\\\\\/__\/\\\\///\\\/\\\/_\/\\\___________/\\\/___</span><br><span class="line">    _\/\\\/////////____\/\\\__\///\\\/___\/\\\________/\\\//_____</span><br><span class="line">     _\/\\\_____________\/\\\____\///_____\/\\\_____/\\\//________</span><br><span class="line">      _\/\\\_____________\/\\\_____________\/\\\___/\\\/___________</span><br><span class="line">       _\/\\\_____________\/\\\_____________\/\\\__/\\\\\\\\\\\\\\\_</span><br><span class="line">        _\///______________\///______________\///__\///////////////__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          Runtime Edition</span><br><span class="line"></span><br><span class="line">        PM2 is a Production Process Manager <span class="keyword">for</span> Node.js applications</span><br><span class="line">                     with a built-in Load Balancer.</span><br><span class="line"></span><br><span class="line">                Start and Daemonize any application:</span><br><span class="line">                $ pm2 start app.js</span><br><span class="line"></span><br><span class="line">                Load Balance 4 instances of api.js:</span><br><span class="line">                $ pm2 start api.js -i 4</span><br><span class="line"></span><br><span class="line">                Monitor <span class="keyword">in</span> production:</span><br><span class="line">                $ pm2 monitor</span><br><span class="line"></span><br><span class="line">                Make pm2 auto-boot at server restart:</span><br><span class="line">                $ pm2 startup</span><br><span class="line"></span><br><span class="line">                To go further checkout:</span><br><span class="line">                http://pm2.io/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        -------------</span><br><span class="line"></span><br><span class="line">[PM2] Spawning PM2 daemon with pm2_home=/root/.pm2</span><br><span class="line">[PM2] PM2 Successfully daemonized</span><br><span class="line">4.5.6</span><br></pre></td></tr></table></figure>

<p>给镜像打tag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@heyuze ~]<span class="comment"># docker tag alpine-nodejs:v14.5.0 heyuze/nodejs:v14.5.0</span></span><br></pre></td></tr></table></figure>

<p>将镜像push到仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@heyuze ~]<span class="comment"># docker push heyuze/nodejs</span></span><br><span class="line">The push refers to repository [docker.io/heyuze/nodejs]</span><br><span class="line">f5e26fb32437: Pushed</span><br><span class="line">03901b4a2ea8: Pushed</span><br><span class="line">v14.5.0: digest: sha256:25022611bd19acc6cd7f4b8e357ecd55fc27f0bde494d41e272b53c4b3cb9eef size: 741</span><br></pre></td></tr></table></figure>

<h1 id="使用默认版本">2. 使用默认版本</h1><p>查看Dockerfile</p>
<p>cat Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line">MAINTAINER yuze</span><br><span class="line">RUN apk add nodejs</span><br><span class="line">RUN apk add npm</span><br><span class="line">CMD [ <span class="string">&quot;node&quot;</span> ]</span><br></pre></td></tr></table></figure>

<p>使用Dockerfile构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@heyuze:/data/docker<span class="comment"># docker build -t alpine-nodejs .</span></span><br></pre></td></tr></table></figure>

<p>查看构建好的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@heyuze:/data/docker<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">alpine-nodejs       latest              1857723a956b        2 minutes ago       62.9MB</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS 调整卷大小后扩展 Linux 文件系统</title>
    <url>/p/47386.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<p>在<a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/requesting-ebs-volume-modifications.html">增加 EBS 卷的大小后</a>，您必须使用特定于文件系统的命令来将文件系统扩展到较大大小。一旦卷进入 <code>optimizing</code> 状态，您即可调整文件系统的大小。</p>
<p><strong>重要</strong></p>
<p>在扩展包含有用数据的文件系统之前，最佳实践是创建卷的快照（如果您需要回滚您的更改）。有关更多信息，请参阅 <a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/ebs-creating-snapshot.html">创建 Amazon EBS 快照</a>。如果您的 Linux AMI 使用 MBR 分区方案，您的引导卷大小限制为最高 2 TiB。有关更多信息，请参阅 <a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/modify-volume-requirements.html#linux-volumes">针对 Linux 卷的要求</a>和<a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/volume_constraints.html">针对 EBS 卷的大小和配置的限制</a>。</p>
<p>在 Linux 上扩展文件系统的过程如下：</p>
<ol>
<li>您的 EBS 卷可能有一个包含文件系统和数据的分区。增加卷的大小不会增加分区的大小。在调整大小后的卷上扩展文件系统之前，请检查卷是否具有必须扩展到卷的新大小的分区。</li>
<li>可使用特定于文件系统的命令将每个文件系统调整为新的卷容量。</li>
</ol>
<p>有关扩展 Windows 文件系统的信息，请参阅 <em>Amazon EC2 用户指南（适用于 Windows 实例）</em> 中的<a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/recognize-expanded-volume-windows.html">调整卷大小后扩展 Windows 文件系统</a>。</p>
<p>以下示例将引导您完成扩展 Linux 文件系统的过程。关于此处所示的文件系统和分区方案以外的其他文件系统和分区方案，请参阅相关文件系统和分区方案的文档以获取说明。</p>
<p><strong>注意</strong></p>
<p>如果在 Amazon EBS 卷上使用逻辑卷，则必须使用逻辑卷管理器 (LVM) 来扩展逻辑卷。有关如何执行此操作的说明，请参阅<a href="http://aws.amazon.com/premiumsupport/knowledge-center/create-lv-on-ebs-volume/">如何在整个 EBS 卷上创建 LVM 逻辑卷？</a>中的<strong>扩展逻辑卷</strong>部分。 AWS 知识中心文章。</p>
<p><strong>示例</strong></p>
<ul>
<li><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html#extend-file-system-nvme">示例：扩展 NVMe EBS 卷的文件系统</a></li>
<li><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html#extend-file-system">示例：扩展 EBS 卷的文件系统</a></li>
</ul>
<h1 id="示例：扩展-NVMe-EBS-卷的文件系统">1. 示例：扩展 NVMe EBS 卷的文件系统</h1><p>对于此示例，假设您有一个基于 <a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro 系统</a>构建的实例，例如 M5 实例。您将引导卷的大小从 8 GB 调整为 16 GB，并将一个附加卷的大小从 8 GB 调整为 30 GB。按照以下过程扩展调整大小后的卷的文件系统。</p>
<p><strong>扩展 NVMe EBS 卷的文件系统</strong></p>
<ol>
<li><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html">连接到您的实例</a>。</li>
<li>要验证每个卷的文件系统，请使用 <strong>df -hT</strong> 命令。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -hT</span><br></pre></td></tr></table></figure>

<p>以下是一个实例的示例输出，该实例具有带 XFS 文件系统的引导卷和带 XFS 文件系统的附加卷。命名约定 <code>/dev/nvme[0-26]n1</code> 指示卷作为 NVMe 块储存设备公开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -hT</span><br><span class="line">Filesystem      Type  Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/nvme0n1p1  xfs   8.0G  1.6G  6.5G  20% /</span><br><span class="line">/dev/nvme1n1    xfs   8.0G   33M  8.0G   1% /data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>3.要检查卷是否具有必须扩展的分区，请使用<strong>lsblk</strong>命令显示有关附加到实例的 NVMe 块储存设备的信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ lsblk</span><br><span class="line">NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">nvme1n1       259:0    0  30G  0 disk /data</span><br><span class="line">nvme0n1       259:1    0  16G  0 disk</span><br><span class="line">└─nvme0n1p1   259:2    0   8G  0 part /</span><br><span class="line">└─nvme0n1p128 259:3    0   1M  0 part</span><br></pre></td></tr></table></figure>

<p>此示例输出显示以下内容：</p>
<ul>
<li><ul>
<li>根卷 <code>/dev/nvme0n1</code> 具有一个分区 <code>/dev/nvme0n1p1</code>。当根卷的大小反映新大小 16 GB 时，分区的大小会反映原始大小 8 GB 并且必须先进行扩展，然后才能扩展文件系统。</li>
<li>卷 <code>/dev/nvme1n1</code> 没有分区。卷的大小反映新大小 30 GB。</li>
</ul>
</li>
</ul>
<p>4.对于有分区的卷，例如上一步中显示的根卷，请使用 <strong>growpart</strong> 命令扩展分区。请注意，设备名称和分区编号之间有空格。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo growpart /dev/nvme0n1 1</span><br></pre></td></tr></table></figure>

<p>5.（可选）要验证分区是否反映增大后的卷大小，可再次使用 <strong>lsblk</strong> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ lsblk</span><br><span class="line">NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">nvme1n1       259:0    0  30G  0 disk /data</span><br><span class="line">nvme0n1       259:1    0  16G  0 disk</span><br><span class="line">└─nvme0n1p1   259:2    0  16G  0 part /</span><br><span class="line">└─nvme0n1p128 259:3    0   1M  0 part</span><br></pre></td></tr></table></figure>

<p>6.要验证每个卷的文件系统的大小，可使用 <strong>df -h</strong> 命令。在此示例输出中，两个文件系统均反映 8 GB 的原始卷大小。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -h</span><br><span class="line">Filesystem       Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/nvme0n1p1   8.0G  1.6G  6.5G  20% /</span><br><span class="line">/dev/nvme1n1     8.0G   33M  8.0G   1% /data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>7.要扩展每个卷上的文件系统，请对文件系统使用正确的命令，如下所示：</p>
<ul>
<li>[XFS 文件系统] 要扩展每个卷上的文件系统，使用 <strong>xfs_growfs</strong> 命令。在此示例中，<code>/</code> 和 <code>/data</code> 是 <strong>df -h</strong> 的输出中显示的卷挂载点。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo xfs_growfs -d /</span><br><span class="line">[ec2-user ~]$ sudo xfs_growfs -d /data</span><br></pre></td></tr></table></figure>

<p>如果尚未安装 XFS 工具，可以按如下方式安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo yum install xfsprogs</span><br></pre></td></tr></table></figure>

<ul>
<li>[ext4 文件系统] 要扩展每个卷上的文件系统，使用 <strong>resize2fs</strong> 命令。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo resize2fs /dev/nvme0n1p1</span><br><span class="line">[ec2-user ~]$ sudo resize2fs /dev/nvme1n1</span><br></pre></td></tr></table></figure>

<ul>
<li>[其他文件系统] 要扩展每个卷上的文件系统，请参阅文件系统的文档以获取说明。</li>
</ul>
<p>8.（可选）要验证每个文件系统是否反映增大后的卷大小，可再次使用 <strong>df -h</strong> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -h</span><br><span class="line">Filesystem       Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/nvme0n1p1    16G  1.6G   15G  10% /</span><br><span class="line">/dev/nvme1n1      30G   33M   30G   1% /data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="示例：扩展-EBS-卷的文件系统">2. 示例：扩展 EBS 卷的文件系统</h1><p>在本示例中，假设您将某个实例（例如 T2 实例）的引导卷的大小从 8 GB 调整为 16 GB，并将一个附加卷的大小从 8 GB 调整为 30 GB。按照以下过程扩展调整大小后的卷的文件系统。</p>
<p><strong>扩展 EBS 卷的文件系统</strong></p>
<ol>
<li><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html">连接到您的实例</a>。</li>
<li>要验证每个卷使用的文件系统，请使用 <strong>df -hT</strong> 命令。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -hT</span><br></pre></td></tr></table></figure>

<p>以下是一个实例的示例输出，该实例具有带 ext4 文件系统的引导卷和带 XFS 文件系统的附加卷。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -hT</span><br><span class="line">Filesystem      Type  Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/xvda1      ext4  8.0G  1.9G  6.2G  24% /</span><br><span class="line">/dev/xvdf1      xfs   8.0G   45M  8.0G   1% /data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>3.要检查卷是否具有必须扩展的分区，请使用 <strong>lsblk</strong> 命令显示有关附加到实例的块储存设备的信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ lsblk</span><br><span class="line">NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">xvda    202:0    0  16G  0 disk</span><br><span class="line">└─xvda1 202:1    0   8G  0 part /</span><br><span class="line">xvdf    202:80   0  30G  0 disk</span><br><span class="line">└─xvdf1 202:81   0   8G  0 part /data</span><br></pre></td></tr></table></figure>

<p>此示例输出显示以下内容：</p>
<ul>
<li>根卷 <code>/dev/xvda</code> 具有一个分区 <code>/dev/xvda1</code>。当卷的大小为 16 GB 时，分区的大小仍为 8 GB 且必须进行扩展。</li>
<li>卷 <code>/dev/xvdf</code> 具有一个分区 <code>/dev/xvdf1</code>。当卷的大小为 30G 时，分区的大小仍为 8 GB 且必须进行扩展。</li>
</ul>
<p>4.对于有分区的卷，例如上一步中显示的卷，请使用 <strong>growpart</strong> 命令扩展分区。请注意，设备名称和分区编号之间有空格。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo growpart /dev/xvda 1</span><br><span class="line">[ec2-user ~]$ sudo growpart /dev/xvdf 1</span><br></pre></td></tr></table></figure>

<p>5.（可选）要验证分区是否反映增大后的卷大小，可再次使用 <strong>lsblk</strong> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ lsblk</span><br><span class="line">NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">xvda    202:0    0  16G  0 disk</span><br><span class="line">└─xvda1 202:1    0  16G  0 part /</span><br><span class="line">xvdf    202:80   0  30G  0 disk</span><br><span class="line">└─xvdf1 202:81   0  30G  0 part /data</span><br></pre></td></tr></table></figure>

<p>6.要验证每个卷的文件系统的大小，可使用 <strong>df -h</strong> 命令。在此示例输出中，两个文件系统均反映 8 GB 的原始卷大小。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -h</span><br><span class="line">Filesystem       Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/xvda1       8.0G  1.9G  6.2G  24% /</span><br><span class="line">/dev/xvdf1       8.0G   45M  8.0G   1% /data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>7.要扩展每个卷上的文件系统，请对文件系统使用正确的命令，如下所示：</p>
<ul>
<li>[XFS 卷] 要扩展每个卷上的文件系统，使用 <strong>xfs_growfs</strong> 命令。在此示例中，<code>/</code> 和 <code>/data</code> 是 <strong>df -h</strong> 的输出中显示的卷挂载点。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo xfs_growfs -d /</span><br><span class="line">[ec2-user ~]$ sudo xfs_growfs -d /data</span><br></pre></td></tr></table></figure>

<p>如果尚未安装 XFS 工具，可以按如下方式安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo yum install xfsprogs</span><br></pre></td></tr></table></figure>

<ul>
<li>[ext4 卷] 要扩展每个卷上的文件系统，使用 <strong>resize2fs</strong> 命令。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo resize2fs /dev/xvda1</span><br><span class="line">[ec2-user ~]$ sudo resize2fs /dev/xvdf1</span><br></pre></td></tr></table></figure>

<ul>
<li>[其他文件系统] 要扩展每个卷上的文件系统，请参阅文件系统的文档以获取说明。</li>
</ul>
<p>8.（可选）要验证每个文件系统是否反映增大后的卷大小，可再次使用 <strong>df -h</strong> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ df -h</span><br><span class="line">Filesystem       Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/xvda1        16G  1.9G  14G  12% /</span><br><span class="line">/dev/xvdf1        30G   45M  30G   1% /data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="报错">3. 报错</h1><p>1.执行xfs_growfs时报错如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo xfs_growfs -d /data</span><br><span class="line">xfs_growfs: /data is not a mounted XFS filesystem</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ec2-user ~]$ sudo resize2fs /dev/nvme1n1p1 </span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/nvme1n1p1 is mounted on /data; on-line resizing required</span><br><span class="line">old_desc_blocks = 25, new_desc_blocks = 38</span><br><span class="line">The filesystem on /dev/nvme1n1p1 is now 78642939 blocks long.</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<blockquote>
<p><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html">https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>磁盘</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言基础</title>
    <url>/p/25470.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="go语言的命令">1. go语言的命令</h1><ul>
<li>build：用于编译给定的代码包或Go语言源码文件及其依赖包。<ul>
<li>go build -o “xx.exe” :编译成xx.exe文件</li>
</ul>
</li>
<li>clean：用于清除执行其他go命令后遗留的目录和文件。</li>
<li>doc：用于执行godoc命令以打印指定代码包。</li>
<li>env：用于打印Go语言环境信息。</li>
<li>fix：用于执行go tool fix命令以修正给定代码包的源码文件中包含的过时语法和代码调用。</li>
<li>fmt：用于执行gofmt命令以格式化给定代码包中的源码文件。</li>
<li>get：用于下载和安装给定代码包及其依赖包（提前安装git或hg）。</li>
<li>list：用于显示给定代码包的信息。</li>
<li>run：用于编译并运行给定的命令源码文件。</li>
<li>install：编译包文件并编译整个程序。</li>
<li>test：用于测试给定的代码包。</li>
<li>tool：用于运行go语言的特殊工具。</li>
<li>version：显示当前安装的go语言的版本信息。</li>
<li>vet：运行go tool vet</li>
</ul>
<h1 id="golang开发-vscode快捷键">2. golang开发 vscode快捷键</h1><h2 id="快捷键位置">2.1. 快捷键位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File-&gt;Preferences-&gt;Keyboard Shortcuts</span><br></pre></td></tr></table></figure>

<h2 id="常用快捷键">2.2. 常用快捷键</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 行注释 ctrl + /</span><br><span class="line">2. 块注释 shift+alt+a (可以修改为ctrl+shift+/)</span><br><span class="line">3. ctrl+a 全选</span><br><span class="line">4. ctrl+c 复制</span><br><span class="line">5. ctrl+v 粘贴</span><br><span class="line">6. ctrl+shift+k 删除行</span><br><span class="line">7. ctrl+e查找文件</span><br><span class="line">8. ctrl+shift+p 打开设置命令行</span><br></pre></td></tr></table></figure>

<h2 id="修改快捷键">2.3. 修改快捷键</h2><ol>
<li>打开快捷键 <code>File-&gt;Preferences-&gt;Keyboard Shortcuts</code></li>
<li>双击要修改的快捷键</li>
<li>键盘输入想要使用的快捷键</li>
</ol>
<h2 id="快速生成代码片段">2.4. 快速生成代码片段</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkgm  main包+main主函数</span><br><span class="line">ff  fmt.Printf(&quot;&quot;, var)</span><br><span class="line">for for i := 0; i &lt; count; i++ &#123;&#125;</span><br><span class="line">forr for _, v := range v &#123;&#125;</span><br><span class="line">fmain func main() &#123;&#125;</span><br><span class="line">a.print! fmt.Printf(&quot;a: %v\n&quot;, a)</span><br></pre></td></tr></table></figure>



<h1 id="如何编写golang代码">3. 如何编写golang代码</h1><h2 id="代码组织">3.1. 代码组织</h2><p>go应用使用<strong>包</strong>和<strong>模块</strong>来组织代码，包对应到文件系统就是文件夹，模块就是**.go**的go源文件。一个包中会有多个模块，或者多个子包。</p>
<h2 id="go项目管理工具">3.2. go项目管理工具</h2><p>早期的go项目使用gopath来管理项目，不方便而且容易出错，从 golang 1.11 开始使用gomod管理项目，当然还有第三方模块例如govendor，我们给大家结束gomod的使用</p>
<h2 id="创建一个应用">3.3. 创建一个应用</h2><ol>
<li><p>首先，创建一个模块路径，例如：<code>duoke360.com/hello</code>，前缀一般为域名</p>
</li>
<li><p>在该目录中执行 <code>go mod init duoke360.com/hello</code>，该命令会创建一个go.mod文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module duoke360.com/hello</span><br><span class="line">go 1.17</span><br></pre></td></tr></table></figure></li>
<li><p>在hello文件夹中创建一个test.go文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;多课网，golang教程&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>构建并安装程序，执行如下命令，该命令会在GOPATH或者GOBIN环境变量下面创建一个hello.exe可执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install duoke360.com/hello/</span><br></pre></td></tr></table></figure></li>
<li><p>执行，输入hello，运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多课网，golang教程</span><br></pre></td></tr></table></figure></li>
<li><p>创建子包，创建一个morestrings子包，就是创建一个子文件夹，在hello目录下面</p>
</li>
<li><p>创建一个子模块，morestrings.go，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package morestrings</span><br><span class="line"></span><br><span class="line">func ReverseRunes(s string) string &#123;</span><br><span class="line">r := []rune(s)</span><br><span class="line">for i, j := 0, len(r)-1; i &lt; len(r)/2; i, j = i+1, j-1 &#123;</span><br><span class="line">r[i], r[j] = r[j], r[i]</span><br><span class="line">&#125;</span><br><span class="line">return string(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切换到子包目录下面，执行编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure></li>
<li><p>在test.go中导入子模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))</span><br></pre></td></tr></table></figure></li>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install duoke360.com/hello/</span><br></pre></td></tr></table></figure></li>
<li><p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Go!</span><br></pre></td></tr></table></figure></li>
<li><p>导入网络模块，查找地址：<code>https://pkg.go.dev/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;duoke360.com/hello/morestrings&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/google/go-cmp/cmp&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))</span><br><span class="line">fmt.Println(cmp.Diff(&quot;Hello World&quot;, &quot;Hello Go&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>执行命令，<code>go mod tidy</code>,查看go.mod变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module duoke360.com/hello</span><br><span class="line"></span><br><span class="line">go 1.17</span><br><span class="line"></span><br><span class="line">require github.com/google/go-cmp v0.5.6</span><br></pre></td></tr></table></figure></li>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install duoke360.com/hello/</span><br></pre></td></tr></table></figure></li>
<li><p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Go!</span><br><span class="line"> string(</span><br><span class="line">-       &quot;Hello World&quot;,</span><br><span class="line">+       &quot;Hello Go&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建go语言开发环境</title>
    <url>/p/465.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="golang开发工具">1. golang开发工具</h1><h2 id="开发工具简介">1.1. 开发工具简介</h2><p>golang的开发工具有很多，例如：</p>
<ol>
<li>vim</li>
<li>sublime</li>
<li>atom</li>
<li>LiteIDE</li>
<li>eclipse</li>
<li>goland</li>
<li>vscode</li>
</ol>
<h2 id="使用goland开发go应用">1.2. 使用goland开发go应用</h2><p>goland是一款付费的、功能强大的golang集成开发环境，是Jetbrain公司的产品。下载地址：<code>https://www.jetbrains.com/go/</code> goland非常智能，几乎不需要配置，安装即用。</p>
<h2 id="使用vscode开发go应用">1.3. 使用vscode开发go应用</h2><ol>
<li><p>下载安装vscode <code>https://code.visualstudio.com/</code></p>
</li>
<li><p>下载安装插件，参考文档：<code>https://marketplace.visualstudio.com/items?itemName=golang.go</code></p>
</li>
<li><p>安装常用工具包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get -u -v github.com/nsf/gocode // 代码自动补齐</span><br><span class="line">go get -u -v github.com/rogpeppe/godef // 查找方法定义</span><br><span class="line">go get -u -v github.com/golang/lint/golint // 代码规范</span><br><span class="line">go get -u -v github.com/lukehoban/go-find-references // 查找引用</span><br><span class="line">go get -u -v github.com/lukehoban/go-outline //</span><br><span class="line">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class="line">go get -u -v golang.org/x/tools/cmd/gorename // 重命名</span><br><span class="line">go get -u -v github.com/tpng/gopkgs // 可以使用的包</span><br><span class="line">go get -u -v github.com/newhook/go-symbols</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意执行时删除后面的注释</p>
</blockquote>
</li>
<li><p>安装code runner运行脚本</p>
</li>
</ol>
<h1 id="第一个go程序">2. 第一个go程序</h1><h2 id="helloworld">2.1. helloworld</h2><p>main.go</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 主包，可执行文件所在包</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">// 导入包</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// 主函数，入口函数</span><br><span class="line">func main() &#123;</span><br><span class="line">// 打印输入</span><br><span class="line">   fmt.Println(&quot;Hello, World!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cmd 中运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure>

<h2 id="编译">2.2. 编译</h2><p>使用go build，表示将源代码编译成可执行文件。</p>
<p>1.在项目目录下执行<code>go build</code></p>
<p>2.在其他路径下执行<code>go build </code>,需要在后面加上项目的路径（项目路径从<code>GOPATH/src</code>后开始写起，编译之后的可执行文件就保存在当前目录下）</p>
<p>3.<code>go build -o hello.exe</code>（指定名称）</p>
<p>可在终端直接执行该<code>hello.exe</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\desktop\hello&gt;hello.exe</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<p><strong>go run</strong></p>
<p>像执行脚本文件一样执行go代码</p>
<p><strong>go install</strong></p>
<p><code>go install</code>分为两步：</p>
<p>1.先编译得到一个可执行文件</p>
<p>2.将可执行文件拷贝到<code>GOPATH/bin</code></p>
<h2 id="跨平台编译">2.3. 跨平台编译</h2><p>默认我们<code>go build</code>的可执行文件都是当前操作系统可执行的文件，Go语言支持跨平台编译——在当前平台（例如Windows）下编译其他平台（例如Linux）的可执行文件。</p>
<p><strong>Windows编译Linux可执行文件</strong></p>
<p>默认我们<code>go build</code>的可执行文件都是当前操作系统可执行的文件，如果想在windows下编译一个Linux下可执行的文件，那需要怎么做呢？</p>
<blockquote>
<p>注意：无论你在Windows电脑上使用VsCode编辑器还是Goland编辑器，都要注意你使用的终端类型，因为不同的终端下命令不一样！！！目前的Windows通常默认使用的是<code>PowerShell</code>终端。</p>
</blockquote>
<p>如果你的<code>Windows</code>使用的是<code>cmd</code>，那么按如下方式指定环境变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET CGO_ENABLED=0  // 禁用CGO</span><br><span class="line">SET GOOS=linux  // 目标平台是linux</span><br><span class="line">SET GOARCH=amd64  // 目标处理器架构是amd64</span><br></pre></td></tr></table></figure>

<p>如果你的<code>Windows</code>使用的是<code>PowerShell</code>终端，那么设置环境变量的语法为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ENV:CGO_ENABLED=0</span><br><span class="line">$ENV:GOOS=&quot;linux&quot;</span><br><span class="line">$ENV:GOARCH=&quot;amd64&quot;</span><br></pre></td></tr></table></figure>

<p>在你的<code>Windows</code>终端下执行完上述命令后，再执行下面的命令，得到的就是能够在Linux平台运行的可执行文件了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure>

<p><strong>Windows编译Mac可执行文件</strong></p>
<p>Windows下编译Mac平台64位可执行程序：</p>
<p>cmd终端下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=darwin</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build</span><br></pre></td></tr></table></figure>

<p>PowerShell终端下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ENV</span>:CGO_ENABLED=0</span><br><span class="line"><span class="variable">$ENV</span>:GOOS=<span class="string">&quot;darwin&quot;</span></span><br><span class="line"><span class="variable">$ENV</span>:GOARCH=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">go build</span><br></pre></td></tr></table></figure>

<p><strong>Mac编译Linux可执行文件</strong></p>
<p>Mac电脑编译得到Linux平台64位可执行程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</span><br></pre></td></tr></table></figure>

<p><strong>Mac编译Windows可执行文件</strong></p>
<p>Mac电脑编译得到Windows平台64位可执行程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure>

<p><strong>Linux编译Mac可执行文件</strong></p>
<p>Linux平台下编译Mac平台64位可执行程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build</span><br></pre></td></tr></table></figure>

<p><strong>Linux编译Windows可执行文件</strong></p>
<p>Linux平台下编译Windows平台64位可执行程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure>



<p>2.test.go</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(&quot;Google&quot; + &quot;Runoob&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run test.go</span><br></pre></td></tr></table></figure>



<p>3.date.go</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	// %d 表示整型数字，%s 表示字符串</span><br><span class="line">	var stockcode=123</span><br><span class="line">	var enddate=&quot;2020-12-31&quot;</span><br><span class="line">	var url=&quot;Code=%d&amp;endDate=%s&quot;</span><br><span class="line">	var target_url=fmt.Sprintf(url,stockcode,enddate)</span><br><span class="line">	fmt.Println(target_url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run date.go</span><br><span class="line"></span><br><span class="line">结果：Code=123&amp;endDate=2020-12-31</span><br></pre></td></tr></table></figure>



<h2 id="main包的意义">2.4. main包的意义</h2><p>在 Go 语言里，命名为 <code>main</code> 的包具有特殊的含义。Go 语言的编译程序会试图把这种名字的包编译为二进制可执行文件。所有用 Go 语言编译的可执行程序都必须有一个名叫 <code>main</code> 的包。一个可执行程序有且仅有一个 <code>main</code> 包。当编译器发现某个包的名字为 <code>main</code> 时，它一定也会发现名为 <code>main()</code>的函数，否则不会创建可执行文件。main()函数是程序的入口，所以，如果没有这个函数，程序就没有办法开始执行。程序编译时，会使用声明 main 包的代码所在的目录的目录名作为二进制可执行文件的文件名。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>高效golang开发</title>
    <url>/p/60933.html</url>
    <content><![CDATA[<p><escape><span id="more"></span></escape></p>
<h1 id="高效golang开发">1. 高效golang开发</h1><h2 id="介绍">1.1. 介绍</h2><p>Go 是一种新语言。虽然它借鉴了现有语言的思想，但它具有不同寻常的特性，使有效的 Go 程序在特性上不同于用它的亲戚编写的程序。将 C++ 或 Java 程序直接翻译成 Go 不太可能产生令人满意的结果——Java 程序是用 Java 编写的，而不是 Go。另一方面，从 Go 的角度思考问题可能会产生一个成功但完全不同的程序。换句话说，要写好 Go，重要的是要了解它的属性和习语。了解 Go 编程的既定约定也很重要，例如命名、格式化、程序构造等，以便您编写的程序易于其他 Go 程序员理解。</p>
<p>本文档提供了编写清晰、惯用的 Go 代码的技巧。它扩充了语言规范、Go之旅和如何编写 Go 代码，您应该首先阅读所有这些内容。</p>
<h2 id="格式化">1.2. 格式化</h2><p>格式问题是最有争议但最不重要的问题。人们可以适应不同的格式风格，但如果他们没有必要，那就更好了，如果每个人都坚持相同的风格，那么花在该主题上的时间就会更少。问题是如何在没有长篇规范风格指南的情况下接近这个乌托邦。</p>
<p>在 Go 中，我们采用了一种不同寻常的方法，让机器处理大多数格式问题。该<code>gofmt</code>程序（也可用作<code>go fmt</code>，它在包级别而不是源文件级别运行）读取 Go 程序并以标准的缩进和垂直对齐方式发出源代码，保留并在必要时重新格式化注释。如果你想知道如何处理一些新的布局情况，运行<code>gofmt</code>; 如果答案似乎不正确，请重新安排您的程序（或提交关于 的错误<code>gofmt</code>），不要解决它。</p>
<p>例如，无需花时间排列结构字段的注释。<code>Gofmt</code>会为你做的。鉴于声明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type T struct &#123;</span><br><span class="line">   name string // name of the object</span><br><span class="line">   value int // its value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>gofmt</code> 将排列列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type T struct &#123;</span><br><span class="line">   name    string // name of the object</span><br><span class="line">   value   int    // its value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标准包中的所有 Go 代码都已格式化为<code>gofmt</code>.</p>
<p>一些格式细节仍然存在。非常简短：</p>
<ul>
<li><p>缩进</p>
<p>我们使用制表符进行缩进并<code>gofmt</code>默认发出它们。仅在必须时才使用空格。</p>
</li>
<li><p>长度限制</p>
<p>Go 没有行长度限制。不用担心打孔卡溢出。如果一行感觉太长，请将其包裹起来并用额外的标签缩进。</p>
</li>
<li><p>括弧</p>
<p>Go 需要的括号比 C 和 Java 少：控制结构 ( <code>if</code>, <code>for</code>, <code>switch</code>) 的语法中没有括号。此外，运算符优先级层次结构更短更清晰，因此<code>x&lt;&lt;8 + y&lt;&lt;16</code>表示间距的含义，与其他语言不同。</p>
</li>
</ul>
<h2 id="注释">1.3. 注释</h2><p>Go 提供了 C 风格的<code>/* */</code>块注释和 C++ 风格的<code>//</code>行注释。行注释是常态；块注释主要作为包注释出现，但在表达式中或禁用大量代码时很有用。</p>
<p>该程序和 Web 服务器<code>godoc</code>处理 Go 源文件以提取有关包内容的文档。出现在顶级声明之前的注释，中间没有换行符，与声明一起被提取出来作为项目的解释性文本。这些注释的性质和风格决定了文档<code>godoc</code>生成的质量。</p>
<p>每个包都应该有一个<em>包注释</em>，包子句之前的块注释。对于多文件包，包注释只需要出现在一个文件中，任何一个都可以。包注释应介绍包并提供与整个包相关的信息。它将首先出现在<code>godoc</code>页面上，并应设置后面的详细文档。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">Package regexp implements a simple library for regular expressions.</span><br><span class="line"></span><br><span class="line">The syntax of the regular expressions accepted is:</span><br><span class="line"></span><br><span class="line">  regexp:</span><br><span class="line">      concatenation &#123; &#x27;|&#x27; concatenation &#125;</span><br><span class="line">  concatenation:</span><br><span class="line">      &#123; closure &#125;</span><br><span class="line">  closure:</span><br><span class="line">      term [ &#x27;*&#x27; | &#x27;+&#x27; | &#x27;?&#x27; ]</span><br><span class="line">  term:</span><br><span class="line">      &#x27;^&#x27;</span><br><span class="line">      &#x27;$&#x27;</span><br><span class="line">      &#x27;.&#x27;</span><br><span class="line">      character</span><br><span class="line">      &#x27;[&#x27; [ &#x27;^&#x27; ] character-ranges &#x27;]&#x27;</span><br><span class="line">      &#x27;(&#x27; regexp &#x27;)&#x27;</span><br><span class="line">*/</span><br><span class="line">package regexp</span><br></pre></td></tr></table></figure>

<p>如果包装简单，包装注释可以简短。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Package path implements utility routines for</span><br><span class="line">// manipulating slash-separated filename paths.</span><br></pre></td></tr></table></figure>

<p>注释不需要额外的格式，例如星星横幅。生成的输出甚至可能不会以固定宽度的字体呈现，所以不要依赖间距来对齐<code>godoc</code>——像 一样<code>gofmt</code>，会照顾到这一点。注释是未解释的纯文本，因此 HTML 和其他注释（例如）<code>_this_</code>将<em>逐字复制</em>，不应使用。一种调整<code>godoc</code>确实是以固定宽度的字体显示缩进文本，适用于程序片段。对于包注释 <code>fmt</code>包使用此效果良好。</p>
<p>根据上下文，<code>godoc</code>甚至可能不会重新格式化注释，因此请确保它们直接看起来不错：使用正确的拼写、标点符号和句子结构，折叠长行等。</p>
<p>在包内，紧接在顶级声明之前的任何注释都用作该声明的<em>文档注释</em>。程序中每个导出（大写）的名称都应该有一个文档注释。</p>
<p>文档注释作为完整的句子效果最好，它允许各种自动演示。第一句话应该是一个以声明的名字开头的一句话总结。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Compile parses a regular expression and returns, if successful,</span><br><span class="line">// a Regexp that can be used to match against text.</span><br><span class="line">func Compile(str string) (*Regexp, error) &#123;</span><br></pre></td></tr></table></figure>

<p>如果每个 doc 注释都以其描述的项目名称开头，则可以使用go工具的doc 子命令并通过. 想象一下，你不记得名字“编译”，但正在寻找正则表达式的解析函数，所以你运行了命令， <code>grep</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go doc -all regexp | grep -i parse</span><br></pre></td></tr></table></figure>

<p>如果包中的所有文档注释都以“此函数…”开头，<code>grep</code> 将无法帮助您记住名称。但是因为包以名称开始每个文档注释，所以您会看到类似这样的内容，它会回忆起您正在寻找的单词。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go doc -all regexp | grep -i parse</span><br><span class="line">  Compile parses a regular expression and returns, if successful, a Regexp</span><br><span class="line">  MustCompile is like Compile but panics if the expression cannot be parsed.</span><br><span class="line">  parsed. It simplifies safe initialization of global variables holding</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>Go 的声明语法允许对声明进行分组。单个文档注释可以引入一组相关的常量或变量。由于提出了整个声明，这样的注释通常是敷衍的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Error codes returned by failures to parse an expression.</span><br><span class="line">var (</span><br><span class="line">   ErrInternal      = errors.New(&quot;regexp: internal error&quot;)</span><br><span class="line">   ErrUnmatchedLpar = errors.New(&quot;regexp: unmatched &#x27;(&#x27;&quot;)</span><br><span class="line">   ErrUnmatchedRpar = errors.New(&quot;regexp: unmatched &#x27;)&#x27;&quot;)</span><br><span class="line">   ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>分组还可以指示项目之间的关系，例如一组变量受互斥锁保护的事实。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var (</span><br><span class="line">   countLock   sync.Mutex</span><br><span class="line">   inputCount  uint32</span><br><span class="line">   outputCount uint32</span><br><span class="line">   errorCount  uint32</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="命名">1.4. 命名</h2><p>名称在 Go 中与在任何其他语言中一样重要。它们甚至具有语义效果：包外名称的可见性取决于其第一个字符是否为大写。因此，值得花一点时间讨论 Go 程序中的命名约定。</p>
<h3 id="包名">1.4.1. 包名</h3><p>导入包时，包名称成为内容的访问器。后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;bytes&quot;</span><br></pre></td></tr></table></figure>

<p>导入包可以谈<code>bytes.Buffer</code>。如果每个使用包的人都可以使用相同的名称来引用其内容，这将很有帮助，这意味着包名称应该是好的：简短、简洁、令人回味。按照惯例，包使用小写的单字名称；应该不需要下划线或混合大写字母。简而言之，因为使用您的包的每个人都会输入该名称。并且不要担心<em>先验的</em>碰撞。包名只是导入的默认名称；它不需要在所有源代码中都是唯一的，并且在极少数发生冲突的情况下，导入包可以选择不同的名称以在本地使用。在任何情况下，混淆都很少见，因为导入中的文件名决定了正在使用哪个包。</p>
<p>另一个约定是包名是其源目录的基本名称；中的包<code>src/encoding/base64</code> 被导入为<code>&quot;encoding/base64&quot;</code>但具有 name <code>base64</code>， not<code>encoding_base64</code>和 not <code>encodingBase64</code>。</p>
<p>包的导入器将使用名称来引用其内容，因此包中的导出名称可以使用该事实来避免重复。（不要使用<code>import .</code>符号，它可以简化必须在他们正在测试的包之外运行的测试，否则应该避免。）例如，包中的缓冲读取器类型<code>bufio</code>被称为<code>Reader</code>，而不是<code>BufReader</code>，因为用户将其视为<code>bufio.Reader</code>,这是一个清晰简洁的名称。此外，由于导入的实体总是以其包名寻址，因此<code>bufio.Reader</code> 不会与<code>io.Reader</code>. 类似地，创建新实例的函数<code>ring.Ring</code>——这是Go 中<em>构造函数</em>的定义——通常会被调用<code>NewRing</code>，但由于 <code>Ring</code>是包导出的唯一类型，并且由于包被称为<code>ring</code>，因此它被称为 just <code>New</code>，包的客户端将其视为<code>ring.New</code>。使用包结构来帮助您选择好名字。</p>
<p>另一个简短的例子是<code>once.Do</code>；<code>once.Do(setup)</code>读得好，不会因写作而改善<code>once.DoOrWaitUntilDone(setup)</code>。长名称不会自动使内容更具可读性。有用的文档注释通常比超长的名称更有价值。</p>
<h3 id="Getters">1.4.2. Getters</h3><p>Go 不提供对 getter 和 setter 的自动支持。自己提供 getter 和 setter 并没有错，而且这样做通常是合适的，但这既不是惯用的，也不是必需<code>Get</code>的。如果您有一个名为<code>owner</code>（小写，未导出）的字段 ，则应调用 getter 方法<code>Owner</code>（大写，导出），而不是<code>GetOwner</code>. 使用大写名称导出提供了区分字段和方法的钩子。如果需要，可能会调用 setter 函数<code>SetOwner</code>。这两个名字在实践中都很好读：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">owner := obj.Owner()</span><br><span class="line">if owner != user &#123;</span><br><span class="line">   obj.SetOwner(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口名称">1.4.3. 接口名称</h3><p>按照惯例，一个方法接口由该方法name加上后缀-er或类似的修改命名构建的试剂名：<code>Reader</code>， <code>Writer</code>，<code>Formatter</code>， <code>CloseNotifier</code>等。</p>
<p>有许多这样的名称，尊重它们和它们捕获的函数名称是很有成效的。<code>Read</code>，<code>Write</code>，<code>Close</code>，<code>Flush</code>， <code>String</code>等有规范签名和意义。为避免混淆，除非具有相同的签名和含义，否则不要为您的方法指定其中一个名称。相反，如果您的类型实现了一个与众所周知类型上的方法具有相同含义的方法，则为其赋予相同的名称和签名；调用您的字符串转换器方法<code>String</code>not <code>ToString</code>。</p>
<h3 id="混合大写（驼峰命名法）">1.4.4. 混合大写（驼峰命名法）</h3><p>最后，Go 中的约定是使用<code>MixedCaps</code> or<code>mixedCaps</code>而不是下划线来编写多词名称。</p>
<h2 id="分号">1.5. 分号</h2><p>与 C 一样，Go 的正式语法使用分号来终止语句，但与 C 不同的是，这些分号不会出现在源代码中。相反，词法分析器使用一个简单的规则在扫描时自动插入分号，因此输入文本大部分都没有分号。</p>
<p>规则是这样的。如果换行符之前的最后一个标记是标识符（包括像<code>int</code>and 之类的词<code>float64</code>）、基本文字（例如数字或字符串常量）或标记之一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break continue fallthrough return ++ -- ) &#125;</span><br></pre></td></tr></table></figure>

<p>词法分析器总是在标记后插入一个分号。这可以概括为，“如果换行符出现在可以结束语句的标记之后，则插入分号”。</p>
<p>分号也可以直接在右大括号之前省略，所以像这样的语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go func() &#123; for &#123; dst &lt;- &lt;-src &#125; &#125;()</span><br></pre></td></tr></table></figure>

<p>不需要分号。惯用的 Go 程序仅在<code>for</code>循环子句等地方使用分号 ，以分隔初始化器、条件和延续元素。如果您以这种方式编写代码，它们对于分隔一行中的多个语句也是必要的。</p>
<p>的分号插入规则的一个后果是，你不能把一个控制结构（中左括号<code>if</code>，<code>for</code>，<code>switch</code>，或<code>select</code>）在下一行。如果这样做，将在大括号之前插入分号，这可能会导致不必要的影响。像这样写它们</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if i &lt; f() &#123;</span><br><span class="line">   g()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if i &lt; f()  // wrong!</span><br><span class="line">&#123;           // wrong!</span><br><span class="line">   g()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制结构">1.6. 控制结构</h2><p>Go 的控制结构与 C 的控制结构相关，但在重要方面有所不同。没有<code>do</code>or<code>while</code>循环，只有一个稍微概括的 <code>for</code>; <code>switch</code>更灵活；<code>if</code>并<code>switch</code>接受一个可选的初始化语句，如<code>for</code>; <code>break</code>和<code>continue</code>语句采用可选标签来标识要中断或继续的内容；并且有新的控制结构，包括类型开关和多路通信多路复用器，<code>select</code>。语法也略有不同：没有括号，主体必须始终以大括号分隔。</p>
<h3 id="如果">1.6.1. 如果</h3><p>在 Go 中，一个简单的<code>if</code>看起来像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if x &gt; 0 &#123;</span><br><span class="line">   return y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>强制大括号鼓励<code>if</code>在多行上编写简单的语句。无论如何，这样做是一种很好的风格，尤其是当主体包含诸如 a<code>return</code>或 之类的控制语句时 <code>break</code>。</p>
<p>由于<code>if</code>并<code>switch</code>接受初始化语句，因此通常会看到用于设置局部变量的语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if err := file.Chmod(0664); err != nil &#123;</span><br><span class="line">    log.Print(err)</span><br><span class="line">    return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Go 库中，你会发现当一个<code>if</code>语句没有流入下一个语句时——也就是说，主体以<code>break</code>、<code>continue</code>、 <code>goto</code>、 或<code>return</code>——结尾，不必要的 <code>else</code>被省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(name)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    return err</span><br><span class="line">&#125;</span><br><span class="line">codeUsing(f)</span><br></pre></td></tr></table></figure>

<p>这是代码必须防范一系列错误条件的常见情况的示例。如果成功的控制流沿着页面向下运行，则代码可读性良好，从而消除出现的错误情况。由于错误案例往往以<code>return</code> 语句结尾，因此生成的代码不需要<code>else</code>语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(name)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    return err</span><br><span class="line">&#125;</span><br><span class="line">d, err := f.Stat()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    f.Close()</span><br><span class="line">    return err</span><br><span class="line">&#125;</span><br><span class="line">codeUsing(f, d)</span><br></pre></td></tr></table></figure>

<h3 id="声明和赋值">1.6.2. 声明和赋值</h3><p>上一节中的最后一个示例详细说明了 <code>:=</code>简短声明表单的工作原理。调用的声明<code>os.Open</code>如下，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(name)</span><br></pre></td></tr></table></figure>

<p>该语句声明了两个变量，<code>f</code>和<code>err</code>。几行之后，调用<code>f.Stat</code>读取，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d, err := f.Stat()</span><br></pre></td></tr></table></figure>

<p>看起来好像声明了<code>d</code>and <code>err</code>。但是请注意，这<code>err</code>出现在两个语句中。这种重复是合法的：<code>err</code>由第一条语句声明，但仅在第二条语句中<em>重新赋值</em>。这意味着调用<code>f.Stat</code>使用<code>err</code>上面声明的现有 变量，并为其赋予一个新值。</p>
<p>在<code>:=</code>声明中，<code>v</code>即使变量已经声明，也可能出现，条件是：</p>
<ul>
<li>此声明与现有声明的作用域相同<code>v</code> （如果<code>v</code>已在外部作用域中声明，则该声明将创建一个新变量 §），</li>
<li>初始化中的相应值可分配给<code>v</code>，并且</li>
<li>至少有一个由声明创建的其他变量。</li>
</ul>
<p>这种不寻常的属性是纯粹的实用主义，可以很容易地使用单个<code>err</code>值，例如，在长<code>if-else</code>链中。你会看到它经常被使用。</p>
<p>§ 这里值得注意的是，在 Go 中，函数参数和返回值的范围与函数体相同，即使它们在词法上出现在包围体的大括号之外。</p>
<h3 id="for">1.6.3. for</h3><p>Go<code>for</code>循环与 C 的相似但不相同。它统一<code>for</code> 并且<code>while</code>没有<code>do-while</code>。共有三种形式，其中只有一种带有分号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Like a C for</span><br><span class="line">for init; condition; post &#123; &#125;</span><br><span class="line"></span><br><span class="line">// Like a C while</span><br><span class="line">for condition &#123; &#125;</span><br><span class="line"></span><br><span class="line">// Like a C for(;;)</span><br><span class="line">for &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>简短的声明使得在循环中声明索引变量变得容易。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum := 0</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您在数组、切片、字符串或映射上循环，或者从通道读取，<code>range</code>子句可以管理循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key, value := range oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您只需要范围中的第一项（键或索引），请删除第二项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key := range m &#123;</span><br><span class="line">    if key.expired() &#123;</span><br><span class="line">        delete(m, key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您只需要范围中的第二项（值），请使用<em>空白标识符</em>（下划线）来丢弃第一项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum := 0</span><br><span class="line">for _, value := range array &#123;</span><br><span class="line">    sum += value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>空白标识符有很多用途，如后面的部分所述。</p>
<p>对于字符串，<code>range</code>它可以为您做更多的工作，通过解析 UTF-8 来分解单个 Unicode 代码点。错误的编码消耗一个字节并产生替换符文 U+FFFD。（名称（带有关联的内置类型）<code>rune</code>是单个 Unicode 代码点的 Go 术语。有关 详细信息，请参阅语言规范。）循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for pos, char := range &quot;日本\x80語&quot; &#123; // \x80 is an illegal UTF-8 encoding</span><br><span class="line">    fmt.Printf(&quot;character %#U starts at byte position %d\n&quot;, char, pos)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character U+65E5 &#x27;日&#x27; starts at byte position 0</span><br><span class="line">character U+672C &#x27;本&#x27; starts at byte position 3</span><br><span class="line">character U+FFFD &#x27;�&#x27; starts at byte position 6</span><br><span class="line">character U+8A9E &#x27;語&#x27; starts at byte position 7</span><br></pre></td></tr></table></figure>

<p>最后，Go 没有逗号运算符<code>++</code>and<code>--</code> 是语句而不是表达式。因此，如果您想在 a 中运行多个变量，<code>for</code> 您应该使用并行赋值（尽管这排除了<code>++</code>和<code>--</code>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Reverse a</span><br><span class="line">for i, j := 0, len(a)-1; i &lt; j; i, j = i+1, j-1 &#123;</span><br><span class="line">    a[i], a[j] = a[j], a[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Switch">1.6.4. Switch</h3><p>Go<code>switch</code>比 C 更通用。表达式不必是常量甚至整数，情况从上到下计算，直到找到匹配项，如果<code>switch</code>没有表达式，则打开 <code>true</code>。因此，将<code>if</code>- <code>else</code>- <code>if</code>-<code>else</code> 链编写 为<code>switch</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func unhex(c byte) byte &#123;</span><br><span class="line">    switch &#123;</span><br><span class="line">    case &#x27;0&#x27; &lt;= c &amp;&amp; c &lt;= &#x27;9&#x27;:</span><br><span class="line">        return c - &#x27;0&#x27;</span><br><span class="line">    case &#x27;a&#x27; &lt;= c &amp;&amp; c &lt;= &#x27;f&#x27;:</span><br><span class="line">        return c - &#x27;a&#x27; + 10</span><br><span class="line">    case &#x27;A&#x27; &lt;= c &amp;&amp; c &lt;= &#x27;F&#x27;:</span><br><span class="line">        return c - &#x27;A&#x27; + 10</span><br><span class="line">    &#125;</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有自动失败，但案例可以以逗号分隔的列表形式呈现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func shouldEscape(c byte) bool &#123;</span><br><span class="line">    switch c &#123;</span><br><span class="line">    case &#x27; &#x27;, &#x27;?&#x27;, &#x27;&amp;&#x27;, &#x27;=&#x27;, &#x27;#&#x27;, &#x27;+&#x27;, &#x27;%&#x27;:</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尽管它们在 Go 中不像其他一些类似 C 的语言那样常见，但<code>break</code>语句可用于提前终止<code>switch</code>。然而，有时，有必要跳出周围的循环，而不是 switch，而在 Go 中，这可以通过在循环上放置一个标签并“打破”该标签来实现。这个例子展示了这两种用途。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loop:</span><br><span class="line">	for n := 0; n &lt; len(src); n += size &#123;</span><br><span class="line">		switch &#123;</span><br><span class="line">		case src[n] &lt; sizeOne:</span><br><span class="line">			if validateOnly &#123;</span><br><span class="line">				break</span><br><span class="line">			&#125;</span><br><span class="line">			size = 1</span><br><span class="line">			update(src[n])</span><br><span class="line"></span><br><span class="line">		case src[n] &lt; sizeTwo:</span><br><span class="line">			if n+1 &gt;= len(src) &#123;</span><br><span class="line">				err = errShortInput</span><br><span class="line">				break Loop</span><br><span class="line">			&#125;</span><br><span class="line">			if validateOnly &#123;</span><br><span class="line">				break</span><br><span class="line">			&#125;</span><br><span class="line">			size = 2</span><br><span class="line">			update(src[n] + src[n+1]&lt;&lt;shift)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>当然，该<code>continue</code>语句也接受一个可选标签，但它仅适用于循环。</p>
<p>为了结束本节，这里有一个使用两个<code>switch</code>语句的字节切片比较例程 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Compare returns an integer comparing the two byte slices,</span><br><span class="line">// lexicographically.</span><br><span class="line">// The result will be 0 if a == b, -1 if a &lt; b, and +1 if a &gt; b</span><br><span class="line">func Compare(a, b []byte) int &#123;</span><br><span class="line">    for i := 0; i &lt; len(a) &amp;&amp; i &lt; len(b); i++ &#123;</span><br><span class="line">        switch &#123;</span><br><span class="line">        case a[i] &gt; b[i]:</span><br><span class="line">            return 1</span><br><span class="line">        case a[i] &lt; b[i]:</span><br><span class="line">            return -1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    switch &#123;</span><br><span class="line">    case len(a) &gt; len(b):</span><br><span class="line">        return 1</span><br><span class="line">    case len(a) &lt; len(b):</span><br><span class="line">        return -1</span><br><span class="line">    &#125;</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型switch">1.6.5. 类型switch</h3><p>开关还可用于发现接口变量的动态类型。这种<em>类型开关</em>使用类型断言的语法，<code>type</code>在括号内带有关键字。如果 switch 在表达式中声明了一个变量，则该变量将在每个子句中具有相应的类型。在这种情况下重用名称也是惯用的，实际上在每种情况下都声明了一个具有相同名称但类型不同的新变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var t interface&#123;&#125;</span><br><span class="line">t = functionOfSomeType()</span><br><span class="line">switch t := t.(type) &#123;</span><br><span class="line">default:</span><br><span class="line">    fmt.Printf(&quot;unexpected type %T\n&quot;, t)     // %T prints whatever type t has</span><br><span class="line">case bool:</span><br><span class="line">    fmt.Printf(&quot;boolean %t\n&quot;, t)             // t has type bool</span><br><span class="line">case int:</span><br><span class="line">    fmt.Printf(&quot;integer %d\n&quot;, t)             // t has type int</span><br><span class="line">case *bool:</span><br><span class="line">    fmt.Printf(&quot;pointer to boolean %t\n&quot;, *t) // t has type *bool</span><br><span class="line">case *int:</span><br><span class="line">    fmt.Printf(&quot;pointer to integer %d\n&quot;, *t) // t has type *int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数">1.7. 函数</h2><h3 id="多个返回值">1.7.1. 多个返回值</h3><p>Go 不寻常的特性之一是函数和方法可以返回多个值。这种形式可用于改进 C 程序中的几个笨拙的习惯用法：带内错误返回，例如<code>-1</code>for<code>EOF</code> 和修改按地址传递的参数。</p>
<p>在 C 中，写入错误由负计数表示，错误代码隐藏在易失性位置。在 Go 中，<code>Write</code> 可以返回一个计数<em>和</em>一个错误：“是的，你写了一些字节，但不是全部，因为你填满了设备”。<code>Write</code>包中文件的方法签名<code>os</code>是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (file *File) Write(b []byte) (n int, err error)</span><br></pre></td></tr></table></figure>

<p>正如文档所说，它返回写入的字节数和非零<code>error</code>when <code>n</code> <code>!=</code> <code>len(b)</code>。这是一种常见的风格；有关更多示例，请参阅错误处理部分。</p>
<p>类似的方法不需要传递指向返回值的指针来模拟引用参数。这是一个简单的函数，从字节切片中的某个位置抓取一个数字，返回该数字和下一个位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func nextInt(b []byte, i int) (int, int) &#123;</span><br><span class="line">    for ; i &lt; len(b) &amp;&amp; !isDigit(b[i]); i++ &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    x := 0</span><br><span class="line">    for ; i &lt; len(b) &amp;&amp; isDigit(b[i]); i++ &#123;</span><br><span class="line">        x = x*10 + int(b[i]) - &#x27;0&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return x, i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以使用它来扫描输入切片中的数字，<code>b</code>如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i := 0; i &lt; len(b); &#123;</span><br><span class="line">    x, i = nextInt(b, i)</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名结果参数">1.7.2. 命名结果参数</h3><p>Go 函数的返回或结果“参数”可以命名并用作常规变量，就像传入参数一样。当命名时，它们在函数开始时被初始化为它们的类型的零值；如果函数执行<code>return</code>不带参数的语句，则结果参数的当前值将用作返回值。</p>
<p>这些名称不是强制性的，但它们可以使代码更短、更清晰：它们是文档。如果我们命名<code>nextInt</code>它的结果就很明显返回的<code>int</code> 是哪个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func nextInt(b []byte, pos int) (value, nextPos int) &#123;</span><br></pre></td></tr></table></figure>

<p>因为命名结果被初始化并绑定到一个简单的返回值，它们可以简化和澄清。这是一个<code>io.ReadFull</code>很好地使用它们的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func ReadFull(r Reader, buf []byte) (n int, err error) &#123;</span><br><span class="line">    for len(buf) &gt; 0 &amp;&amp; err == nil &#123;</span><br><span class="line">        var nr int</span><br><span class="line">        nr, err = r.Read(buf)</span><br><span class="line">        n += nr</span><br><span class="line">        buf = buf[nr:]</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="defer">1.7.3. defer</h3><p>Go 的<code>defer</code>语句安排一个函数调用（ <em>延迟</em>函数）在函数执行<code>defer</code>返回之前立即运行。这是一种不寻常但有效的方法来处理诸如必须释放资源的情况，而不管函数采用哪条路径返回。规范示例是解锁互斥锁或关闭文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Contents returns the file&#x27;s contents as a string.</span><br><span class="line">func Contents(filename string) (string, error) &#123;</span><br><span class="line">    f, err := os.Open(filename)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return &quot;&quot;, err</span><br><span class="line">    &#125;</span><br><span class="line">    defer f.Close()  // f.Close will run when we&#x27;re finished.</span><br><span class="line"></span><br><span class="line">    var result []byte</span><br><span class="line">    buf := make([]byte, 100)</span><br><span class="line">    for &#123;</span><br><span class="line">        n, err := f.Read(buf[0:])</span><br><span class="line">        result = append(result, buf[0:n]...) // append is discussed later.</span><br><span class="line">        if err != nil &#123;</span><br><span class="line">            if err == io.EOF &#123;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">            return &quot;&quot;, err  // f will be closed if we return here.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return string(result), nil // f will be closed if we return here.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推迟对诸如此类的函数的调用<code>Close</code>有两个优点。首先，它保证您永远不会忘记关闭文件，如果您稍后编辑该函数以添加新的返回路径，则很容易犯这个错误。其次，这意味着收盘价位于开盘价附近，这比将其放在函数的末尾要清晰得多。</p>
<p>延迟函数的参数（如果函数是方法，则包括接收器）在<em>延迟</em> 执行时计算，而不是在<em>调用</em>执行时计算。除了避免担心在函数执行时变量会改变值，这意味着单个延迟调用站点可以延迟多个函数执行。这是一个愚蠢的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">    defer fmt.Printf(&quot;%d &quot;, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>延迟函数以 LIFO 顺序执行，因此该代码将导致 <code>4 3 2 1 0</code>在函数返回时打印。一个更合理的例子是通过程序跟踪函数执行的简单方法。我们可以编写几个简单的跟踪例程，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func trace(s string)   &#123; fmt.Println(&quot;entering:&quot;, s) &#125;</span><br><span class="line">func untrace(s string) &#123; fmt.Println(&quot;leaving:&quot;, s) &#125;</span><br><span class="line"></span><br><span class="line">// Use them like this:</span><br><span class="line">func a() &#123;</span><br><span class="line">    trace(&quot;a&quot;)</span><br><span class="line">    defer untrace(&quot;a&quot;)</span><br><span class="line">    // do something....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过利用延迟函数的参数在<code>defer</code>执行时评估这一事实来做得更好。跟踪例程可以为 untracing 例程设置参数。这个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func trace(s string) string &#123;</span><br><span class="line">    fmt.Println(&quot;entering:&quot;, s)</span><br><span class="line">    return s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func un(s string) &#123;</span><br><span class="line">    fmt.Println(&quot;leaving:&quot;, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func a() &#123;</span><br><span class="line">    defer un(trace(&quot;a&quot;))</span><br><span class="line">    fmt.Println(&quot;in a&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func b() &#123;</span><br><span class="line">    defer un(trace(&quot;b&quot;))</span><br><span class="line">    fmt.Println(&quot;in b&quot;)</span><br><span class="line">    a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">entering: b</span><br><span class="line">in b</span><br><span class="line">entering: a</span><br><span class="line">in a</span><br><span class="line">leaving: a</span><br><span class="line">leaving: b</span><br></pre></td></tr></table></figure>

<p>对于习惯于其他语言的块级资源管理的程序员来说，这<code>defer</code>可能看起来很奇怪，但它最有趣和最强大的应用程序恰恰来自于它不是基于块而是基于函数的事实。在 和 的部分中 <code>panic</code>，<code>recover</code>我们将看到其可能性的另一个示例。</p>
<h2 id="数据">1.8. 数据</h2><h3 id="分配与-new">1.8.1. 分配与 new</h3><p>Go 有两个分配原语，内置函数 <code>new</code>和<code>make</code>. 它们做不同的事情并适用于不同的类型，这可能会令人困惑，但规则很简单。让我们<code>new</code>先谈谈。它是一个分配内存的内置函数，但与其他一些语言中的同名函数不同，它不会<em>初始化</em>内存，只会将其<em>归零</em>。也就是说， <code>new(T)</code>为一个新的 type 项分配零存储 <code>T</code>并返回它的地址，一个 type 的值<code>*T</code>。在 Go 术语中，它返回一个指向新分配的类型零值的指针 <code>T</code>。</p>
<p>由于由 返回的内存<code>new</code>已归零，因此在设计数据结构时安排每种类型的零值无需进一步初始化即可使用是有帮助的。这意味着数据结构的用户可以创建一个<code>new</code>并开始工作。例如，文档<code>bytes.Buffer</code>说明“零值<code>Buffer</code>是一个准备使用的空缓冲区”。同样，<code>sync.Mutex</code>没有显式构造函数或<code>Init</code>方法。相反，a 的零值<code>sync.Mutex</code> 被定义为未锁定的互斥锁。</p>
<p>零值有用的属性可以传递。考虑这个类型声明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type SyncedBuffer struct &#123;</span><br><span class="line">    lock    sync.Mutex</span><br><span class="line">    buffer  bytes.Buffer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>type 的值<code>SyncedBuffer</code>也可以在分配或声明后立即使用。在下一个代码段中，<code>p</code>和<code>v</code>无需进一步安排即可正常工作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p := new(SyncedBuffer)  // type *SyncedBuffer</span><br><span class="line">var v SyncedBuffer      // type  SyncedBuffer</span><br></pre></td></tr></table></figure>

<h3 id="构造函数和复合字面量">1.8.2. 构造函数和复合字面量</h3><p>有时零值不够好，需要一个初始化构造函数，如从 package 派生的这个例子<code>os</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func NewFile(fd int, name string) *File &#123;</span><br><span class="line">    if fd &lt; 0 &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">    f := new(File)</span><br><span class="line">    f.fd = fd</span><br><span class="line">    f.name = name</span><br><span class="line">    f.dirinfo = nil</span><br><span class="line">    f.nepipe = 0</span><br><span class="line">    return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面有很多锅炉板。我们可以使用<em>复合字面量</em>来简化它，这是一个每次计算时都会创建一个新实例的表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func NewFile(fd int, name string) *File &#123;</span><br><span class="line">    if fd &lt; 0 &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">    f := File&#123;fd, name, nil, 0&#125;</span><br><span class="line">    return &amp;f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，与 C 不同，返回局部变量的地址是完全可以的；与变量关联的存储在函数返回后仍然存在。事实上，每次计算复合文字的地址时都会分配一个新实例，因此我们可以将最后两行组合起来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return &amp;File&#123;fd, name, nil, 0&#125;</span><br></pre></td></tr></table></figure>

<p>复合文字的字段按顺序排列，并且必须全部存在。但是，通过将元素显式标记为<em>字段</em><code>:</code><em>值</em> 对，初始<em>值设定项</em>可以按任何顺序出现，缺失的作为各自的零值保留。因此我们可以说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return &amp;File&#123;fd: fd, name: name&#125;</span><br></pre></td></tr></table></figure>

<p>作为一种限制情况，如果复合文字根本不包含任何字段，它会为该类型创建一个零值。表达式<code>new(File)</code>和<code>&amp;File&#123;&#125;</code>是等价的。</p>
<p>还可以为数组、切片和映射创建复合文字，字段标签是索引或映射键（视情况而定）。在这些例子中，初始化工作无论的值的<code>Enone</code>， <code>Eio</code>和<code>Einval</code>，只要它们是不同的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a := [...]string &#123;Enone: &quot;no error&quot;, Eio: &quot;Eio&quot;, Einval: &quot;invalid argument&quot;&#125;</span><br><span class="line">s := []string &#123;Enone: &quot;no error&quot;, Eio: &quot;Eio&quot;, Einval: &quot;invalid argument&quot;&#125;</span><br><span class="line">m := map[int]string&#123;Enone: &quot;no error&quot;, Eio: &quot;Eio&quot;, Einval: &quot;invalid argument&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分配与-make">1.8.3. 分配与 make</h3><p>回到分配。内置函数<code>make(T,</code><em>args</em><code>)</code>的用途不同于<code>new(T)</code>. 它仅创建切片、映射和通道，并返回类型为(not )的<em>初始化</em> （未<em>清零</em>）值。区别的原因是这三种类型在幕后表示对必须在使用前初始化的数据结构的引用。例如，切片是一个三项描述符，包含指向数据（在数组内）、长度和容量的指针，并且在这些项被初始化之前，切片是。对于切片、映射和通道， 初始化内部数据结构并准备使用值。例如， <code>T``*T``nil``make</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make([]int, 10, 100)</span><br></pre></td></tr></table></figure>

<p>分配一个包含 100 个整数的数组，然后创建一个长度为 10、容量为 100 的切片结构，指向数组的前 10 个元素。（制作切片时，可以省略容量；有关更多信息，请参阅切片部分。）相反，<code>new([]int)</code>返回指向新分配的、归零的切片结构的指针，即指向<code>nil</code>切片值的指针。</p>
<p>这些示例说明了<code>new</code>和 之间的区别<code>make</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful</span><br><span class="line">var v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints</span><br><span class="line"></span><br><span class="line">// Unnecessarily complex:</span><br><span class="line">var p *[]int = new([]int)</span><br><span class="line">*p = make([]int, 100, 100)</span><br><span class="line"></span><br><span class="line">// Idiomatic:</span><br><span class="line">v := make([]int, 100)</span><br></pre></td></tr></table></figure>

<p>请记住，这<code>make</code>仅适用于映射、切片和通道，并且不返回指针。获得显式指针分配<code>new</code>或显式获取变量的地址。</p>
<h3 id="数组">1.8.4. 数组</h3><p>数组在规划内存的详细布局时很有用，有时可以帮助避免分配，但主要是它们是切片的构建块，下一节的主题。为了为该主题奠定基础，这里有一些关于数组的词。</p>
<p>Go 和 C 中数组的工作方式有很大的不同。在 Go 中，</p>
<ul>
<li>数组是值。将一个数组分配给另一个会复制所有元素。</li>
<li>特别是，如果你将一个数组传递给一个函数，它会收到一个数组的<em>副本</em>，而不是一个指向它的指针。</li>
<li>数组的大小是其类型的一部分。类型<code>[10]int</code> 和<code>[20]int</code>是不同的。</li>
</ul>
<p>value 属性可能很有用，但也很昂贵；如果你想要类似 C 的行为和效率，你可以传递一个指向数组的指针。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Sum(a *[3]float64) (sum float64) &#123;</span><br><span class="line">    for _, v := range *a &#123;</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array := [...]float64&#123;7.0, 8.5, 9.1&#125;</span><br><span class="line">x := Sum(&amp;array)  // Note the explicit address-of operator</span><br></pre></td></tr></table></figure>

<p>但即使是这种风格也不是惯用的 Go。改用切片。</p>
<h3 id="切片">1.8.5. 切片</h3><p>切片包装数组，为数据序列提供更通用、更强大、更方便的接口。除了具有显式维度的项（例如转换矩阵），Go 中的大多数数组编程都是使用切片而不是简单数组完成的。</p>
<p>切片保存对底层数组的引用，如果将一个切片分配给另一个切片，则两者都引用同一个数组。如果一个函数接受一个切片参数，它对切片元素所做的更改将对调用者可见，类似于传递一个指向底层数组的指针。甲<code>Read</code> 因此函数可以接受一个切片参数，而不是一个指针和一个计数; 切片内的长度设置了读取数据量的上限。这是package 中类型 的<code>Read</code>方法的签名 ：<code>File``os</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (f *File) Read(buf []byte) (n int, err error)</span><br></pre></td></tr></table></figure>

<p>该方法返回读取的字节数和错误值（如果有）。读入所述第一32个字节的较大的缓冲区的 <code>buf</code>，<em>切片</em>（这里用作动词）的缓冲液中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n, err := f.Read(buf[0:32])</span><br></pre></td></tr></table></figure>

<p>这种切片是常见且高效的。事实上，暂时不考虑效率，以下代码段还将读取缓冲区的前 32 个字节。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var n int</span><br><span class="line">var err error</span><br><span class="line">for i := 0; i &lt; 32; i++ &#123;</span><br><span class="line">    nbytes, e := f.Read(buf[i:i+1])  // Read one byte.</span><br><span class="line">    n += nbytes</span><br><span class="line">    if nbytes == 0 || e != nil &#123;</span><br><span class="line">        err = e</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切片的长度可以改变，只要它仍然适合底层数组的限制；只需将其分配给自身的一部分。可通过内置函数访问的切片的<em>容量</em><code>cap</code>报告切片可能采用的最大长度。这是一个将数据附加到切片的函数。如果数据超过容量，则重新分配切片。返回结果切片。该函数使用<code>len</code>和<code>cap</code>应用于<code>nil</code>切片时合法 的事实 ，并返回 0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Append(slice, data []byte) []byte &#123;</span><br><span class="line">    l := len(slice)</span><br><span class="line">    if l + len(data) &gt; cap(slice) &#123;  // reallocate</span><br><span class="line">        // Allocate double what&#x27;s needed, for future growth.</span><br><span class="line">        newSlice := make([]byte, (l+len(data))*2)</span><br><span class="line">        // The copy function is predeclared and works for any slice type.</span><br><span class="line">        copy(newSlice, slice)</span><br><span class="line">        slice = newSlice</span><br><span class="line">    &#125;</span><br><span class="line">    slice = slice[0:l+len(data)]</span><br><span class="line">    copy(slice[l:], data)</span><br><span class="line">    return slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后我们必须返回切片，因为虽然<code>Append</code> 可以修改 的元素<code>slice</code>，但切片本身（保存指针、长度和容量的运行时数据结构）是按值传递的。</p>
<p>附加到切片的想法非常有用，它被<code>append</code>内置函数捕获 。但是，要了解该函数的设计，我们需要更多信息，因此稍后会返回。</p>
<h3 id="二维切片">1.8.6. 二维切片</h3><p>Go 的数组和切片是一维的。要创建二维数组或切片的等效项，必须定义一个数组数组或切片数组，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Transform [3][3]float64  // A 3x3 array, really an array of arrays.</span><br><span class="line">type LinesOfText [][]byte     // A slice of byte slices.</span><br></pre></td></tr></table></figure>

<p>因为切片是可变长度的，所以可以让每个内部切片的长度不同。这可能是一种常见情况，如我们的<code>LinesOfText</code> 示例所示：每条线都有独立的长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text := LinesOfText&#123;</span><br><span class="line">	[]byte(&quot;Now is the time&quot;),</span><br><span class="line">	[]byte(&quot;for all good gophers&quot;),</span><br><span class="line">	[]byte(&quot;to bring some fun to the party.&quot;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有时需要分配 2D 切片，例如，在处理像素扫描线时可能会出现这种情况。有两种方法可以实现这一点。一种是独立分配每个slice；另一种是分配单个数组并将各个切片指向其中。使用哪个取决于您的应用程序。如果切片可能会增长或缩小，则应单独分配以避免覆盖下一行；如果没有，使用单个分配构造对象会更有效。作为参考，这里是两种方法的草图。首先，一次一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Allocate the top-level slice.</span><br><span class="line">picture := make([][]uint8, YSize) // One row per unit of y.</span><br><span class="line">// Loop over the rows, allocating the slice for each row.</span><br><span class="line">for i := range picture &#123;</span><br><span class="line">	picture[i] = make([]uint8, XSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在作为一个分配，分成几行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Allocate the top-level slice, the same as before.</span><br><span class="line">picture := make([][]uint8, YSize) // One row per unit of y.</span><br><span class="line">// Allocate one large slice to hold all the pixels.</span><br><span class="line">pixels := make([]uint8, XSize*YSize) // Has type []uint8 even though picture is [][]uint8.</span><br><span class="line">// Loop over the rows, slicing each row from the front of the remaining pixels slice.</span><br><span class="line">for i := range picture &#123;</span><br><span class="line">	picture[i], pixels = pixels[:XSize], pixels[XSize:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map">1.8.7. Map</h3><p>映射是一种方便且强大的内置数据结构，它将一种类型（<em>键</em>）的值与另一种类型（<em>元素</em>或<em>值</em>）的<em>值相关联</em>。键可以是定义了相等运算符的任何类型，例如整数、浮点数和复数、字符串、指针、接口（只要动态类型支持相等）、结构和数组。切片不能用作映射键，因为它们没有定义相等性。像切片一样，映射保存对底层数据结构的引用。如果您将地图传递给更改地图内容的函数，则更改将在调用方中可见。</p>
<p>可以使用带有冒号分隔的键值对的常用复合文字语法构建映射，因此在初始化期间很容易构建它们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var timeZone = map[string]int&#123;</span><br><span class="line">    &quot;UTC&quot;:  0*60*60,</span><br><span class="line">    &quot;EST&quot;: -5*60*60,</span><br><span class="line">    &quot;CST&quot;: -6*60*60,</span><br><span class="line">    &quot;MST&quot;: -7*60*60,</span><br><span class="line">    &quot;PST&quot;: -8*60*60,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分配和获取映射值在语法上看起来就像对数组和切片执行相同的操作，只是索引不需要是整数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">offset := timeZone[&quot;EST&quot;]</span><br></pre></td></tr></table></figure>

<p>尝试使用映射中不存在的键获取映射值将返回映射中条目类型的零值。例如，如果映射包含整数，则查找不存在的键将返回<code>0</code>。集合可以实现为具有值类型的映射<code>bool</code>。将映射条目设置<code>true</code>为将值放入集合中，然后通过简单的索引对其进行测试。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attended := map[string]bool&#123;</span><br><span class="line">    &quot;Ann&quot;: true,</span><br><span class="line">    &quot;Joe&quot;: true,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if attended[person] &#123; // will be false if person is not in the map</span><br><span class="line">    fmt.Println(person, &quot;was at the meeting&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有时您需要将缺失的条目与零值区分开来。是否有条目<code>&quot;UTC&quot;</code> 或 0 因为它根本不在地图中？你可以用多重赋值的形式来区分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var seconds int</span><br><span class="line">var ok bool</span><br><span class="line">seconds, ok = timeZone[tz]</span><br></pre></td></tr></table></figure>

<p>出于显而易见的原因，这被称为“逗号确定”习语。在这个例子中，如果<code>tz</code>存在，<code>seconds</code> 将被适当地设置并且<code>ok</code>为真；如果不是， <code>seconds</code>将被设置为零并且<code>ok</code>为假。这是一个将它与一个很好的错误报告放在一起的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func offset(tz string) int &#123;</span><br><span class="line">    if seconds, ok := timeZone[tz]; ok &#123;</span><br><span class="line">        return seconds</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(&quot;unknown time zone:&quot;, tz)</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要在不担心实际值的情况下测试地图中是否存在，您可以使用空白标识符( <code>_</code>) 代替该值的常用变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_, present := timeZone[tz]</span><br></pre></td></tr></table></figure>

<p>要删除地图条目，请使用<code>delete</code> 内置函数，其参数是要删除的地图和键。即使密钥已经不在地图上，这样做也是安全的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete(timeZone, &quot;PDT&quot;)  // Now on Standard Time</span><br></pre></td></tr></table></figure>

<h3 id="打印">1.8.8. 打印</h3><p>Go 中的格式化打印使用类似于 C<code>printf</code> 家族的风格，但更丰富和更通用。该函数住在<code>fmt</code> 包装和有大写的名字：<code>fmt.Printf</code>，<code>fmt.Fprintf</code>， <code>fmt.Sprintf</code>等。字符串函数（<code>Sprintf</code>等）返回一个字符串而不是填充提供的缓冲区。</p>
<p>您不需要提供格式字符串。对于每一个<code>Printf</code>， <code>Fprintf</code>和<code>Sprintf</code>有另一种双功能，如<code>Print</code>和<code>Println</code>。这些函数不采用格式字符串，而是为每个参数生成默认格式。这些<code>Println</code>版本还在参数之间插入一个空格并在输出中附加一个换行符，而这些<code>Print</code>版本仅在两边的操作数都是字符串时才添加空格。在这个例子中，每一行产生相同的输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Printf(&quot;Hello %d\n&quot;, 23)</span><br><span class="line">fmt.Fprint(os.Stdout, &quot;Hello &quot;, 23, &quot;\n&quot;)</span><br><span class="line">fmt.Println(&quot;Hello&quot;, 23)</span><br><span class="line">fmt.Println(fmt.Sprint(&quot;Hello &quot;, 23))</span><br></pre></td></tr></table></figure>

<p>格式化打印函数<code>fmt.Fprint</code> 和友元将任何实现<code>io.Writer</code>接口的对象作为第一个参数；变量<code>os.Stdout</code> 和<code>os.Stderr</code>是熟悉的实例。</p>
<p>在这里，事情开始与 C 不同。首先，数字格式（例如<code>%d</code> 不带符号或大小的标志）；相反，打印例程使用参数的类型来决定这些属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x uint64 = 1&lt;&lt;64 - 1</span><br><span class="line">fmt.Printf(&quot;%d %x; %d %x\n&quot;, x, x, int64(x), int64(x))</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18446744073709551615 ffffffffffffffff; -1 -1</span><br></pre></td></tr></table></figure>

<p>如果你只想要默认的转换，比如整数的十进制，你可以使用笼统的格式<code>%v</code>（对于“值”）；结果是什么<code>Print</code>，并<code>Println</code>会产生。此外，该格式可以打印<em>任何</em>值，甚至是数组、切片、结构和映射。这是上一节中定义的时区地图的打印语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Printf(&quot;%v\n&quot;, timeZone)  // or just fmt.Println(timeZone)</span><br></pre></td></tr></table></figure>

<p>这给出了输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map[CST:-21600 EST:-18000 MST:-25200 PST:-28800 UTC:0]</span><br></pre></td></tr></table></figure>

<p>对于地图，<code>Printf</code>朋友按字典顺序对输出进行排序。</p>
<p>打印结构体时，修改后的格式会<code>%+v</code>用名称注释结构体的字段，对于任何值，替代格式会<code>%#v</code>以完整的 Go 语法打印值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type T struct &#123;</span><br><span class="line">    a int</span><br><span class="line">    b float64</span><br><span class="line">    c string</span><br><span class="line">&#125;</span><br><span class="line">t := &amp;T&#123; 7, -2.35, &quot;abc\tdef&quot; &#125;</span><br><span class="line">fmt.Printf(&quot;%v\n&quot;, t)</span><br><span class="line">fmt.Printf(&quot;%+v\n&quot;, t)</span><br><span class="line">fmt.Printf(&quot;%#v\n&quot;, t)</span><br><span class="line">fmt.Printf(&quot;%#v\n&quot;, timeZone)</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;&#123;7 -2.35 abc def&#125;</span><br><span class="line">&amp;&#123;a:7 b:-2.35 c:abc def&#125;</span><br><span class="line">&amp;main.T&#123;a:7, b:-2.35, c:&quot;abc\tdef&quot;&#125;</span><br><span class="line">map[string]int&#123;&quot;CST&quot;:-21600, &quot;EST&quot;:-18000, &quot;MST&quot;:-25200, &quot;PST&quot;:-28800, &quot;UTC&quot;:0&#125;</span><br></pre></td></tr></table></figure>

<p>（注意＆符号。）<code>%q</code>当应用于类型为<code>string</code>或的值时，也可以使用带引号的字符串格式<code>[]byte</code>。<code>%#q</code>如果可能，替代格式将使用反引号代替。（该<code>%q</code>格式也适用于整数和符文，生成单引号符文常量。）此外，<code>%x</code>适用于字符串、字节数组和字节切片以及整数，生成一个长的十六进制字符串，并在格式中使用空格（<code>% x</code>) 它在字节之间放置空格。</p>
<p>另一种方便的格式是<code>%T</code>，它打印值的<em>类型</em>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Printf(&quot;%T\n&quot;, timeZone)</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map[string]int</span><br></pre></td></tr></table></figure>

<p>如果要控制自定义类型的默认格式，只需定义一个带有<code>String() string</code>类型签名的方法。对于我们的简单类型<code>T</code>，可能看起来像这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (t *T) String() string &#123;</span><br><span class="line">    return fmt.Sprintf(&quot;%d/%g/%q&quot;, t.a, t.b, t.c)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%v\n&quot;, t)</span><br></pre></td></tr></table></figure>

<p>按格式打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7/-2.35/&quot;abc\tdef&quot;</span><br></pre></td></tr></table></figure>

<p>（如果您需要打印类型的<em>值</em><code>T</code>以及指向 的指针<code>T</code>，则 for 的接收器<code>String</code>必须是值类型；此示例使用指针，因为这对于结构类型更有效和更惯用。请参阅下面关于指针与值接收器的部分以了解更多信息。）</p>
<p>我们的<code>String</code>方法能够调用，<code>Sprintf</code>因为打印例程是完全可重入的并且可以用这种方式包装。然而，关于这种方法有一个重要的细节需要理解：不要<code>String</code>通过调用<code>Sprintf</code>的方式来构造一个方法 ，这种方式会<code>String</code> 无限期地重复出现在你的方法中。如果<code>Sprintf</code> 调用尝试将接收器直接打印为字符串，则可能会发生这种情况，而后者又会再次调用该方法。如本示例所示，这是一个常见且容易犯的错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type MyString string</span><br><span class="line"></span><br><span class="line">func (m MyString) String() string &#123;</span><br><span class="line">    return fmt.Sprintf(&quot;MyString=%s&quot;, m) // Error: will recur forever.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修复也很容易：将参数转换为基本字符串类型，它没有方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type MyString string</span><br><span class="line">func (m MyString) String() string &#123;</span><br><span class="line">    return fmt.Sprintf(&quot;MyString=%s&quot;, string(m)) // OK: note conversion.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在初始化部分，我们将看到另一种避免这种递归的技术。</p>
<p>另一种打印技术是将打印例程的参数直接传递给另一个这样的例程。的签名<code>Printf</code>使用<code>...interface&#123;&#125;</code> 其最终参数的类型来指定任意数量的参数（任意类型）可以出现在格式之后。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Printf(format string, v ...interface&#123;&#125;) (n int, err error) &#123;</span><br></pre></td></tr></table></figure>

<p>在函数内<code>Printf</code>，<code>v</code>就像一个类型的变量， <code>[]interface&#123;&#125;</code>但如果它被传递给另一个可变参数函数，它就像一个常规的参数列表。这是<code>log.Println</code>我们上面使用的函数的实现。它将其参数直接传递 <code>fmt.Sprintln</code>给实际格式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Println prints to the standard logger in the manner of fmt.Println.</span><br><span class="line">func Println(v ...interface&#123;&#125;) &#123;</span><br><span class="line">    std.Output(2, fmt.Sprintln(v...))  // Output takes parameters (int, string)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在嵌套调用中写<code>...</code>after告诉编译器将其视为参数列表；否则它只会作为单个切片参数传递 。<code>v``Sprintln``v``v</code></p>
<p>打印的内容比我们在这里介绍的还要多。有关详细信息，请参阅<code>godoc</code>包的文档<code>fmt</code>。</p>
<p>顺便说一句，<code>...</code>参数可以是特定类型的，例如<code>...int</code> 对于选择整数列表中最小者的 min 函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Min(a ...int) int &#123;</span><br><span class="line">    min := int(^uint(0) &gt;&gt; 1)  // largest int</span><br><span class="line">    for _, i := range a &#123;</span><br><span class="line">        if i &lt; min &#123;</span><br><span class="line">            min = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="追加">1.8.9. 追加</h3><p>现在我们有了解释<code>append</code>内置函数设计所需的缺失部分。的签名<code>append</code> 与我们<code>Append</code>上面的自定义函数不同。示意图是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func append(slice [] T , elements ... T ) [] T</span><br></pre></td></tr></table></figure>

<p>其中<em>T</em>是任何给定类型的占位符。您实际上无法在 Go 中编写类型<code>T</code> 由调用者确定的函数。这<code>append</code>就是内置的原因：它需要编译器的支持。</p>
<p>什么<code>append</code>是将元素附加到切片的末尾并返回结果。结果需要返回，因为与我们的手写一样<code>Append</code>，底层数组可能会改变。这个简单的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x := []int&#123;1,2,3&#125;</span><br><span class="line">x = 追加(x, 4, 5, 6)</span><br><span class="line">fmt.Println(x)</span><br></pre></td></tr></table></figure>

<p>打印<code>[1 2 3 4 5 6]</code>。所以<code>append</code>有点像<code>Printf</code>，收集任意数量的参数。</p>
<p>但是如果我们想做我们<code>Append</code>所做的并将切片附加到切片怎么办？简单：<code>...</code>在调用站点使用，就像我们在<code>Output</code>上面调用中所做的那样。这个片段产生与上面相同的输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x := []int&#123;1,2,3&#125;</span><br><span class="line">x = append(x, 4, 5, 6)</span><br><span class="line">fmt.Println(x)</span><br></pre></td></tr></table></figure>

<p>没有那个<code>...</code>，它就不会编译，因为类型是错误的；<code>y</code>不是 类型<code>int</code>。</p>
<h2 id="初始化">1.9. 初始化</h2><p>虽然从表面上看它与 C 或 C++ 中的初始化没有太大区别，但 Go 中的初始化功能更强大。可以在初始化期间构建复杂的结构，并且可以正确处理初始化对象之间，甚至不同包之间的排序问题。</p>
<h3 id="常数">1.9.1. 常数</h3><p>Go 中的常量就是——常量。它们是在编译时创建的，即使在函数中定义为局部变量，并且只能是数字、字符（符文）、字符串或布尔值。由于编译时限制，定义它们的表达式必须是可由编译器计算的常量表达式。例如， <code>1&lt;&lt;3</code>是一个常量表达式，而 <code>math.Sin(math.Pi/4)</code>不是因为函数调用<code>math.Sin</code>需要在运行时发生。</p>
<p>在 Go 中，枚举常量是使用<code>iota</code> 枚举器创建的。由于<code>iota</code>可以是表达式的一部分并且表达式可以隐式重复，因此很容易构建复杂的值集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type ByteSize float64</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">    _           = iota // ignore first value by assigning to blank identifier</span><br><span class="line">    KB ByteSize = 1 &lt;&lt; (10 * iota)</span><br><span class="line">    MB</span><br><span class="line">    GB</span><br><span class="line">    TB</span><br><span class="line">    PB</span><br><span class="line">    EB</span><br><span class="line">    ZB</span><br><span class="line">    YB</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>将方法附加<code>String</code>到任何用户定义的类型的能力使得任意值可以自动格式化以进行打印。尽管您会看到它最常应用于结构，但此技术对于标量类型也很有用，例如像<code>ByteSize</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (b ByteSize) String() string &#123;</span><br><span class="line">    switch &#123;</span><br><span class="line">    case b &gt;= YB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fYB&quot;, b/YB)</span><br><span class="line">    case b &gt;= ZB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fZB&quot;, b/ZB)</span><br><span class="line">    case b &gt;= EB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fEB&quot;, b/EB)</span><br><span class="line">    case b &gt;= PB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fPB&quot;, b/PB)</span><br><span class="line">    case b &gt;= TB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fTB&quot;, b/TB)</span><br><span class="line">    case b &gt;= GB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fGB&quot;, b/GB)</span><br><span class="line">    case b &gt;= MB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fMB&quot;, b/MB)</span><br><span class="line">    case b &gt;= KB:</span><br><span class="line">        return fmt.Sprintf(&quot;%.2fKB&quot;, b/KB)</span><br><span class="line">    &#125;</span><br><span class="line">    return fmt.Sprintf(&quot;%.2fB&quot;, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表达式<code>YB</code>打印为<code>1.00YB</code>，而<code>ByteSize(1e13)</code>打印为<code>9.09TB</code>。</p>
<p>这里使用<code>Sprintf</code> 来实现<code>ByteSize</code>的<code>String</code>方法是安全的（避免无限重复）不是因为转换而是因为它调用<code>Sprintf</code>with <code>%f</code>，它不是字符串格式：<code>Sprintf</code>只会在<code>String</code>需要字符串时调用该方法，并且<code>%f</code> 需要浮动 -点值。</p>
<h3 id="变量">1.9.2. 变量</h3><p>变量可以像常量一样初始化，但初始化器可以是在运行时计算的通用表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var (</span><br><span class="line">    home   = os.Getenv(&quot;HOME&quot;)</span><br><span class="line">    user   = os.Getenv(&quot;USER&quot;)</span><br><span class="line">    gopath = os.Getenv(&quot;GOPATH&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="初始化函数">1.9.3. 初始化函数</h3><p>最后，每个源文件都可以定义自己的 niladic<code>init</code>函数来设置所需的任何状态。（实际上每个文件可以有多个 <code>init</code>函数。） finally 的意思是 finally：<code>init</code>在包中的所有变量声明都评估了它们的初始值设定项之后调用，并且只有在所有导入的包都已初始化之后才评估它们。</p>
<p>除了不能表示为声明的初始化之外，<code>init</code>函数的一个常见用途是在真正执行开始之前验证或修复程序状态的正确性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func init() &#123;</span><br><span class="line">    if user == &quot;&quot; &#123;</span><br><span class="line">        log.Fatal(&quot;$USER not set&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    if home == &quot;&quot; &#123;</span><br><span class="line">        home = &quot;/home/&quot; + user</span><br><span class="line">    &#125;</span><br><span class="line">    if gopath == &quot;&quot; &#123;</span><br><span class="line">        gopath = home + &quot;/go&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    // gopath may be overridden by --gopath flag on command line.</span><br><span class="line">    flag.StringVar(&amp;gopath, &quot;gopath&quot;, gopath, &quot;override default GOPATH&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法">1.10. 方法</h2><h3 id="指针与值">1.10.1. 指针与值</h3><p>正如我们在 中看到的<code>ByteSize</code>，可以为任何命名类型定义方法（指针或接口除外）；接收者不必是一个结构体。</p>
<p>在上面对切片的讨论中，我们编写了一个<code>Append</code> 函数。我们可以将其定义为切片上的方法。为此，我们首先声明一个可以绑定方法的命名类型，然后使方法的接收器成为该类型的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type ByteSlice []byte</span><br><span class="line"></span><br><span class="line">func (slice ByteSlice) Append(data []byte) []byte &#123;</span><br><span class="line">    // Body exactly the same as the Append function defined above.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这仍然需要返回更新切片的方法。我们可以通过重新定义方法采取消除笨拙 <em>指针</em>到<code>ByteSlice</code>它的接收器，因此该方法可以覆盖调用者的切片。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (p *ByteSlice) Append(data []byte) &#123;</span><br><span class="line">    slice := *p</span><br><span class="line">    // Body as above, without the return.</span><br><span class="line">    *p = slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事实上，我们还可以做得更好。如果我们修改我们的函数，让它看起来像一个标准的<code>Write</code>方法，像这样，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (p *ByteSlice) Write(data []byte) (n int, err error) &#123;</span><br><span class="line">    slice := *p</span><br><span class="line">    // Again as above.</span><br><span class="line">    *p = slice</span><br><span class="line">    return len(data), nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么类型<code>*ByteSlice</code>满足标准接口 <code>io.Writer</code>，就方便了。例如，我们可以打印成一个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var b ByteSlice</span><br><span class="line">fmt.Fprintf(&amp;b, &quot;This hour has %d days\n&quot;, 7)</span><br></pre></td></tr></table></figure>

<p>我们传递 a 的地址，<code>ByteSlice</code> 因为只<code>*ByteSlice</code>满足<code>io.Writer</code>。关于接收者的指针与值的规则是值方法可以在指针和值上调用，但指针方法只能在指针上调用。</p>
<p>出现这个规则是因为指针方法可以修改接收者；在一个值上调用它们将导致该方法接收该值的副本，因此任何修改都将被丢弃。因此，该语言不允许这种错误。但是，有一个方便的例外。当值可寻址时，该语言会通过自动插入地址运算符来处理对值调用指针方法的常见情况。在我们的例子中，变量<code>b</code>是可寻址的，所以我们可以<code>Write</code>只用<code>b.Write</code>. 编译器会<code>(&amp;b).Write</code>为我们重写它。</p>
<p>顺便说一句，在<code>Write</code>字节切片上使用的想法是<code>bytes.Buffer</code>.</p>
<h2 id="接口和其他类型">1.11. 接口和其他类型</h2><h3 id="接口">1.11.1. 接口</h3><p>Go 中的接口提供了一种指定对象行为的方法：如果某些东西可以做到<em>这一点</em>，那么它就可以在<em>这里</em>使用 。我们已经看到了几个简单的例子；自定义打印机可以通过<code>String</code>方法实现，同时<code>Fprintf</code>可以通过方法生成任何内容的输出<code>Write</code>。只有一个或两个方法的接口在 Go 代码中很常见，并且通常被赋予一个从方法派生的名称，例如<code>io.Writer</code> 实现<code>Write</code>.</p>
<p>一个类型可以实现多个接口。例如，一个集合可以通过在包中的例程进行排序<code>sort</code>，如果它实现了 <code>sort.Interface</code>，其中包含<code>Len()</code>， <code>Less(i, j int) bool</code>以及<code>Swap(i, j int)</code>，它也可以有一个自定义的格式。在这个人为的例子中，<code>Sequence</code>两者都满足。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Sequence []int</span><br><span class="line"></span><br><span class="line">// Methods required by sort.Interface.</span><br><span class="line">func (s Sequence) Len() int &#123;</span><br><span class="line">    return len(s)</span><br><span class="line">&#125;</span><br><span class="line">func (s Sequence) Less(i, j int) bool &#123;</span><br><span class="line">    return s[i] &lt; s[j]</span><br><span class="line">&#125;</span><br><span class="line">func (s Sequence) Swap(i, j int) &#123;</span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Copy returns a copy of the Sequence.</span><br><span class="line">func (s Sequence) Copy() Sequence &#123;</span><br><span class="line">    copy := make(Sequence, 0, len(s))</span><br><span class="line">    return append(copy, s...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Method for printing - sorts the elements before printing.</span><br><span class="line">func (s Sequence) String() string &#123;</span><br><span class="line">    s = s.Copy() // Make a copy; don&#x27;t overwrite argument.</span><br><span class="line">    sort.Sort(s)</span><br><span class="line">    str := &quot;[&quot;</span><br><span class="line">    for i, elem := range s &#123; // Loop is O(N²); will fix that in next example.</span><br><span class="line">        if i &gt; 0 &#123;</span><br><span class="line">            str += &quot; &quot;</span><br><span class="line">        &#125;</span><br><span class="line">        str += fmt.Sprint(elem)</span><br><span class="line">    &#125;</span><br><span class="line">    return str + &quot;]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转化次数">1.11.2. 转化次数</h3><p>的<code>String</code>方法<code>Sequence</code>是重新创建<code>Sprint</code>已经为切片所做的工作。（它也有复杂度 O(N²)，这很差。）如果我们在调用 之前将 转换<code>Sequence</code>为普通的 <code>[]int</code>，我们可以分担（并加快速度）<code>Sprint</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (s Sequence) String() string &#123;</span><br><span class="line">    s = s.Copy()</span><br><span class="line">    sort.Sort(s)</span><br><span class="line">    return fmt.Sprint([]int(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方法是<code>Sprintf</code>从<code>String</code>方法安全调用的转换技术的另一个示例 。因为如果我们忽略类型名称，这两种类型（<code>Sequence</code>和<code>[]int</code>）是相同的，所以在它们之间进行转换是合法的。转换不会创建新值，它只是暂时充当现有值好像具有新类型一样。（还有其他合法的转换，例如从整数到浮点数，确实会创建一个新值。）</p>
<p>Go 程序中的一个习惯用法是转换表达式的类型以访问不同的方法集。例如，我们可以使用现有类型<code>sort.IntSlice</code>将整个示例简化为：，我们不再<code>Sequence</code>实现多个接口（排序和打印），而是使用将数据项转换为多种类型（<code>Sequence</code>,<code>sort.IntSlice</code> 和<code>[]int</code>）的能力，每种类型都完成部分工作。这在实践中更不寻常，但可能有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Sequence []int</span><br><span class="line"></span><br><span class="line">// Method for printing - sorts the elements before printing</span><br><span class="line">func (s Sequence) String() string &#123;</span><br><span class="line">    s = s.Copy()</span><br><span class="line">    sort.IntSlice(s).Sort()</span><br><span class="line">    return fmt.Sprint([]int(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口转换和类型断言">1.11.3. 接口转换和类型断言</h3><p>类型开关是一种转换形式：它们采用一个接口，对于开关中的每个 case，在某种意义上将其转换为那个 case 的类型。下面是代码如何<code>fmt.Printf</code>使用类型开关将值转换为字符串的简化版本。如果它已经是一个字符串，我们想要接口保存的实际字符串值，而如果它有一个 <code>String</code>方法，我们想要调用该方法的结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Stringer interface &#123;</span><br><span class="line">    String() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var value interface&#123;&#125; // Value provided by caller.</span><br><span class="line">switch str := value.(type) &#123;</span><br><span class="line">case string:</span><br><span class="line">    return str</span><br><span class="line">case Stringer:</span><br><span class="line">    return str.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一种情况找到了一个具体的值；第二个将接口转换为另一个接口。以这种方式混合类型非常好。</p>
<p>如果我们只关心一种类型怎么办？如果我们知道该值包含 a<code>string</code> 而我们只想提取它？one-case 类型 switch 可以，但<em>类型 assertion 也可以</em>。类型断言采用接口值并从中提取指定显式类型的值。语法借用了打开类型开关的子句，但使用显式类型而不是<code>type</code>关键字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value.(typeName)</span><br></pre></td></tr></table></figure>

<p>结果是一个静态类型的新值<code>typeName</code>。该类型必须是接口持有的具体类型，或者值可以转换为的第二个接口类型。要提取我们知道在值中的字符串，我们可以这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str := value.(string)</span><br></pre></td></tr></table></figure>

<p>但如果结果证明该值不包含字符串，则程序将因运行时错误而崩溃。为了防止出现这种情况，请使用“逗号，好的”习语来安全地测试该值是否为字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str, ok := value.(string)</span><br><span class="line">if ok &#123;</span><br><span class="line">    fmt.Printf(&quot;string value is: %q\n&quot;, str)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    fmt.Printf(&quot;value is not a string\n&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果类型断言失败，<code>str</code>它将仍然存在并且是字符串类型，但它将具有零值，一个空字符串。</p>
<p>作为功能的说明，这里有一个<code>if</code>-<code>else</code> 语句，它等效于打开此部分的类型开关。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if str, ok := value.(string); ok &#123;</span><br><span class="line">    return str</span><br><span class="line">&#125; else if str, ok := value.(Stringer); ok &#123;</span><br><span class="line">    return str.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="概论">1.11.4. 概论</h3><p>如果一个类型只是为了实现一个接口而存在，并且永远不会在该接口之外导出方法，则不需要导出该类型本身。仅导出接口可以清楚地表明该值除了接口中描述的之外没有其他有趣的行为。它还避免了对通用方法的每个实例重复文档的需要。</p>
<p>在这种情况下，构造函数应该返回一个接口值而不是实现类型。例如，在哈希库中，<code>crc32.NewIEEE</code>和 都<code>adler32.New</code> 返回接口类型<code>hash.Hash32</code>。在 Go 程序中用 CRC-32 算法代替 Adler-32 只需要改变构造函数调用；其余代码不受算法变化的影响。</p>
<p>类似的方法允许将各种<code>crypto</code>包中的流密码算法与它们链接在一起的分组密码分开。包中的<code>Block</code>接口<code>crypto/cipher</code>指定块密码的行为，它提供单个数据块的加密。然后，通过与<code>bufio</code>包的类比，实现该接口的密码包可用于构造流密码，由该<code>Stream</code>接口表示，而无需了解块加密的细节。</p>
<p>该 <code>crypto/cipher</code>接口是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Block interface &#123;</span><br><span class="line">    BlockSize() int</span><br><span class="line">    Encrypt(dst, src []byte)</span><br><span class="line">    Decrypt(dst, src []byte)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Stream interface &#123;</span><br><span class="line">    XORKeyStream(dst, src []byte)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是计数器模式 (CTR) 流的定义，它将块密码转换为流密码；请注意，块密码的详细信息被抽象掉了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// NewCTR returns a Stream that encrypts/decrypts using the given Block in</span><br><span class="line">// counter mode. The length of iv must be the same as the Block&#x27;s block size.</span><br><span class="line">func NewCTR(block Block, iv []byte) Stream</span><br></pre></td></tr></table></figure>

<p><code>NewCTR</code>不仅适用于一种特定的加密算法和数据源，还适用于<code>Block</code>接口的任何实现和任何 <code>Stream</code>. 因为它们返回接口值，所以用其他加密模式替换 CTR 加密是一种本地化的变化。必须编辑构造函数调用，但由于周围的代码必须仅将结果视为<code>Stream</code>，因此不会注意到差异。</p>
<h3 id="接口和方法">1.11.5. 接口和方法</h3><p>由于几乎任何东西都可以附加方法，因此几乎任何东西都可以满足接口。一个说明性的例子是在<code>http</code> 包中，它定义了<code>Handler</code>接口。任何实现的对象<code>Handler</code>都可以为 HTTP 请求提供服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Handler interface &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ResponseWriter</code>本身是一个接口，它提供对将响应返回给客户端所需的方法的访问。这些方法包括标准<code>Write</code>方法，因此 <code>http.ResponseWriter</code>可以在任何可以使用的地方使用 an <code>io.Writer</code> 。<code>Request</code>是一个包含来自客户端的请求的解析表示的结构。</p>
<p>为简洁起见，让我们忽略 POST 并假设 HTTP 请求总是 GET；这种简化不会影响处理程序的设置方式。这是一个处理程序的简单实现，用于计算页面被访问的次数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Simple counter server.</span><br><span class="line">type Counter struct &#123;</span><br><span class="line">    n int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    ctr.n++</span><br><span class="line">    fmt.Fprintf(w, &quot;counter = %d\n&quot;, ctr.n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（与我们的主题保持一致，注意如何<code>Fprintf</code>打印到 <code>http.ResponseWriter</code>.）在真实服务器中，访问<code>ctr.n</code>需要防止并发访问。有关建议，请参阅<code>sync</code>和<code>atomic</code>包。</p>
<p>作为参考，这里是如何将这样的服务器附加到 URL 树上的节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;net/http&quot;</span><br><span class="line">...</span><br><span class="line">ctr := new(Counter)</span><br><span class="line">http.Handle(&quot;/counter&quot;, ctr)</span><br></pre></td></tr></table></figure>

<p>但是为什么要创建<code>Counter</code>一个结构体呢？一个整数就是所需要的。（接收者需要是一个指针，以便调用者可以看到增量。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Simpler counter server.</span><br><span class="line">type Counter int</span><br><span class="line"></span><br><span class="line">func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    *ctr++</span><br><span class="line">    fmt.Fprintf(w, &quot;counter = %d\n&quot;, *ctr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您的程序有一些需要通知页面已被访问的内部状态怎么办？将频道绑定到网页。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// A channel that sends a notification on each visit.</span><br><span class="line">// (Probably want the channel to be buffered.)</span><br><span class="line">type Chan chan *http.Request</span><br><span class="line"></span><br><span class="line">func (ch Chan) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    ch &lt;- req</span><br><span class="line">    fmt.Fprint(w, &quot;notification sent&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，假设我们想显示<code>/args</code>调用服务器二进制文件时使用的参数。编写一个函数来打印参数很容易。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func ArgServer() &#123;</span><br><span class="line">    fmt.Println(os.Args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们如何将其转换为 HTTP 服务器？我们可以创建<code>ArgServer</code> 一个我们忽略其值的某种类型的方法，但有一种更简洁的方法。由于我们可以为除指针和接口之外的任何类型定义方法，因此我们可以为函数编写方法。该<code>http</code>包包含以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// The HandlerFunc type is an adapter to allow the use of</span><br><span class="line">// ordinary functions as HTTP handlers.  If f is a function</span><br><span class="line">// with the appropriate signature, HandlerFunc(f) is a</span><br><span class="line">// Handler object that calls f.</span><br><span class="line">type HandlerFunc func(ResponseWriter, *Request)</span><br><span class="line"></span><br><span class="line">// ServeHTTP calls f(w, req).</span><br><span class="line">func (f HandlerFunc) ServeHTTP(w ResponseWriter, req *Request) &#123;</span><br><span class="line">    f(w, req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HandlerFunc</code>是带有方法的类型<code>ServeHTTP</code>，因此该类型的值可以为 HTTP 请求提供服务。看方法的实现：接收者是一个函数，<code>f</code>，方法调用<code>f</code>。这可能看起来很奇怪，但它与接收者是一个通道和在通道上发送的方法并没有什么不同。</p>
<p>为了做成<code>ArgServer</code>一个 HTTP 服务器，我们首先修改它以获得正确的签名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Argument server.</span><br><span class="line">func ArgServer(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    fmt.Fprintln(w, os.Args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ArgServer</code>现在有相同的签名<code>HandlerFunc</code>，因此它可以被转换成该类型来访问它的方法，就像我们转换<code>Sequence</code>到<code>IntSlice</code> 访问<code>IntSlice.Sort</code>。设置它的代码很简洁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.Handle(&quot;/args&quot;, http.HandlerFunc(ArgServer))</span><br></pre></td></tr></table></figure>

<p>当有人访问该页面时<code>/args</code>，安装在该页面上的处理程序具有值<code>ArgServer</code> 和类型<code>HandlerFunc</code>。HTTP 服务器将调用该<code>ServeHTTP</code> 类型的方法，<code>ArgServer</code>作为接收方，接收方将依次调用 <code>ArgServer</code>（通过<code>f(w, req)</code> 内部调用<code>HandlerFunc.ServeHTTP</code>）。然后将显示参数。</p>
<p>在本节中，我们从一个结构体、一个整数、一个通道和一个函数创建了一个 HTTP 服务器，所有这一切都是因为接口只是一组方法，可以为（几乎）任何类型定义。</p>
<h2 id="空白标识符">1.12. 空白标识符</h2><p>我们已经在<code>for</code> <code>range</code>loops 和maps上下文中多次提到了空白标识符 。可以使用任何类型的任何值分配或声明空白标识符，并无害地丢弃该值。这有点像写入 Unix<code>/dev/null</code>文件：它代表一个只写值，用作占位符，其中需要变量但实际值无关紧要。它的用途超出了我们已经见过的用途。</p>
<h3 id="多重赋值中的空白标识符">1.12.1. 多重赋值中的空白标识符</h3><p>在<code>for</code> <code>range</code>循环中使用空白标识符是一般情况的特例：多重赋值。</p>
<p>如果赋值需要左侧的多个值，但其中一个值不会被程序使用，则赋值左侧的空白标识符可避免创建虚拟变量的需要，并明确表示该值将被丢弃。例如，当调用一个函数返回一个值和一个错误，但只有错误是重要的时，使用空白标识符来丢弃不相关的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if _, err := os.Stat(path); os.IsNotExist(err) &#123;</span><br><span class="line">	fmt.Printf(&quot;%s does not exist\n&quot;, path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有时，您会看到为了忽略错误而丢弃错误值的代码；这是可怕的做法。始终检查错误返回；提供它们是有原因的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Bad! This code will crash if path does not exist.</span><br><span class="line">fi, _ := os.Stat(path)</span><br><span class="line">if fi.IsDir() &#123;</span><br><span class="line">    fmt.Printf(&quot;%s is a directory\n&quot;, path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="未使用的导入和变量">1.12.2. 未使用的导入和变量</h3><p>导入包或声明变量而不使用它是错误的。未使用的导入会使程序膨胀并且编译速度变慢，而初始化但未使用的变量至少是一种浪费的计算，并且可能表明存在更大的错误。然而，当程序处于积极开发状态时，经常会出现未使用的导入和变量，删除它们只是为了让编译继续进行，只是为了以后再次需要它们会很烦人。空白标识符提供了一种解决方法。</p>
<p>这个写了一半的程序有两个未使用的导入（<code>fmt</code>和<code>io</code>）和一个未使用的变量（<code>fd</code>），所以它不会编译，但最好看看到目前为止的代码是否正确。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;io&quot;</span><br><span class="line">    &quot;log&quot;</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fd, err := os.Open(&quot;test.go&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    // TODO: use fd.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要消除对未使用的导入的抱怨，请使用空白标识符来引用导入包中的符号。类似地，将未使用的变量分配给<code>fd</code> 空白标识符将使未使用的变量错误消失。该版本的程序确实可以编译。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;io&quot;</span><br><span class="line">    &quot;log&quot;</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var _ = fmt.Printf // For debugging; delete when done.</span><br><span class="line">var _ io.Reader    // For debugging; delete when done.</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fd, err := os.Open(&quot;test.go&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    // TODO: use fd.</span><br><span class="line">    _ = fd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照惯例，用于消除导入错误的全局声明应该在导入之后立即出现并进行注释，以便于找到它们并提醒以后进行清理。</p>
<h3 id="导入副作用">1.12.3. 导入副作用</h3><p>最终应使用或删除 类似<code>fmt</code>或<code>io</code>在前面的示例中未使用的导入：空白分配将代码标识为正在进行的工作。但有时导入一个包只是为了它的副作用是有用的，而没有任何明确的使用。例如，在其<code>init</code>功能期间，<code>net/http/pprof</code> 包注册提供调试信息的 HTTP 处理程序。它有一个导出的 API，但大多数客户端只需要处理程序注册并通过网页访问数据。要仅为其副作用导入包，请将包重命名为空白标识符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import _ &quot;net/http/pprof&quot;</span><br></pre></td></tr></table></figure>

<p>这种导入形式清楚地表明该包是为了它的副作用而被导入的，因为该包没有其他可能的用途：在这个文件中，它没有名称。（如果是这样，而且我们没有使用该名称，编译器将拒绝该程序。）</p>
<h3 id="接口检查">1.12.4. 接口检查</h3><p>正如我们在上面对接口的讨论中看到的，一个类型不需要明确声明它实现了一个接口。相反，类型仅通过实现接口的方法来实现接口。实际上，大多数接口转换都是静态的，因此在编译时进行检查。例如，将 an 传递<code>*os.File</code>给期望 an 的函数<code>io.Reader</code>将不会编译，除非 <code>*os.File</code>实现该<code>io.Reader</code>接口。</p>
<p>但是，某些接口检查确实在运行时发生。一个实例在<code>encoding/json</code> 包中，它定义了一个<code>Marshaler</code> 接口。当 JSON 编码器接收到实现该接口的值时，编码器调用该值的封送处理方法将其转换为 JSON，而不是执行标准转换。编码器在运行时使用如下类型断言检查此属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m, ok := val.(json.Marshaler)</span><br></pre></td></tr></table></figure>

<p>如果只需要询问类型是否实现了接口，而不实际使用接口本身，也许作为错误检查的一部分，请使用空白标识符来忽略类型断言的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if _, ok := val.(json.Marshaler); ok &#123;</span><br><span class="line">    fmt.Printf(&quot;value %v of type %T implements json.Marshaler\n&quot;, val, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现这种情况的一个地方是当需要在实现类型的包中保证它实际满足接口时。如果一个类型——例如—— <code>json.RawMessage</code>需要一个自定义的 JSON 表示，它应该实现 <code>json.Marshaler</code>，但没有静态转换会导致编译器自动验证这一点。如果类型无意中未能满足接口，JSON 编码器仍然可以工作，但不会使用自定义实现。为了保证实现的正确性，可以在包中使用使用空白标识符的全局声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _ json.Marshaler = (*RawMessage)(nil)</span><br></pre></td></tr></table></figure>

<p>在这个声明中，涉及的转换分配 <code>*RawMessage</code>到<code>Marshaler</code> 需要<code>*RawMessage</code>工具<code>Marshaler</code>，并且该属性将在编译时进行检查。如果<code>json.Marshaler</code>接口发生变化，这个包将不再编译，我们会注意到它需要更新。</p>
<p>此构造中出现的空白标识符表明该声明仅用于类型检查，而不是创建变量。但是，不要对满足接口的每种类型都这样做。按照惯例，只有在代码中不存在静态转换时才使用此类声明，这种情况很少见。</p>
<h2 id="嵌入">1.13. 嵌入</h2><p>Go 没有提供典型的、类型驱动的子类化概念，但它确实有能力通过在结构或接口中<em>嵌入</em>类型来“借用”实现的片段。</p>
<p>界面嵌入非常简单。我们之前提到过<code>io.Reader</code>和<code>io.Writer</code>接口；这是他们的定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Reader interface &#123;</span><br><span class="line">    Read(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Writer interface &#123;</span><br><span class="line">    Write(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该<code>io</code>包还导出了几个其他接口，这些接口指定了可以实现多个此类方法的对象。例如，有<code>io.ReadWriter</code>一个包含<code>Read</code>和的接口<code>Write</code>。我们可以<code>io.ReadWriter</code>通过显式列出这两个方法来指定，但是嵌入这两个接口以形成新的接口更容易，更令人回味，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ReadWriter is the interface that combines the Reader and Writer interfaces.</span><br><span class="line">type ReadWriter interface &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是它的样子：A<code>ReadWriter</code>可以做 a<code>Reader</code>所做的<em>和</em>a<code>Writer</code> 所做的；它是嵌入式接口的联合。只有接口可以嵌入到接口中。</p>
<p>同样的基本思想适用于结构，但具有更深远的影响。所述<code>bufio</code>封装具有两个结构类型， <code>bufio.Reader</code>并且<code>bufio.Writer</code>，其中每个过程器具从包的类似接口的 <code>io</code>。并且<code>bufio</code>还实现了一个缓冲的读取器/写入器，它通过使用嵌入将读取器和写入器组合到一个结构中来实现：它列出了结构中的类型但不给它们字段名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ReadWriter stores pointers to a Reader and a Writer.</span><br><span class="line">// It implements io.ReadWriter.</span><br><span class="line">type ReadWriter struct &#123;</span><br><span class="line">    *Reader  // *bufio.Reader</span><br><span class="line">    *Writer  // *bufio.Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嵌入的元素是指向结构的指针，当然在使用之前必须初始化为指向有效的结构。该<code>ReadWriter</code>结构可以写成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type ReadWriter struct &#123;</span><br><span class="line">    reader *Reader</span><br><span class="line">    writer *Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是为了提升字段的方法并满足<code>io</code>接口，我们还需要提供转发方法，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (rw *ReadWriter) Read(p []byte) (n int, err error) &#123;</span><br><span class="line">    return rw.reader.Read(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过直接嵌入结构，我们避免了这种簿记。嵌入类型的方法是免费出现的，这意味着<code>bufio.ReadWriter</code> 不仅有<code>bufio.Reader</code>and的方法，而且<code>bufio.Writer</code>满足所有三个接口：<code>io.Reader</code>, <code>io.Writer</code>, 和 <code>io.ReadWriter</code>。</p>
<p>嵌入与子类化有一个重要的区别。当我们嵌入一个类型时，该类型的方法成为外部类型的方法，但是当它们被调用时，方法的接收者是内部类型，而不是外部类型。在我们的例子中，当a的<code>Read</code>方法<code>bufio.ReadWriter</code>被调用时，和上面写的转发方法的效果完全一样；接收者是 的<code>reader</code>字段，而<code>ReadWriter</code>不是 <code>ReadWriter</code>本身。</p>
<p>嵌入也可以是一种简单的便利。此示例显示了一个嵌入的字段，旁边是一个常规的命名字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Job struct &#123;</span><br><span class="line">    Command string</span><br><span class="line">    *log.Logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该<code>Job</code>类型现在有<code>Print</code>，<code>Printf</code>，<code>Println</code> 和其他方法<code>*log.Logger</code>。<code>Logger</code> 当然，我们可以给a 字段名称，但没有必要这样做。现在，一旦初始化，我们就可以登录到<code>Job</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">job.Println(&quot;starting now...&quot;)</span><br></pre></td></tr></table></figure>

<p>该<code>Logger</code>是有规律场<code>Job</code>结构，所以我们可以用通常的方法进行初始化的构造函数中进行<code>Job</code>，这样，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func NewJob(command string, logger *log.Logger) *Job &#123;</span><br><span class="line">    return &amp;Job&#123;command, logger&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或使用复合文字，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">job := &amp;Job&#123;command, log.New(os.Stderr, &quot;Job: &quot;, log.Ldate)&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们需要直接引用一个嵌入的字段，忽略包限定符的字段的类型名称作为字段名称，就像在<code>Read</code>我们的<code>ReadWriter</code>结构体的方法中一样。在这里，如果我们需要访问 <code>*log.Logger</code>一个的<code>Job</code>变量<code>job</code>，我们会写<code>job.Logger</code>，如果我们想要改进的方法，这将是有益的<code>Logger</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (job *Job) Printf(format string, args ...interface&#123;&#125;) &#123;</span><br><span class="line">    job.Logger.Printf(&quot;%q: %s&quot;, job.Command, fmt.Sprintf(format, args...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嵌入类型引入了名称冲突的问题，但解决它们的规则很简单。首先，字段或方法在类型的更深层嵌套部分<code>X</code>隐藏任何其他项目<code>X</code>。如果<code>log.Logger</code>包含名为 的字段或方法<code>Command</code>，则 的<code>Command</code>字段<code>Job</code>将支配它。</p>
<p>其次，如果同名出现在同一个嵌套层次，通常是错误的；<code>log.Logger</code>如果<code>Job</code>结构包含另一个名为 的字段或方法，则嵌入将是错误的<code>Logger</code>。但是，如果在类型定义之外的程序中从未提到过重名，那也没关系。此限定提供了一些防止对从外部嵌入的类型进行更改的保护；如果添加的字段与另一个子类型中的另一个字段冲突，如果这两个字段都没有使用过，则没有问题。</p>
<h2 id="并发">1.14. 并发</h2><h3 id="通过交流分享">1.14.1. 通过交流分享</h3><p>并发编程是一个很大的话题，这里只讨论一些 Go 特定的亮点。</p>
<p>由于实现对共享变量的正确访问所需的微妙之处，许多环境中的并发编程变得困难。Go 鼓励一种不同的方法，在这种方法中，共享值在通道上传递，实际上，从不由单独的执行线程主动共享。在任何给定时间，只有一个 goroutine 可以访问该值。按照设计，不会发生数据竞争。为了鼓励这种思维方式，我们将其简化为一个口号：</p>
<blockquote>
<p>不要通过共享内存进行通信；相反，通过通信共享内存。</p>
</blockquote>
<p>这种方法可能太过分了。例如，最好通过在整数变量周围放置互斥锁来完成引用计数。但作为一种高级方法，使用通道来控制访问可以更轻松地编写清晰、正确的程序。</p>
<p>考虑此模型的一种方法是考虑在一个 CPU 上运行的典型单线程程序。它不需要同步原语。现在运行另一个这样的实例；它也不需要同步。现在让这两个人交流；如果通信是同步器，则仍然不需要其他同步。例如，Unix 管道就非常适合这个模型。尽管 Go 的并发方法起源于 Hoare 的 Communicating Sequential Processes (CSP)，但它也可以被视为 Unix 管道的类型安全泛化。</p>
<h3 id="协程">1.14.2. 协程</h3><p>它们被称为<em>goroutines</em>是因为现有的术语——线程、协程、进程等——传达了不准确的内涵。goroutine 有一个简单的模型：它是一个与同一地址空间中的其他 goroutine 并发执行的函数。它是轻量级的，成本比分配堆栈空间多一点。并且堆栈开始时很小，因此它们很便宜，并且可以通过根据需要分配（和释放）堆存储来增长。</p>
<p>Goroutines 被多路复用到多个 OS 线程上，所以如果一个应该阻塞，例如在等待 I/O 时，其他人继续运行。他们的设计隐藏了线程创建和管理的许多复杂性。</p>
<p>使用<code>go</code> 关键字为函数或方法调用添加前缀以在新的 goroutine 中运行调用。当调用完成时，goroutine 静默退出。（效果类似于 Unix shell 的<code>&amp;</code>在后台运行命令的 符号。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go list.Sort() // 同时运行 list.Sort; 不要等它。</span><br></pre></td></tr></table></figure>

<p>函数文字在 goroutine 调用中很方便。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Announce(message string, delay time.Duration) &#123;</span><br><span class="line">    go func() &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(message)</span><br><span class="line">    &#125;()  // Note the parentheses - must call the function.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Go 中，函数文字是闭包：实现确保函数引用的变量只要它们处于活动状态就可以存活。</p>
<p>这些示例不太实用，因为这些函数无法发出完成信号。为此，我们需要渠道。</p>
<h3 id="Channel">1.14.3. Channel</h3><p>与映射一样，通道分配有<code>make</code>，结果值充当对底层数据结构的引用。如果提供了一个可选的整数参数，它会设置通道的缓冲区大小。对于无缓冲或同步通道，默认值为零。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ci := make(chan int) // 无缓冲的整数通道</span><br><span class="line">cj := make(chan int, 0) // 无缓冲的整数通道</span><br><span class="line">cs := make(chan *os.File, 100) // 指向文件的指针的缓冲通道</span><br></pre></td></tr></table></figure>

<p>无缓冲通道将通信（值的交换）与同步相结合，确保两个计算（goroutine）处于已知状态。</p>
<p>有很多使用频道的好习语。这是让我们开始的一个。在上一节中，我们在后台启动了排序。通道可以允许启动 goroutine 等待排序完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c := make(chan int)  // Allocate a channel.</span><br><span class="line">// Start the sort in a goroutine; when it completes, signal on the channel.</span><br><span class="line">go func() &#123;</span><br><span class="line">    list.Sort()</span><br><span class="line">    c &lt;- 1  // Send a signal; value does not matter.</span><br><span class="line">&#125;()</span><br><span class="line">doSomethingForAWhile()</span><br><span class="line">&lt;-c   // Wait for sort to finish; discard sent value.</span><br></pre></td></tr></table></figure>

<p>接收器总是阻塞直到有数据要接收。如果通道未缓冲，则发送方会阻塞，直到接收方收到该值。如果通道有缓冲区，则发送方只会阻塞，直到值被复制到缓冲区；如果缓冲区已满，这意味着等待某个接收器检索到一个值。</p>
<p>缓冲通道可以像信号量一样使用，例如限制吞吐量。在这个例子中，传入的请求被传递到<code>handle</code>，它向通道发送一个值，处理请求，然后从通道接收一个值，为下一个消费者准备“信号量”。通道缓冲区的容量将同时调用的数量限制为<code>process</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var sem = make(chan int, MaxOutstanding)</span><br><span class="line"></span><br><span class="line">func handle(r *Request) &#123;</span><br><span class="line">    sem &lt;- 1    // Wait for active queue to drain.</span><br><span class="line">    process(r)  // May take a long time.</span><br><span class="line">    &lt;-sem       // Done; enable next request to run.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Serve(queue chan *Request) &#123;</span><br><span class="line">    for &#123;</span><br><span class="line">        req := &lt;-queue</span><br><span class="line">        go handle(req)  // Don&#x27;t wait for handle to finish.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦<code>MaxOutstanding</code>处理程序正在执行<code>process</code>，任何更多将阻止尝试发送到已填充的通道缓冲区，直到现有处理程序之一完成并从缓冲区接收。</p>
<p>但是，这种设计有一个问题：<code>Serve</code> 为每个传入的请求创建一个新的 goroutine，即使只有<code>MaxOutstanding</code> 它们中的一个可以在任何时候运行。因此，如果请求来得太快，程序可能会消耗无限资源。我们可以通过改变<code>Serve</code>goroutine 的创建来解决这个缺陷。这是一个明显的解决方案，但请注意它有一个错误，我们将在随后修复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Serve(queue chan *Request) &#123;</span><br><span class="line">    for req := range queue &#123;</span><br><span class="line">        sem &lt;- 1</span><br><span class="line">        go func() &#123;</span><br><span class="line">            process(req) // Buggy; see explanation below.</span><br><span class="line">            &lt;-sem</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误在于，在 Go<code>for</code>循环中，每次迭代都会重用循环变量，因此该<code>req</code> 变量在所有 goroutine 之间共享。那不是我们想要的。我们需要确保<code>req</code>每个 goroutine 都是独一无二的。这是一种方法，将 的值<code>req</code>作为参数传递给 goroutine 中的闭包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Serve(queue chan *Request) &#123;</span><br><span class="line">    for req := range queue &#123;</span><br><span class="line">        sem &lt;- 1</span><br><span class="line">        go func(req *Request) &#123;</span><br><span class="line">            process(req)</span><br><span class="line">            &lt;-sem</span><br><span class="line">        &#125;(req)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将此版本与前一个版本进行比较，以查看闭包声明和运行方式的不同之处。另一种解决方案是创建一个同名的新变量，如下例所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Serve(queue chan *Request) &#123;</span><br><span class="line">    for req := range queue &#123;</span><br><span class="line">        req := req // Create new instance of req for the goroutine.</span><br><span class="line">        sem &lt;- 1</span><br><span class="line">        go func() &#123;</span><br><span class="line">            process(req)</span><br><span class="line">            &lt;-sem</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写起来可能有点奇怪</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">req := req</span><br></pre></td></tr></table></figure>

<p>但在 Go 中这样做是合法和惯用的。你会得到一个同名变量的新版本，故意在本地隐藏循环变量，但每个 goroutine 都是唯一的。</p>
<p>回到编写服务器的一般问题，另一种很好地管理资源的方法是启动固定数量的<code>handle</code>goroutines，全部从请求通道读取。goroutine 的数量限制了同时调用的数量<code>process</code>。此<code>Serve</code>函数还接受一个通道，在该通道上它将被告知退出；启动 goroutines 后，它会阻止从该通道接收。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func handle(queue chan *Request) &#123;</span><br><span class="line">    for r := range queue &#123;</span><br><span class="line">        process(r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Serve(clientRequests chan *Request, quit chan bool) &#123;</span><br><span class="line">    // Start handlers</span><br><span class="line">    for i := 0; i &lt; MaxOutstanding; i++ &#123;</span><br><span class="line">        go handle(clientRequests)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;-quit  // Wait to be told to exit.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Channels-of-channels">1.14.4. Channels of channels</h3><p>Go 最重要的特性之一是通道是一流的值，可以像任何其他值一样分配和传递。此属性的一个常见用途是实现安全的并行解复用。</p>
<p>在上一节的示例中，<code>handle</code>是一个理想化的请求处理程序，但我们没有定义它正在处理的类型。如果该类型包含要回复的通道，则每个客户端都可以提供自己的答案路径。这是 type 的示意图定义<code>Request</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Request struct &#123;</span><br><span class="line">    args        []int</span><br><span class="line">    f           func([]int) int</span><br><span class="line">    resultChan  chan int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端提供一个函数及其参数，以及请求对象内的一个通道，用于接收答案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func sum(a []int) (s int) &#123;</span><br><span class="line">    for _, v := range a &#123;</span><br><span class="line">        s += v</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request := &amp;Request&#123;[]int&#123;3, 4, 5&#125;, sum, make(chan int)&#125;</span><br><span class="line">// Send request</span><br><span class="line">clientRequests &lt;- request</span><br><span class="line">// Wait for response.</span><br><span class="line">fmt.Printf(&quot;answer: %d\n&quot;, &lt;-request.resultChan)</span><br></pre></td></tr></table></figure>

<p>在服务器端，处理程序函数是唯一改变的东西。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func handle(queue chan *Request) &#123;</span><br><span class="line">    for req := range queue &#123;</span><br><span class="line">        req.resultChan &lt;- req.f(req.args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然还有很多工作要做才能使它变得现实，但这段代码是一个限速、并行、非阻塞 RPC 系统的框架，而且看不到互斥锁。</p>
<h3 id="并行化">1.14.5. 并行化</h3><p>这些想法的另一个应用是跨多个 CPU 内核并行计算。如果计算可以分解为可以独立执行的单独部分，则可以并行化，并在每个部分完成时通过一个通道发出信号。</p>
<p>假设我们有一个对项目向量执行的昂贵操作，并且每个项目的操作值是独立的，如这个理想化的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Vector []float64</span><br><span class="line"></span><br><span class="line">// Apply the operation to v[i], v[i+1] ... up to v[n-1].</span><br><span class="line">func (v Vector) DoSome(i, n int, u Vector, c chan int) &#123;</span><br><span class="line">    for ; i &lt; n; i++ &#123;</span><br><span class="line">        v[i] += u.Op(v[i])</span><br><span class="line">    &#125;</span><br><span class="line">    c &lt;- 1    // signal that this piece is done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在一个循环中独立启动这些部分，每个 CPU 一个。它们可以按任何顺序完成，但这并不重要；我们只是通过在启动所有 goroutine 后排空通道来计算完成信号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numCPU = 4 // number of CPU cores</span><br><span class="line"></span><br><span class="line">func (v Vector) DoAll(u Vector) &#123;</span><br><span class="line">    c := make(chan int, numCPU)  // Buffering optional but sensible.</span><br><span class="line">    for i := 0; i &lt; numCPU; i++ &#123;</span><br><span class="line">        go v.DoSome(i*len(v)/numCPU, (i+1)*len(v)/numCPU, u, c)</span><br><span class="line">    &#125;</span><br><span class="line">    // Drain the channel.</span><br><span class="line">    for i := 0; i &lt; numCPU; i++ &#123;</span><br><span class="line">        &lt;-c    // wait for one task to complete</span><br><span class="line">    &#125;</span><br><span class="line">    // All done.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以询问运行时什么值合适，而不是为 numCPU 创建一个常量值。该函数<code>runtime.NumCPU</code> 返回机器中硬件 CPU 内核的数量，因此我们可以编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var numCPU = runtime.NumCPU()</span><br></pre></td></tr></table></figure>

<p>还有一个函数 <code>runtime.GOMAXPROCS</code>，它报告（或设置）用户指定的 Go 程序可以同时运行的内核数。它默认为 的值，<code>runtime.NumCPU</code>但可以通过设置类似命名的 shell 环境变量或使用正数调用函数来覆盖。用零调用它只是查询值。因此，如果我们想尊重用户的资源请求，我们应该写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var numCPU = runtime.GOMAXPROCS(0)</span><br></pre></td></tr></table></figure>

<p>一定不要混淆并发（将程序构建为独立执行的组件）和并行（并行执行计算以在多个 CPU 上提高效率）的概念。虽然 Go 的并发特性可以让一些问题易于构建为并行计算，但 Go 是一种并发语言，而不是并行语言，并不是所有的并行化问题都适合 Go 的模型。有关区别的讨论，请参阅此博客文章中引用的谈话 。</p>
<h3 id="泄漏的缓冲区">1.14.6. 泄漏的缓冲区</h3><p>并发编程的工具甚至可以让非并发的想法更容易表达。这是一个从 RPC 包中抽象出来的示例。客户端 goroutine 循环从某个源（可能是网络）接收数据。为了避免分配和释放缓冲区，它保留一个空闲列表，并使用一个缓冲通道来表示它。如果通道为空，则会分配一个新缓冲区。一旦消息缓冲区准备好，它就会被发送到 上的服务器 <code>serverChan</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var freeList = make(chan *Buffer, 100)</span><br><span class="line">var serverChan = make(chan *Buffer)</span><br><span class="line"></span><br><span class="line">func client() &#123;</span><br><span class="line">    for &#123;</span><br><span class="line">        var b *Buffer</span><br><span class="line">        // Grab a buffer if available; allocate if not.</span><br><span class="line">        select &#123;</span><br><span class="line">        case b = &lt;-freeList:</span><br><span class="line">            // Got one; nothing more to do.</span><br><span class="line">        default:</span><br><span class="line">            // None free, so allocate a new one.</span><br><span class="line">            b = new(Buffer)</span><br><span class="line">        &#125;</span><br><span class="line">        load(b)              // Read next message from the net.</span><br><span class="line">        serverChan &lt;- b      // Send to server.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器循环接收来自客户端的每条消息，对其进行处理，并将缓冲区返回到空闲列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func server() &#123;</span><br><span class="line">    for &#123;</span><br><span class="line">        b := &lt;-serverChan    // Wait for work.</span><br><span class="line">        process(b)</span><br><span class="line">        // Reuse buffer if there&#x27;s room.</span><br><span class="line">        select &#123;</span><br><span class="line">        case freeList &lt;- b:</span><br><span class="line">            // Buffer on free list; nothing more to do.</span><br><span class="line">        default:</span><br><span class="line">            // Free list full, just carry on.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端尝试从中检索缓冲区<code>freeList</code>；如果没有可用的，它会分配一个新的。服务器的发送到<code>freeList</code>放<code>b</code>可用列表备份，除非列表已满，在这种情况下缓冲掉在地上被垃圾收集器回收。（<code>default</code>语句中的子句在<code>select</code> 没有其他情况准备好时执行，这意味着<code>selects</code>永远不会阻塞。）这个实现只用几行就构建了一个漏桶空闲列表，依靠缓冲通道和垃圾收集器进行簿记。</p>
<h2 id="错误">1.15. 错误</h2><p>库例程必须经常向调用者返回某种错误指示。如前所述，Go 的多值返回使得在正常返回值的同时返回详细的错误描述变得容易。使用此功能提供详细的错误信息是一种很好的方式。例如，正如我们将看到的，<code>os.Open</code>不只是<code>nil</code>在失败时返回一个指针，它还返回一个错误值，描述出了什么问题。</p>
<p>按照惯例，错误具有 type <code>error</code>，一个简单的内置接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type error interface &#123;</span><br><span class="line">    Error() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>库编写者可以在幕后使用更丰富的模型自由地实现此接口，从而不仅可以查看错误，还可以提供一些上下文。如前所述，除了通常的<code>*os.File</code> 返回值，<code>os.Open</code>还返回一个错误值。如果文件打开成功，错误会是<code>nil</code>，但是当出现问题时，它会持有 <code>os.PathError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// PathError records an error and the operation and</span><br><span class="line">// file path that caused it.</span><br><span class="line">type PathError struct &#123;</span><br><span class="line">    Op string    // &quot;open&quot;, &quot;unlink&quot;, etc.</span><br><span class="line">    Path string  // The associated file.</span><br><span class="line">    Err error    // Returned by the system call.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *PathError) Error() string &#123;</span><br><span class="line">    return e.Op + &quot; &quot; + e.Path + &quot;: &quot; + e.Err.Error()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PathError</code>‘s<code>Error</code>生成这样的字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open /etc/passwx: no such file or directory</span><br></pre></td></tr></table></figure>

<p>这样的错误，包括有问题的文件名、操作和它触发的操作系统错误，即使在远离导致它的调用的地方打印也是有用的；它比简单的“没有这样的文件或目录”提供更多信息。</p>
<p>在可行的情况下，错误字符串应标识其来源，例如通过前缀命名产生错误的操作或包。例如，在 package 中 <code>image</code>，由于未知格式导致的解码错误的字符串表示是“图像：未知格式”。</p>
<p>关心精确错误细节的调用者可以使用类型开关或类型断言来查找特定错误并提取细节。对于<code>PathErrors</code> 这可能包括检查内部<code>Err</code> 领域可恢复故障。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for try := 0; try &lt; 2; try++ &#123;</span><br><span class="line">    file, err = os.Create(filename)</span><br><span class="line">    if err == nil &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if e, ok := err.(*os.PathError); ok &amp;&amp; e.Err == syscall.ENOSPC &#123;</span><br><span class="line">        deleteTempFiles()  // Recover some space.</span><br><span class="line">        continue</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>if</code>这里 的第二个语句是另一种类型的断言。如果失败，<code>ok</code>则为 false，并且<code>e</code> 为<code>nil</code>。如果成功， 则为<code>ok</code>true，这意味着错误的类型<code>*os.PathError</code>是<code>e</code>，然后是，我们可以检查它以获取有关错误的更多信息。</p>
<h3 id="Panic">1.15.1. Panic</h3><p>向调用者报告错误的常用方法是将 an <code>error</code>作为额外的返回值返回。规范 <code>Read</code>方法是一个众所周知的例子；它返回一个字节数和一个<code>error</code>. 但是如果错误是不可恢复的呢？有时程序根本无法继续。</p>
<p>为此，有一个内置函数<code>panic</code> 实际上会创建一个运行时错误，该错误将停止程序（但请参阅下一节）。该函数采用任意类型的单个参数（通常是字符串）在程序终止时打印。这也是一种表明发生了不可能的事情的方式，例如退出无限循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// A toy implementation of cube root using Newton&#x27;s method.</span><br><span class="line">func CubeRoot(x float64) float64 &#123;</span><br><span class="line">    z := x/3   // Arbitrary initial value</span><br><span class="line">    for i := 0; i &lt; 1e6; i++ &#123;</span><br><span class="line">        prevz := z</span><br><span class="line">        z -= (z*z*z-x) / (3*z*z)</span><br><span class="line">        if veryClose(z, prevz) &#123;</span><br><span class="line">            return z</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // A million iterations has not converged; something is wrong.</span><br><span class="line">    panic(fmt.Sprintf(&quot;CubeRoot(%g) did not converge&quot;, x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这只是一个例子，但真正的库函数应该避免<code>panic</code>. 如果问题可以被掩盖或解决，那么让事情继续运行总是比取消整个程序更好。一个可能的反例是在初始化期间：如果库确实无法自行设置，可以这么说，恐慌可能是合理的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var user = os.Getenv(&quot;USER&quot;)</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">    if user == &quot;&quot; &#123;</span><br><span class="line">        panic(&quot;no value for $USER&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Recover">1.15.2. Recover</h3><p>当<code>panic</code>被调用时，包括隐式的运行时错误，例如索引切片越界或类型断言失败，它会立即停止当前函数的执行并开始展开 goroutine 的堆栈，并在此过程中运行任何延迟的函数。如果展开到达 goroutine 堆栈的顶部，程序就会终止。但是，可以使用内置函数<code>recover</code>重新获得对 goroutine 的控制并恢复正常执行。</p>
<p>调用<code>recover</code>停止展开并返回传递给 的参数<code>panic</code>。因为在展开时运行的唯一代码是在延迟函数内部，<code>recover</code> 所以仅在延迟函数内部有用。</p>
<p>一种应用<code>recover</code>是关闭服务器内失败的 goroutine，而不杀死其他正在执行的 goroutine。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func server(workChan &lt;-chan *Work) &#123;</span><br><span class="line">    for work := range workChan &#123;</span><br><span class="line">        go safelyDo(work)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func safelyDo(work *Work) &#123;</span><br><span class="line">    defer func() &#123;</span><br><span class="line">        if err := recover(); err != nil &#123;</span><br><span class="line">            log.Println(&quot;work failed:&quot;, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    do(work)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，如果发生<code>do(work)</code>恐慌，结果将被记录下来并且 goroutine 将干净地退出而不会打扰其他人。在延迟关闭中不需要做任何其他事情；调用<code>recover</code>完全处理条件。</p>
<p>因为除非直接从延迟函数调用，否则<code>recover</code>总是返回<code>nil</code>，延迟代码可以调用自己使用的库例程<code>panic</code>并且<code>recover</code>不会失败。例如，延迟函数 in<code>safelyDo</code>可能会在调用 之前调用日志记录函数<code>recover</code>，并且该日志记录代码将不受恐慌状态的影响运行。</p>
<p>有了我们的恢复模式，<code>do</code> 函数（以及它调用的任何东西）可以通过调用<code>panic</code>. 我们可以使用这个想法来简化复杂软件中的错误处理。让我们看一个<code>regexp</code>包的理想化版本，它通过调用<code>panic</code>本地错误类型来报告解析错误。这是<code>Error</code>、<code>error</code>方法和<code>Compile</code>函数的定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Error is the type of a parse error; it satisfies the error interface.</span><br><span class="line">type Error string</span><br><span class="line">func (e Error) Error() string &#123;</span><br><span class="line">    return string(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// error is a method of *Regexp that reports parsing errors by</span><br><span class="line">// panicking with an Error.</span><br><span class="line">func (regexp *Regexp) error(err string) &#123;</span><br><span class="line">    panic(Error(err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Compile returns a parsed representation of the regular expression.</span><br><span class="line">func Compile(str string) (regexp *Regexp, err error) &#123;</span><br><span class="line">    regexp = new(Regexp)</span><br><span class="line">    // doParse will panic if there is a parse error.</span><br><span class="line">    defer func() &#123;</span><br><span class="line">        if e := recover(); e != nil &#123;</span><br><span class="line">            regexp = nil    // Clear return value.</span><br><span class="line">            err = e.(Error) // Will re-panic if not a parse error.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    return regexp.doParse(str), nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果发生<code>doParse</code>恐慌，恢复块会将返回值设置为——<code>nil</code>延迟函数可以修改命名返回值。然后，它会在对 的赋值中<code>err</code>通过断言它具有本地类型来检查问题是否是解析错误<code>Error</code>。如果没有，类型断言将失败，导致运行时错误继续堆栈展开，就好像没有中断它一样。这种检查意味着如果发生意外情况，例如索引越界，即使我们正在使用<code>panic</code>和<code>recover</code>处理解析错误，代码也会失败。</p>
<p>错误处理到位后，该<code>error</code>方法（因为它是绑定到类型的方法，它与内置<code>error</code>类型具有相同的名称很好，甚至很自然）可以轻松报告解析错误，而无需担心展开解析堆栈用手：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if pos == 0 &#123;</span><br><span class="line">    re.error(&quot;&#x27;*&#x27; illegal at start of expression&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然这种模式很有用，但它应该只在包中使用。<code>Parse</code>将其内部<code>panic</code>调用转化为 <code>error</code>值；它不会暴露<code>panics</code> 给它的客户。这是一个很好的规则。</p>
<p>顺便说一下，如果发生实际错误，这个 re-panic 习惯用法会更改 panic 值。但是，原始故障和新故障都会出现在崩溃报告中，因此问题的根本原因仍然可见。因此，这种简单的 re-panic 方法通常就足够了——毕竟它是一个崩溃——但是如果你只想显示原始值，你可以编写更多的代码来过滤意外的问题并使用原始错误 re-panic。这留给读者作为练习。</p>
<h2 id="一个网络服务器">1.16. 一个网络服务器</h2><p>让我们完成一个完整的 Go 程序，一个 Web 服务器。这实际上是一种网络重新服务器。Google 提供了一项服务，<code>chart.apis.google.com</code> 可以将数据自动格式化为图表和图形。但是，它很难以交互方式使用，因为您需要将数据作为查询放入 URL。此处的程序为一种数据形式提供了更好的界面：给定一小段文本，它调用图表服务器生成二维码，即对文本进行编码的框矩阵。该图像可以用手机的摄像头抓取并解释为，例如，一个 URL，无需您在手机的小键盘中输入 URL。</p>
<p>这是完整的程序。解释如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;flag&quot;</span><br><span class="line">    &quot;html/template&quot;</span><br><span class="line">    &quot;log&quot;</span><br><span class="line">    &quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var addr = flag.String(&quot;addr&quot;, &quot;:1718&quot;, &quot;http service address&quot;) // Q=17, R=18</span><br><span class="line"></span><br><span class="line">var templ = template.Must(template.New(&quot;qr&quot;).Parse(templateStr))</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line">    http.Handle(&quot;/&quot;, http.HandlerFunc(QR))</span><br><span class="line">    err := http.ListenAndServe(*addr, nil)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Fatal(&quot;ListenAndServe:&quot;, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func QR(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    templ.Execute(w, req.FormValue(&quot;s&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const templateStr = `</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;QR Link Generator&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;&#123;if .&#125;&#125;</span><br><span class="line">&lt;img src=&quot;http://chart.apis.google.com/chart?chs=300x300&amp;cht=qr&amp;choe=UTF-8&amp;chl=&#123;&#123;.&#125;&#125;&quot; /&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;.&#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&lt;form action=&quot;/&quot; name=f method=&quot;GET&quot;&gt;</span><br><span class="line">    &lt;input maxLength=1024 size=70 name=s value=&quot;&quot; title=&quot;Text to QR Encode&quot;&gt;</span><br><span class="line">    &lt;input type=submit value=&quot;Show QR&quot; name=qr&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<p>上面的部分<code>main</code>应该很容易理解。one 标志为我们的服务器设置默认 HTTP 端口。模板变量<code>templ</code>是有趣的地方。它构建了一个将由服务器执行以显示页面的 HTML 模板；稍后会详细介绍。</p>
<p>该<code>main</code>函数解析标志，并使用我们上面讨论的机制将函数绑定<code>QR</code>到服务器的根路径。然后<code>http.ListenAndServe</code>被调用来启动服务器；它在服务器运行时阻塞。</p>
<p><code>QR</code>只接收包含表单数据的请求，并对名为 的表单值中的数据执行模板<code>s</code>。</p>
<p>模板包<code>html/template</code>功能强大；该程序仅涉及其功能。本质上，它通过替换从传递给 的数据项派生的元素<code>templ.Execute</code>（在本例中为表单值），即时重写了一段 HTML 文本。在模板文本 ( <code>templateStr</code>) 中，双花括号分隔的部分表示模板操作。仅当当前数据项的值（称为（点））不为空时，<code>&#123;&#123;if .&#125;&#125;</code> 才会<code>&#123;&#123;end&#125;&#125;</code>执行来自to的部分<code>.</code>。即当字符串为空时，这块模板被抑制。</p>
<p>这两个片段<code>&#123;&#123;.&#125;&#125;</code>表示在网页上显示呈现给模板的数据——查询字符串。HTML 模板包会自动提供适当的转义，以便可以安全地显示文本。</p>
<p>模板字符串的其余部分只是页面加载时显示的 HTML。如果这样解释太快，请参阅 模板包的文档以进行更深入的讨论。</p>
<p>这就是它：几行代码加上一些数据驱动的 HTML 文本的有用的 Web 服务器。Go 足够强大，可以在几行代码中完成很多事情。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
